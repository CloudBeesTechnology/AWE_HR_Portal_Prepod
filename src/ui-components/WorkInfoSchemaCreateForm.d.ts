/***************************************************************************
 * The contents of this file were generated with Amplify Studio.           *
 * Please refrain from making any modifications to this file.              *
 * Any changes to this file will be overwritten when running amplify pull. *
 **************************************************************************/

import * as React from "react";
import { GridProps, TextFieldProps } from "@aws-amplify/ui-react";
export declare type EscapeHatchProps = {
    [elementHierarchy: string]: Record<string, unknown>;
} | null;
export declare type VariantValues = {
    [key: string]: string;
};
export declare type Variant = {
    variantValues: VariantValues;
    overrides: EscapeHatchProps;
};
export declare type ValidationResponse = {
    hasError: boolean;
    errorMessage?: string;
};
export declare type ValidationFunction<T> = (value: T, validationResponse: ValidationResponse) => ValidationResponse | Promise<ValidationResponse>;
export declare type WorkInfoSchemaCreateFormInputValues = {
    empID?: string;
    dateOfJoin?: string;
    department?: string;
    workPosition?: string;
    upgradePosition?: string;
    jobDescription?: string;
    skillPool?: string;
    workStatus?: string;
    contractStartDate?: string;
    contractEndDate?: string;
    contractPeriodStatus?: string;
    probationaryStartDate?: string;
    probationaryEndDate?: string;
    normalWorkingHours?: string;
    salaryType?: string;
    employmentWorkStatus?: string;
    resignationDate?: string;
    terminationDate?: string;
    terminationNoticeProbation?: string;
    terminationNoticeConfirmation?: string;
    resignationNoticeProbation?: string;
    resignationNoticeConfirmation?: string;
    reasonOfResignation?: string;
    reasonOfTermination?: string;
    destinationOfEntitlement?: string;
    leavePassageEntitlement?: string;
    dateOfEntitlement?: string;
    durationPeriodEntitlement?: string;
    annualLeaveEntitlement?: string;
    effectiveDateRevision?: string;
    sickLeaveEntitlement?: string;
    jobCategory?: string;
    otherJobCategory?: string;
    upgradeDate?: string;
    normalWorkingWeek?: string;
    normalWorkingMonth?: string;
    effectiveDateOfSickLeave?: string;
    positionRevision?: string;
    RevisionsalaryPackage?: string;
    leavePassageEntitlementRevision?: string;
    effectiveDateOfLeavePassage?: string;
    revisionAnnualLeave?: string;
    annualLeaveEffectDate?: string;
    ContractEffectDate?: string;
    contractOfEmployee?: string;
    remarksWorkInfo?: string;
};
export declare type WorkInfoSchemaCreateFormValidationValues = {
    empID?: ValidationFunction<string>;
    dateOfJoin?: ValidationFunction<string>;
    department?: ValidationFunction<string>;
    workPosition?: ValidationFunction<string>;
    upgradePosition?: ValidationFunction<string>;
    jobDescription?: ValidationFunction<string>;
    skillPool?: ValidationFunction<string>;
    workStatus?: ValidationFunction<string>;
    contractStartDate?: ValidationFunction<string>;
    contractEndDate?: ValidationFunction<string>;
    contractPeriodStatus?: ValidationFunction<string>;
    probationaryStartDate?: ValidationFunction<string>;
    probationaryEndDate?: ValidationFunction<string>;
    normalWorkingHours?: ValidationFunction<string>;
    salaryType?: ValidationFunction<string>;
    employmentWorkStatus?: ValidationFunction<string>;
    resignationDate?: ValidationFunction<string>;
    terminationDate?: ValidationFunction<string>;
    terminationNoticeProbation?: ValidationFunction<string>;
    terminationNoticeConfirmation?: ValidationFunction<string>;
    resignationNoticeProbation?: ValidationFunction<string>;
    resignationNoticeConfirmation?: ValidationFunction<string>;
    reasonOfResignation?: ValidationFunction<string>;
    reasonOfTermination?: ValidationFunction<string>;
    destinationOfEntitlement?: ValidationFunction<string>;
    leavePassageEntitlement?: ValidationFunction<string>;
    dateOfEntitlement?: ValidationFunction<string>;
    durationPeriodEntitlement?: ValidationFunction<string>;
    annualLeaveEntitlement?: ValidationFunction<string>;
    effectiveDateRevision?: ValidationFunction<string>;
    sickLeaveEntitlement?: ValidationFunction<string>;
    jobCategory?: ValidationFunction<string>;
    otherJobCategory?: ValidationFunction<string>;
    upgradeDate?: ValidationFunction<string>;
    normalWorkingWeek?: ValidationFunction<string>;
    normalWorkingMonth?: ValidationFunction<string>;
    effectiveDateOfSickLeave?: ValidationFunction<string>;
    positionRevision?: ValidationFunction<string>;
    RevisionsalaryPackage?: ValidationFunction<string>;
    leavePassageEntitlementRevision?: ValidationFunction<string>;
    effectiveDateOfLeavePassage?: ValidationFunction<string>;
    revisionAnnualLeave?: ValidationFunction<string>;
    annualLeaveEffectDate?: ValidationFunction<string>;
    ContractEffectDate?: ValidationFunction<string>;
    contractOfEmployee?: ValidationFunction<string>;
    remarksWorkInfo?: ValidationFunction<string>;
};
export declare type PrimitiveOverrideProps<T> = Partial<T> & React.DOMAttributes<HTMLDivElement>;
export declare type WorkInfoSchemaCreateFormOverridesProps = {
    WorkInfoSchemaCreateFormGrid?: PrimitiveOverrideProps<GridProps>;
    empID?: PrimitiveOverrideProps<TextFieldProps>;
    dateOfJoin?: PrimitiveOverrideProps<TextFieldProps>;
    department?: PrimitiveOverrideProps<TextFieldProps>;
    workPosition?: PrimitiveOverrideProps<TextFieldProps>;
    upgradePosition?: PrimitiveOverrideProps<TextFieldProps>;
    jobDescription?: PrimitiveOverrideProps<TextFieldProps>;
    skillPool?: PrimitiveOverrideProps<TextFieldProps>;
    workStatus?: PrimitiveOverrideProps<TextFieldProps>;
    contractStartDate?: PrimitiveOverrideProps<TextFieldProps>;
    contractEndDate?: PrimitiveOverrideProps<TextFieldProps>;
    contractPeriodStatus?: PrimitiveOverrideProps<TextFieldProps>;
    probationaryStartDate?: PrimitiveOverrideProps<TextFieldProps>;
    probationaryEndDate?: PrimitiveOverrideProps<TextFieldProps>;
    normalWorkingHours?: PrimitiveOverrideProps<TextFieldProps>;
    salaryType?: PrimitiveOverrideProps<TextFieldProps>;
    employmentWorkStatus?: PrimitiveOverrideProps<TextFieldProps>;
    resignationDate?: PrimitiveOverrideProps<TextFieldProps>;
    terminationDate?: PrimitiveOverrideProps<TextFieldProps>;
    terminationNoticeProbation?: PrimitiveOverrideProps<TextFieldProps>;
    terminationNoticeConfirmation?: PrimitiveOverrideProps<TextFieldProps>;
    resignationNoticeProbation?: PrimitiveOverrideProps<TextFieldProps>;
    resignationNoticeConfirmation?: PrimitiveOverrideProps<TextFieldProps>;
    reasonOfResignation?: PrimitiveOverrideProps<TextFieldProps>;
    reasonOfTermination?: PrimitiveOverrideProps<TextFieldProps>;
    destinationOfEntitlement?: PrimitiveOverrideProps<TextFieldProps>;
    leavePassageEntitlement?: PrimitiveOverrideProps<TextFieldProps>;
    dateOfEntitlement?: PrimitiveOverrideProps<TextFieldProps>;
    durationPeriodEntitlement?: PrimitiveOverrideProps<TextFieldProps>;
    annualLeaveEntitlement?: PrimitiveOverrideProps<TextFieldProps>;
    effectiveDateRevision?: PrimitiveOverrideProps<TextFieldProps>;
    sickLeaveEntitlement?: PrimitiveOverrideProps<TextFieldProps>;
    jobCategory?: PrimitiveOverrideProps<TextFieldProps>;
    otherJobCategory?: PrimitiveOverrideProps<TextFieldProps>;
    upgradeDate?: PrimitiveOverrideProps<TextFieldProps>;
    normalWorkingWeek?: PrimitiveOverrideProps<TextFieldProps>;
    normalWorkingMonth?: PrimitiveOverrideProps<TextFieldProps>;
    effectiveDateOfSickLeave?: PrimitiveOverrideProps<TextFieldProps>;
    positionRevision?: PrimitiveOverrideProps<TextFieldProps>;
    RevisionsalaryPackage?: PrimitiveOverrideProps<TextFieldProps>;
    leavePassageEntitlementRevision?: PrimitiveOverrideProps<TextFieldProps>;
    effectiveDateOfLeavePassage?: PrimitiveOverrideProps<TextFieldProps>;
    revisionAnnualLeave?: PrimitiveOverrideProps<TextFieldProps>;
    annualLeaveEffectDate?: PrimitiveOverrideProps<TextFieldProps>;
    ContractEffectDate?: PrimitiveOverrideProps<TextFieldProps>;
    contractOfEmployee?: PrimitiveOverrideProps<TextFieldProps>;
    remarksWorkInfo?: PrimitiveOverrideProps<TextFieldProps>;
} & EscapeHatchProps;
export declare type WorkInfoSchemaCreateFormProps = React.PropsWithChildren<{
    overrides?: WorkInfoSchemaCreateFormOverridesProps | undefined | null;
} & {
    clearOnSuccess?: boolean;
    onSubmit?: (fields: WorkInfoSchemaCreateFormInputValues) => WorkInfoSchemaCreateFormInputValues;
    onSuccess?: (fields: WorkInfoSchemaCreateFormInputValues) => void;
    onError?: (fields: WorkInfoSchemaCreateFormInputValues, errorMessage: string) => void;
    onChange?: (fields: WorkInfoSchemaCreateFormInputValues) => WorkInfoSchemaCreateFormInputValues;
    onValidate?: WorkInfoSchemaCreateFormValidationValues;
} & React.CSSProperties>;
export default function WorkInfoSchemaCreateForm(props: WorkInfoSchemaCreateFormProps): React.ReactElement;
