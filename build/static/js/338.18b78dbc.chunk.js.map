{"version":3,"file":"static/js/338.18b78dbc.chunk.js","mappings":"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","sources":["pages/forgotPassword/ForgotEmail.jsx","services/Validation.jsx","../node_modules/@aws-amplify/auth/src/foundation/factories/serviceClients/cognitoIdentityProvider/createForgotPasswordClient.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/apis/resetPassword.ts"],"sourcesContent":["import { useState } from \"react\";\r\nimport emailImage from \"../../assets/login/emailImage.jpg\";\r\nimport logo from \"../../assets/logo/logo-with-name.svg\";\r\nimport { EmailSchema } from \"../../services/Validation\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { resetPassword } from \"@aws-amplify/auth\";\r\n\r\nconst ForgotEmail = () => {\r\n  const navigate = useNavigate();\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n    handleSubmit,\r\n  } = useForm({ resolver: yupResolver(EmailSchema) });\r\n\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const onSubmit = handleSubmit(async (data) => {\r\n    const { userName } = data;\r\n\r\n    if (!userName) {\r\n      setError(\"Username is required to reset password.\");\r\n      return;\r\n    }\r\n    try {\r\n      await resetPassword({ username: userName });\r\n      alert(\"An OTP has been sent to your registered email/phone.\");\r\n      localStorage.setItem(\"username\", userName);\r\n      localStorage.setItem(\"FPSWD\", \"FPswd\");\r\n      localStorage.removeItem(\"FEmail\");\r\n      window.location.href = \"/forgotPassword\";\r\n    } catch (err) {\r\n      if (err.code === \"UserNotFoundException\") {\r\n        setError(\"User not found. Please check your username/email.\");\r\n      } else {\r\n        setError(\"An unexpected error occurred. Please try again.\");\r\n      }\r\n    }\r\n  });\r\n\r\n  return (\r\n    <section className=\"screen-size mx-auto flex h-screen\">\r\n      <div className=\"flex-1 border-r-2 border-[#E9E9E9] center\">\r\n        <img\r\n          className=\"w-full max-w-[500px]\"\r\n          src={emailImage}\r\n          alt=\"Rightside Pic not found\"\r\n        />\r\n      </div>\r\n      <div className=\"flex-1 justify-center flex items-center gap-8 py-20 flex-col w-full px-3\">\r\n        <div>\r\n          <img\r\n            className=\"w-full max-w-[450px]\"\r\n            src={logo}\r\n            alt=\"Logo not found\"\r\n          />\r\n        </div>\r\n        <article className=\"space-y-2 mt-10 text-center\">\r\n          <h1 className=\"text-dark_grey title\">Forgot Your Password?</h1>\r\n          <p className=\"text-dark_grey text_size_8\">\r\n            Enter your user id below to receive a password reset link.\r\n          </p>\r\n        </article>\r\n\r\n        {error && <p className=\"text-red-500\">{error}</p>}\r\n\r\n        <form className=\"space-y-5 w-[400px]\" onSubmit={onSubmit}>\r\n          <div className=\"space-y-1\">\r\n            <label htmlFor=\"userName\" className=\"text-dark_grey text_size_8\">\r\n              User ID\r\n            </label>\r\n            <div className=\"shadow-md shadow-[#00000040] border border-[#D3D3D3] overflow-hidden rounded-lg py-1 px-3 w-full\">\r\n              <input\r\n                className=\"outline-none py-2 w-full\"\r\n                type=\"text\"\r\n                id=\"userName\"\r\n                name=\"userName\"\r\n                placeholder=\"Enter your user id\"\r\n                {...register(\"userName\")}\r\n              />\r\n            </div>\r\n            <p className=\"text-[red] text-xs my-3\">\r\n              {errors.userName?.message}\r\n            </p>\r\n          </div>\r\n          <div className=\"center\">\r\n            <button type=\"submit\" className=\"primary_btn text_size_4 mt-5\">\r\n              Next\r\n            </button>\r\n          </div>\r\n        </form>\r\n\r\n        <hr className=\"border-[1.5px] text-[#B3B3B3] w-[60%]\" />\r\n        <div\r\n          className=\"center\"\r\n          onClick={() => {\r\n            localStorage.removeItem(\"FEmail\");\r\n            window.location.href = \"/login\";\r\n          }}\r\n        >\r\n          <button className=\"\">\r\n            Back to {\"\"}\r\n            <span className=\"text-[#159AB1]\">login</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ForgotEmail;\r\n","import * as Yup from \"yup\";\r\n\r\nexport const LoginSchema = Yup.object({\r\n  userID: Yup.string().required(\"UserID is mandatory\"),\r\n  password: Yup.string().required(\"Password is Required\"),\r\n});\r\nexport const newPasswordSchema = Yup.object({\r\n  newPassword: Yup.string()\r\n  .required(\"New Password is required\")\r\n  .min(8, \"Password must be at least 8 characters\"),\r\nrePassword: Yup.string()\r\n  .required(\"Please confirm your password\")\r\n  .oneOf([Yup.ref(\"newPassword\"), null], \"Passwords must match\"),\r\n});\r\n\r\n\r\nexport const EmailSchema = Yup.object({\r\n  userName: Yup.string().required(\"User Name is mandatory\"),\r\n\r\n});\r\n\r\nexport const UserSchema = Yup.object({\r\n  empID: Yup.string().required(\"Employee ID is required\"),\r\n  password: Yup.string().required(\"Temporary Password is required\"),\r\n  selectType: Yup.string().required(\"Please select a type\"),\r\n  officialEmail: Yup.string().required(\"OfficialEmail is required\"),\r\n  userID: Yup.string().required(\"User ID is mandatory\"),\r\n  name: Yup.string().required(\"Name is mandatory\"),\r\n  contactNo: Yup.string().required(\"Contact number is mandatory\"),\r\n  position: Yup.string().required(\"Position is mandatory\"),\r\n  department: Yup.string().required(\"Department is mandatory\"),\r\n});\r\n\r\nexport const ChangePasswordSchema = Yup.object({\r\n  userID: Yup.string().required(\"User ID is mandatory\"),\r\n  currentPassword: Yup.string().required(\"Current Password is mandatory\"),\r\n  password: Yup.string()\r\n    .min(8, \"Password must be at least 8 characters\")\r\n    .max(15, \"Password cannot exceed 15 characters\")\r\n    .matches(\r\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])/,\r\n      \"Password must contain at least one lowercase letter, one uppercase letter, one number, and one special character\"\r\n    )\r\n    .required(\"Password is required\"),\r\n\r\n  confirmPassword: Yup.string()\r\n    .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\")\r\n    .required(\"Confirm password is required\"),\r\n});\r\n\r\nexport const ApplicantSchema = Yup.object().shape({\r\n  profilePhoto: Yup.mixed()\r\n    .required(\"Upload Photo is mandatory\")\r\n    .test(\"fileType\", \"Profile photo must be a JPG or PNG file\", (value) =>\r\n      value ? /\\.(jpg|jpeg|png)$/.test(value.name) : false\r\n    ),\r\n  agent: Yup.string().notRequired(),\r\n  position: Yup.string().required(\"Position is mandatory\"),\r\n  contractType: Yup.string().required(\"Contract Type mandatory\"),\r\n  empType: Yup.string().required(\"Employee Type mandatory\"),\r\n  name: Yup.string()\r\n    .min(3, \"Name must be at least 3 characters\")\r\n    .required(\"Name is mandatory\"),\r\n  chinese: Yup.string().notRequired(),\r\n  gender: Yup.string().required(\"Gender is mandatory\"),\r\n  // age: Yup.string().required(\"age is mandatory\"),\r\n  dob: Yup.string().required(\"Date of Birth is mandatory\"),\r\n  age: Yup.number()\r\n    .min(20, \"Age must be at least 20\")\r\n    .max(99, \"Age cannot exceed 99\")\r\n    .required(\"Age is required\"),\r\n  email: Yup.string()\r\n    .email(\"Please enter a valid email\")\r\n    .required(\"Email is required\"),\r\n  cob: Yup.string().required(\"Country of Birth is mandatory\"),\r\n  nationality: Yup.string().required(\"Nationality is mandatory\"),\r\n  otherNation: Yup.string().when(\"nationality\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"other\",\r\n    then: () => Yup.string().required(\"Other Nationality is required\"),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n  marital: Yup.string().required(\"Marital status is mandatory\"),\r\n  race: Yup.string().required(\"Race is mandatory\"),\r\n  otherRace: Yup.string().when(\"race\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"other\",\r\n    then: () => Yup.string().required(\"Other Race is required\"),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n  religion: Yup.string().required(\"Religion is mandatory\"),\r\n  otherReligion: Yup.string().when(\"religion\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"other\",\r\n    then: () => Yup.string().required(\"Other religion is required\"),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n});\r\n\r\nexport const PersonalSchema = (nationality) => {\r\n  console.log(nationality);\r\n  const isBruneian =\r\n    nationality &&\r\n    (nationality.trim().toLowerCase() === \"bruneian\" ||\r\n      nationality.trim().toLowerCase() === \"brunei pr\");\r\n  console.log(isBruneian);\r\n\r\n  return Yup.object({\r\n    bwnIcNo: isBruneian\r\n      ? Yup.string()\r\n          .matches(\r\n            /^\\d{2}-\\d{6}$/,\r\n            \"I/C Number must be in the format XX-XXXXXX, where X is a digit\"\r\n          )\r\n          .required(\"I/C Number is mandatory for Bruneians\")\r\n      : Yup.string().notRequired(),\r\n\r\n    bwnIcColour: isBruneian\r\n      ? Yup.string().required(\"I/C Colour is mandatory for Bruneians\")\r\n      : Yup.string().notRequired(),\r\n\r\n    bwnIcExpiry: isBruneian\r\n      ? Yup.string().required(\"I/C Expiry is mandatory for Bruneians\")\r\n      : Yup.string().notRequired(),\r\n    ppNo: isBruneian\r\n      ? Yup.string().notRequired()\r\n      : Yup.string().required(\"Passport Number is mandatory\"),\r\n\r\n    ppIssued: isBruneian\r\n      ? Yup.string().notRequired()\r\n      : Yup.string().required(\"Passport issued is mandatory\"),\r\n    ppExpiry: isBruneian\r\n      ? Yup.string().notRequired()\r\n      : Yup.string().required(\"Passport Expiry is mandatory\"),\r\n    ppDestinate: isBruneian\r\n      ? Yup.string().notRequired()\r\n      : Yup.string().required(\"Passport destination is mandatory\"),\r\n\r\n    alternateNo: Yup.string().notRequired(),\r\n    contactNo: Yup.string().required(\"Contact Number is mandatory\"),\r\n    presentAddress: Yup.string().required(\"Present Address is mandatory\"),\r\n    permanentAddress: Yup.string().required(\"Permanent Address is mandatory\"),\r\n    driveLic: Yup.string().notRequired(),\r\n    lang: Yup.string().required(\"Language is mandatory\"),\r\n    familyDetails: Yup.array()\r\n      .of(\r\n        Yup.object().shape({\r\n          name: Yup.string().notRequired(),\r\n          relationship: Yup.string().notRequired(),\r\n          age: Yup.string().notRequired(),\r\n          occupation: Yup.string().notRequired(),\r\n          place: Yup.string().notRequired(),\r\n        })\r\n      )\r\n      .notRequired(),\r\n    eduDetails: Yup.array()\r\n      .of(\r\n        Yup.object().shape({\r\n          university: Yup.string().required(\"University Name is mandatory \"),\r\n          fromDate: Yup.string().required(\"From Date is mandatory\"),\r\n          toDate: Yup.string().required(\"To Date is mandatory\"),\r\n          degree: Yup.string().required(\"Degree is mandatory\"),\r\n        })\r\n      )\r\n      .required(\"At least one education detail is mandatory\"),\r\n    workExperience: Yup.array().of(\r\n      Yup.object().shape({\r\n        fromDate: Yup.string().notRequired(),\r\n        toDate: Yup.string().notRequired(),\r\n        companyAndAddress: Yup.string().notRequired(),\r\n        position: Yup.string().notRequired(),\r\n        salary: Yup.string().notRequired(),\r\n        reasonLeaving: Yup.string().notRequired(),\r\n      })\r\n    ),\r\n  });\r\n};\r\n\r\nexport const EducationSchema = Yup.object({\r\n  referees: Yup.array()\r\n    .of(\r\n      Yup.object().shape({\r\n        name: Yup.string().notRequired(),\r\n        address: Yup.string().notRequired(),\r\n        phoneNumber: Yup.string().notRequired(),\r\n        profession: Yup.string().notRequired(),\r\n      })\r\n    )\r\n    .notRequired(),\r\n  relatives: Yup.array()\r\n    .of(\r\n      Yup.object().shape({\r\n        name: Yup.string().notRequired(),\r\n        position: Yup.string().notRequired(),\r\n        relationship: Yup.string().notRequired(),\r\n      })\r\n    )\r\n    .notRequired(),\r\n  description: Yup.string().notRequired(),\r\n  emgDetails: Yup.array()\r\n    .of(\r\n      Yup.object().shape({\r\n        name: Yup.string().required(\"Name is mandatory\"),\r\n        relationship: Yup.string().required(\"Relationship is mandatory\"),\r\n        address: Yup.string().required(\"Address is mandatory\"),\r\n        phoneNumber: Yup.string().required(\"Phone Number is mandatory\"),\r\n        bloodGroup: Yup.string().notRequired(),\r\n      })\r\n    )\r\n    .required(\"At least one emergency contact is mandatory\"),\r\n  disease: Yup.string().notRequired(),\r\n  liquor: Yup.string().notRequired(),\r\n  crime: Yup.string().notRequired(),\r\n  diseaseDesc: Yup.string().when(\"disease\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"yes\",\r\n    then: () => Yup.string().notRequired(),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n  liquorDesc: Yup.string().when(\"liquor\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"yes\",\r\n    then: () => Yup.string().notRequired(),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n  crimeDesc: Yup.string().when(\"crime\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"yes\",\r\n    then: () => Yup.string().notRequired(),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n});\r\n\r\nexport const CandidatesSchema = Yup.object().shape({\r\n  salaryExpectation: Yup.string().notRequired(),\r\n  noExperience: Yup.string().required(\"Experience is required\"),\r\n  noticePeriod: Yup.string().required(\"Notice period is required\"),\r\n  empStatement: Yup.string().required(\"Employee Statement is required\"),\r\n  perIS: Yup.string().required(\"Interview status is required\"),\r\n  perID: Yup.string().when(\"perInterviewStatus\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"yes\",\r\n    then: () => Yup.string().notRequired(),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n  supportInfo: Yup.string(),\r\n\r\n  // File validation for resume (e.g., PDF, Word, Excel, or images)\r\n  uploadResume: Yup.mixed()\r\n    .required(\"Resume is required\")\r\n    .test(\r\n      \"fileType\",\r\n      \"Only PDF, Word, Excel, or image formats (JPEG, JPG, PNG, SVG) are allowed\",\r\n      (value) => {\r\n        return (\r\n          value &&\r\n          [\r\n            \"application/pdf\", // PDF\r\n            \"application/msword\", // Word .doc\r\n            \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\", // Word .docx\r\n            \"application/vnd.ms-excel\", // Excel .xls\r\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", // Excel .xlsx\r\n            \"image/jpeg\",\r\n            \"image/jpg\",\r\n            \"image/png\",\r\n            \"image/svg+xml\", // Images\r\n          ].includes(value.type)\r\n        );\r\n      }\r\n    ),\r\n\r\n  // File validation for certificate (e.g., PDF, Word, Excel, or images)\r\n  uploadCertificate: Yup.mixed()\r\n    .required(\"Certificate is required\")\r\n    .test(\r\n      \"fileType\",\r\n      \"Only PDF, Word, Excel, or image formats (JPEG, JPG, PNG, SVG) are allowed\",\r\n      (value) => {\r\n        return (\r\n          value &&\r\n          [\r\n            \"application/pdf\", // PDF\r\n            \"application/msword\", // Word .doc\r\n            \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\", // Word .docx\r\n            \"application/vnd.ms-excel\", // Excel .xls\r\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", // Excel .xlsx\r\n            \"image/jpeg\",\r\n            \"image/jpg\",\r\n            \"image/png\",\r\n            \"image/svg+xml\", // Images\r\n          ].includes(value.type)\r\n        );\r\n      }\r\n    ),\r\n\r\n  // File validation for passport (e.g., PDF, Word, Excel, or images)\r\n  uploadPp: Yup.mixed()\r\n    .required(\"Passport is required\")\r\n    .test(\r\n      \"fileType\",\r\n      \"Only PDF, Word, Excel, or image formats (JPEG, JPG, PNG, SVG) are allowed\",\r\n      (value) => {\r\n        return (\r\n          value &&\r\n          [\r\n            \"application/pdf\", // PDF\r\n            \"application/msword\", // Word .doc\r\n            \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\", // Word .docx\r\n            \"application/vnd.ms-excel\", // Excel .xls\r\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", // Excel .xlsx\r\n            \"image/jpeg\",\r\n            \"image/jpg\",\r\n            \"image/png\",\r\n            \"image/svg+xml\", // Images\r\n          ].includes(value.type)\r\n        );\r\n      }\r\n    ),\r\n});\r\n\r\n// Define the validation schema using Yup\r\nexport const EmpRequisitionSchema = Yup.object().shape({\r\n  nameReq: Yup.string().notRequired(),\r\n  requestorID: Yup.string().notRequired(),\r\n  approverID: Yup.string().notRequired(),\r\n  department: Yup.string().required(\"Department is required\"),\r\n  project: Yup.string().required(\"Project is required\"),\r\n  position: Yup.string().required(\"Position is required\"),\r\n  quantity: Yup.number()\r\n    .typeError(\"Quantity must be a number\")\r\n    .required(\"Quantity is required\"),\r\n  reasonForReq: Yup.string().required(\"Reason for request is required\"),\r\n  justification: Yup.string().required(\"Justification is required\"),\r\n  replacementFor: Yup.string().notRequired(),\r\n  qualification: Yup.string().required(\"State Qualification is required\"),\r\n  tentativeDate: Yup.date()\r\n    .min(new Date(), \"Tentative date must be in the future\")\r\n    .required(\"Tentative date is required\")\r\n    .typeError(\"Please enter a valid date\"),\r\n  status: Yup.string().notRequired(),\r\n  remarkReq: Yup.string().notRequired(),\r\n});\r\n\r\n\r\nexport const InterviewScheduleSchema = Yup.object().shape({\r\n  interDate: Yup.date()\r\n  .required(\"Date is required\")\r\n  .typeError(\"Date is required\")\r\n  .min(\r\n    new Date(),\r\n    \"The selected date is in the past. Please choose a valid date.\"\r\n  ),\r\n  interTime: Yup.string()\r\n  .required(\"Time is required\")\r\n  .matches(\r\n    /^(0[8-9]|1[0-5]):([0-5]\\d)$/,\r\n    \"Please choose a time between 8:00 AM and 4:00 PM.\"\r\n  ),\r\n  venue: Yup.string().required(\"Venue is required\"),\r\n  interType: Yup.string().notRequired(),\r\n  empBadgeNo: Yup.string().notRequired(\"Badge Number is required\"),\r\n  manager:  Yup.string().notRequired(\"Manager is required\"),\r\n  message: Yup.string().optional(),\r\n});\r\n\r\nexport const hiringJobSchema = Yup.object().shape({\r\n  jobTitle: Yup.string().required(\"Job Title is required\"),\r\n  location: Yup.string().notRequired(),\r\n  jobDesc: Yup.string().notRequired(),\r\n  experience: Yup.string().required(\"Experience is required\"),\r\n  quantity: Yup.string().notRequired(),\r\n  startDate: Yup.date()\r\n    .nullable()\r\n    .transform((value, originalValue) => (originalValue === \"\" ? null : value))\r\n    .notRequired(),\r\n  expiryDate: Yup.date()\r\n    .nullable()\r\n    .transform((value, originalValue) => (originalValue === \"\" ? null : value))\r\n    .notRequired()\r\n    .test(\"is-future-date\", \"Only Future Dates Allowed\", function (value) {\r\n      return !value || new Date(value) > new Date();\r\n    }),\r\n    uploadJobDetails:Yup.string().notRequired()\r\n});\r\n\r\n//WorkPass Tracking Forms Schema - Recruitment \r\nexport const SawpFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  sawpLtrReq: Yup.date().notRequired(),\r\n  sawpLtrRece: Yup.date().notRequired(),\r\n  sawpFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const DoeFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  doeSubmit: Yup.date().notRequired(),\r\n  doeApproval: Yup.date().notRequired(),\r\n  doeValid: Yup.date().notRequired(),\r\n  doeRefNo: Yup.string().notRequired(),\r\n  doeFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const NlmsFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  nlmsSubmit: Yup.date().notRequired(),\r\n  nlmsSubmitRefNo: Yup.string().notRequired(),\r\n  nlmsApproval: Yup.date().notRequired(),\r\n  nlmsValid: Yup.date().notRequired(),\r\n  ldRefNo: Yup.string().notRequired(),\r\n  nlmsFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const BankFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  bgSubmit: Yup.date().notRequired(),\r\n  bgRece: Yup.date().notRequired(),\r\n  bgValid: Yup.date().notRequired(),\r\n  bgRefNo: Yup.string().notRequired(),\r\n  bgAmount: Yup.string().notRequired(),\r\n  bgFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const JitpaFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  jpTbaPurchase: Yup.date().notRequired(),\r\n  jpEndorsement: Yup.date().notRequired(),\r\n  jitpaValid: Yup.date().notRequired(),\r\n  jpAmount: Yup.string().notRequired(),\r\n  jitpaFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const LabourDepFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  labDepReceiptNo: Yup.string().notRequired(),\r\n  labDepAmount: Yup.string().notRequired(),\r\n  labEndrose: Yup.date().notRequired(),\r\n  labDepFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const ImmigrationFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  immbdNo: Yup.string().notRequired(),\r\n  docSubmit: Yup.date().notRequired(),\r\n  visaApproval: Yup.date().notRequired(),\r\n  visaRefNo: Yup.string().notRequired(),\r\n  visaFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const AirTktFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  departure: Yup.date().notRequired(),\r\n  arrival: Yup.date().notRequired(),\r\n  cityName: Yup.string().notRequired(),\r\n  airFare: Yup.string().notRequired(),\r\n  airTktFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const NonLocalMOBFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  mobSignDate: Yup.date().notRequired(),\r\n  agent: Yup.string().notRequired(),\r\n  remarkNLMob: Yup.string().notRequired(),\r\n  mobFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler';\nimport { createUserPoolDeserializer, createUserPoolSerializer, } from './shared/serde';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants';\nexport const createForgotPasswordClient = (config) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('ForgotPassword'), createUserPoolDeserializer(), {\n    ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n    ...config,\n});\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { getUserContextData } from '../utils/userContextData';\nimport { createForgotPasswordClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\n/**\n * Resets a user's password.\n *\n * @param input -  The ResetPasswordInput object.\n * @returns ResetPasswordOutput\n * @throws -{@link ForgotPasswordException }\n * Thrown due to an invalid confirmation code or password.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty username.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n **/\nexport async function resetPassword(input) {\n    const { username } = input;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptyResetPasswordUsername);\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolClientId, userPoolId, userPoolEndpoint } = authConfig;\n    const clientMetadata = input.options?.clientMetadata;\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const forgotPassword = createForgotPasswordClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const res = await forgotPassword({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ResetPassword),\n    }, {\n        Username: username,\n        ClientMetadata: clientMetadata,\n        ClientId: userPoolClientId,\n        UserContextData,\n    });\n    const codeDeliveryDetails = res.CodeDeliveryDetails;\n    return {\n        isPasswordReset: false,\n        nextStep: {\n            resetPasswordStep: 'CONFIRM_RESET_PASSWORD_WITH_CODE',\n            codeDeliveryDetails: {\n                deliveryMedium: codeDeliveryDetails?.DeliveryMedium,\n                destination: codeDeliveryDetails?.Destination,\n                attributeName: codeDeliveryDetails?.AttributeName,\n            },\n        },\n    };\n}\n"],"names":["ForgotEmail","_errors$userName","useNavigate","register","formState","errors","handleSubmit","useForm","resolver","yupResolver","EmailSchema","error","setError","useState","onSubmit","async","userName","data","resetPassword","username","alert","localStorage","setItem","removeItem","window","location","href","err","code","_jsxs","className","children","_jsx","src","emailImage","alt","logo","htmlFor","_objectSpread","type","id","name","placeholder","message","onClick","LoginSchema","Yup","userID","required","password","newPasswordSchema","newPassword","min","rePassword","oneOf","UserSchema","empID","selectType","officialEmail","contactNo","position","department","ChangePasswordSchema","currentPassword","max","matches","confirmPassword","ApplicantSchema","shape","profilePhoto","test","value","agent","notRequired","contractType","empType","chinese","gender","dob","age","email","cob","nationality","otherNation","when","is","trim","toLowerCase","then","otherwise","marital","race","otherRace","religion","otherReligion","PersonalSchema","console","log","isBruneian","bwnIcNo","bwnIcColour","bwnIcExpiry","ppNo","ppIssued","ppExpiry","ppDestinate","alternateNo","presentAddress","permanentAddress","driveLic","lang","familyDetails","of","relationship","occupation","place","eduDetails","university","fromDate","toDate","degree","workExperience","companyAndAddress","salary","reasonLeaving","EducationSchema","referees","address","phoneNumber","profession","relatives","description","emgDetails","bloodGroup","disease","liquor","crime","diseaseDesc","liquorDesc","crimeDesc","CandidatesSchema","salaryExpectation","noExperience","noticePeriod","empStatement","perIS","perID","supportInfo","uploadResume","includes","uploadCertificate","uploadPp","EmpRequisitionSchema","nameReq","requestorID","approverID","project","quantity","typeError","reasonForReq","justification","replacementFor","qualification","tentativeDate","Date","status","remarkReq","InterviewScheduleSchema","interDate","interTime","venue","interType","empBadgeNo","manager","optional","hiringJobSchema","jobTitle","jobDesc","experience","startDate","nullable","transform","originalValue","expiryDate","uploadJobDetails","SawpFormSchema","tempID","sawpLtrReq","sawpLtrRece","sawpFile","DoeFormSchema","doeSubmit","doeApproval","doeValid","doeRefNo","doeFile","NlmsFormSchema","nlmsSubmit","nlmsSubmitRefNo","nlmsApproval","nlmsValid","ldRefNo","nlmsFile","BankFormSchema","bgSubmit","bgRece","bgValid","bgRefNo","bgAmount","bgFile","JitpaFormSchema","jpTbaPurchase","jpEndorsement","jitpaValid","jpAmount","jitpaFile","LabourDepFormSchema","labDepReceiptNo","labDepAmount","labEndrose","labDepFile","ImmigrationFormSchema","immbdNo","docSubmit","visaApproval","visaRefNo","visaFile","AirTktFormSchema","departure","arrival","cityName","airFare","airTktFile","NonLocalMOBFormSchema","mobSignDate","remarkNLMob","mobFile","createForgotPasswordClient","config","composeServiceApi","cognitoUserPoolTransferHandler","createUserPoolSerializer","createUserPoolDeserializer","DEFAULT_SERVICE_CLIENT_API_CONFIG","input","_Amplify$getConfig$Au","_input$options","assertValidationError","AuthValidationErrorCode","EmptyResetPasswordUsername","authConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","userPoolClientId","userPoolId","userPoolEndpoint","clientMetadata","options","UserContextData","getUserContextData","forgotPassword","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","codeDeliveryDetails","region","getRegionFromUserPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","ResetPassword","Username","ClientMetadata","ClientId","CodeDeliveryDetails","isPasswordReset","nextStep","resetPasswordStep","deliveryMedium","DeliveryMedium","destination","Destination","attributeName","AttributeName"],"sourceRoot":""}