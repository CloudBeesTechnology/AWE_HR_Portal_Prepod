{"version":3,"file":"static/js/231.5585532b.chunk.js","mappings":"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","sources":["../node_modules/@aws-amplify/auth/src/client/flows/shared/handlePasswordSRP.ts","../node_modules/@aws-amplify/auth/src/client/utils/store/autoSignInStore.ts","../node_modules/@aws-amplify/auth/src/client/utils/store/signInStore.ts","../node_modules/@aws-amplify/auth/src/common/AuthErrorStrings.ts","../node_modules/@aws-amplify/auth/src/errors/types/validation.ts","../node_modules/@aws-amplify/auth/src/errors/utils/assertValidationError.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/apis/autoSignIn.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/apis/getCurrentUser.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/apis/internal/getCurrentUser.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/apis/signInWithSRP.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/apis/signIn.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/apis/signInWithUserPassword.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/apis/signInWithCustomAuth.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/apis/signInWithCustomSRPAuth.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/apis/signInWithUserAuth.ts","../node_modules/@aws-amplify/auth/src/client/flows/userAuth/handleUserAuthFlow.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/tokenProvider/cacheTokens.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/types/errors.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/utils/dispatchSignedInHubEvent.ts","../node_modules/@aws-amplify/core/src/utils/deviceName/getDeviceName.ts","../node_modules/@aws-amplify/auth/src/foundation/factories/serviceClients/cognitoIdentityProvider/createRespondToAuthChallengeClient.ts","../node_modules/@aws-amplify/auth/src/foundation/factories/serviceClients/cognitoIdentityProvider/createAssociateSoftwareTokenClient.ts","../node_modules/@aws-amplify/auth/src/foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmDeviceClient.ts","../node_modules/@aws-amplify/auth/src/client/utils/passkey/errors.ts","../node_modules/@aws-amplify/auth/src/client/utils/passkey/getIsPasskeySupported.ts","../node_modules/@aws-amplify/auth/src/foundation/convert/base64url/convertArrayBufferToBase64Url.ts","../node_modules/@aws-amplify/auth/src/foundation/convert/base64url/convertBase64UrlToArrayBuffer.ts","../node_modules/@aws-amplify/auth/src/client/utils/passkey/getPasskey.ts","../node_modules/@aws-amplify/auth/src/client/utils/passkey/serde.ts","../node_modules/@aws-amplify/auth/src/client/utils/passkey/types/index.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/utils/srp/getNowString.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/utils/srp/getSignatureString.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/utils/signInHelpers.ts","../node_modules/@aws-amplify/auth/src/client/flows/userAuth/handleWebAuthnSignInResult.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/utils/srp/BigInteger/BigInteger.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/utils/srp/constants.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/utils/srp/getHexFromBytes.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/utils/srp/getHashFromData.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/utils/srp/getHashFromHex.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/utils/srp/getPaddedHex.ts","../node_modules/@aws-amplify/core/src/utils/WordArray.ts","../node_modules/@aws-amplify/core/src/utils/cryptoSecureRandomInt.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/utils/srp/getRandomBytes.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/utils/srp/AuthenticationHelper/AuthenticationHelper.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/utils/srp/getRandomString.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/utils/srp/calculate/calculateU.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/utils/srp/calculate/calculateS.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/utils/srp/getHkdfKey.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/utils/srp/calculate/calculateA.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/utils/srp/getAuthenticationHelper.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/utils/srp/getBytesFromHex.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/utils/textEncoder/index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AuthAction } from '@aws-amplify/core/internals/utils';\nimport { getUserContextData } from '../../../providers/cognito/utils/userContextData';\nimport { getAuthenticationHelper } from '../../../providers/cognito/utils/srp';\nimport { handlePasswordVerifierChallenge, retryOnResourceNotFoundException, setActiveSignInUsername, } from '../../../providers/cognito/utils/signInHelpers';\nimport { createInitiateAuthClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../../../providers/cognito/factories';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { getAuthUserAgentValue } from '../../../utils';\n/**\n * Handles the Password SRP (Secure Remote Password) authentication flow.\n * This function can be used with both USER_SRP_AUTH and USER_AUTH flows.\n *\n * @param {Object} params - The parameters for the Password SRP authentication\n * @param {string} params.username - The username for authentication\n * @param {string} params.password - The user's password\n * @param {ClientMetadata} [params.clientMetadata] - Optional metadata to be sent with auth requests\n * @param {CognitoUserPoolConfig} params.config - Cognito User Pool configuration\n * @param {AuthTokenOrchestrator} params.tokenOrchestrator - Token orchestrator for managing auth tokens\n * @param {AuthFlowType} params.authFlow - The type of authentication flow ('USER_SRP_AUTH' or 'USER_AUTH')\n * @param {AuthFactorType} [params.preferredChallenge] - Optional preferred challenge type when using USER_AUTH flow\n *\n * @returns {Promise<RespondToAuthChallengeCommandOutput>} The authentication response\n */\nexport async function handlePasswordSRP({ username, password, clientMetadata, config, tokenOrchestrator, authFlow, preferredChallenge, }) {\n    const { userPoolId, userPoolClientId, userPoolEndpoint } = config;\n    const userPoolName = userPoolId?.split('_')[1] || '';\n    const authenticationHelper = await getAuthenticationHelper(userPoolName);\n    const authParameters = {\n        USERNAME: username,\n        SRP_A: authenticationHelper.A.toString(16),\n    };\n    if (authFlow === 'USER_AUTH' && preferredChallenge) {\n        authParameters.PREFERRED_CHALLENGE = preferredChallenge;\n    }\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const jsonReq = {\n        AuthFlow: authFlow,\n        AuthParameters: authParameters,\n        ClientMetadata: clientMetadata,\n        ClientId: userPoolClientId,\n        UserContextData,\n    };\n    const initiateAuth = createInitiateAuthClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const resp = await initiateAuth({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.SignIn),\n    }, jsonReq);\n    const { ChallengeParameters: challengeParameters, Session: session } = resp;\n    const activeUsername = challengeParameters?.USERNAME ?? username;\n    setActiveSignInUsername(activeUsername);\n    if (resp.ChallengeName === 'PASSWORD_VERIFIER') {\n        return retryOnResourceNotFoundException(handlePasswordVerifierChallenge, [\n            password,\n            challengeParameters,\n            clientMetadata,\n            session,\n            authenticationHelper,\n            config,\n            tokenOrchestrator,\n        ], activeUsername, tokenOrchestrator);\n    }\n    return resp;\n}\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nfunction defaultState() {\n    return {\n        active: false,\n    };\n}\nconst autoSignInReducer = (state, action) => {\n    switch (action.type) {\n        case 'SET_USERNAME':\n            return {\n                ...state,\n                username: action.value,\n            };\n        case 'SET_SESSION':\n            return {\n                ...state,\n                session: action.value,\n            };\n        case 'START':\n            return {\n                ...state,\n                active: true,\n            };\n        case 'RESET':\n            return defaultState();\n        default:\n            return state;\n    }\n};\nconst createAutoSignInStore = (reducer) => {\n    let currentState = reducer(defaultState(), { type: 'RESET' });\n    return {\n        getState: () => currentState,\n        dispatch: action => {\n            currentState = reducer(currentState, action);\n        },\n    };\n};\nexport const autoSignInStore = createAutoSignInStore(autoSignInReducer);\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { syncSessionStorage } from '@aws-amplify/core';\n// Minutes until stored session invalidates is defaulted to 3 minutes\n// to maintain parity with Amazon Cognito user pools API behavior\nconst MS_TO_EXPIRY = 3 * 60 * 1000;\nconst TGT_STATE = 'CognitoSignInState';\nconst SIGN_IN_STATE_KEYS = {\n    username: `${TGT_STATE}.username`,\n    challengeName: `${TGT_STATE}.challengeName`,\n    signInSession: `${TGT_STATE}.signInSession`,\n    expiry: `${TGT_STATE}.expiry`,\n};\nconst signInReducer = (state, action) => {\n    switch (action.type) {\n        case 'SET_SIGN_IN_SESSION':\n            persistSignInState({ signInSession: action.value });\n            return {\n                ...state,\n                signInSession: action.value,\n            };\n        case 'SET_SIGN_IN_STATE':\n            persistSignInState(action.value);\n            return {\n                ...action.value,\n            };\n        case 'SET_CHALLENGE_NAME':\n            persistSignInState({ challengeName: action.value });\n            return {\n                ...state,\n                challengeName: action.value,\n            };\n        case 'SET_USERNAME':\n            persistSignInState({ username: action.value });\n            return {\n                ...state,\n                username: action.value,\n            };\n        case 'SET_INITIAL_STATE':\n            return getInitialState();\n        case 'RESET_STATE':\n            clearPersistedSignInState();\n            return getDefaultState();\n        // this state is never reachable\n        default:\n            return state;\n    }\n};\nconst isExpired = (expiryDate) => {\n    const expiryTimestamp = Number(expiryDate);\n    const currentTimestamp = Date.now();\n    return expiryTimestamp <= currentTimestamp;\n};\nexport const resetActiveSignInState = () => {\n    signInStore.dispatch({ type: 'RESET_STATE' });\n};\nconst clearPersistedSignInState = () => {\n    for (const stateKey of Object.values(SIGN_IN_STATE_KEYS)) {\n        syncSessionStorage.removeItem(stateKey);\n    }\n};\nconst getDefaultState = () => ({\n    username: undefined,\n    challengeName: undefined,\n    signInSession: undefined,\n});\n// Hydrate signInStore from syncSessionStorage if the session has not expired\nconst getInitialState = () => {\n    const expiry = syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.expiry);\n    if (!expiry || isExpired(expiry)) {\n        clearPersistedSignInState();\n        return getDefaultState();\n    }\n    const username = syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.username) ?? undefined;\n    const challengeName = (syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.challengeName) ?? undefined);\n    const signInSession = syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.signInSession) ?? undefined;\n    return {\n        username,\n        challengeName,\n        signInSession,\n    };\n};\nconst createStore = reducer => {\n    let currentState = reducer(getDefaultState(), { type: 'SET_INITIAL_STATE' });\n    return {\n        getState: () => currentState,\n        dispatch: action => {\n            currentState = reducer(currentState, action);\n        },\n    };\n};\nexport const signInStore = createStore(signInReducer);\nexport function setActiveSignInState(state) {\n    signInStore.dispatch({\n        type: 'SET_SIGN_IN_STATE',\n        value: state,\n    });\n}\n// Save local state into Session Storage\nexport const persistSignInState = ({ challengeName, signInSession, username, }) => {\n    username && syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.username, username);\n    challengeName &&\n        syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.challengeName, challengeName);\n    if (signInSession) {\n        syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.signInSession, signInSession);\n        // Updates expiry when session is passed\n        syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.expiry, String(Date.now() + MS_TO_EXPIRY));\n    }\n};\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AuthValidationErrorCode } from '../errors/types/validation';\nexport const validationErrorMap = {\n    [AuthValidationErrorCode.EmptyChallengeResponse]: {\n        message: 'challengeResponse is required to confirmSignIn',\n    },\n    [AuthValidationErrorCode.EmptyConfirmResetPasswordUsername]: {\n        message: 'username is required to confirmResetPassword',\n    },\n    [AuthValidationErrorCode.EmptyConfirmSignUpCode]: {\n        message: 'code is required to confirmSignUp',\n    },\n    [AuthValidationErrorCode.EmptyConfirmSignUpUsername]: {\n        message: 'username is required to confirmSignUp',\n    },\n    [AuthValidationErrorCode.EmptyConfirmResetPasswordConfirmationCode]: {\n        message: 'confirmationCode is required to confirmResetPassword',\n    },\n    [AuthValidationErrorCode.EmptyConfirmResetPasswordNewPassword]: {\n        message: 'newPassword is required to confirmResetPassword',\n    },\n    [AuthValidationErrorCode.EmptyResendSignUpCodeUsername]: {\n        message: 'username is required to confirmSignUp',\n    },\n    [AuthValidationErrorCode.EmptyResetPasswordUsername]: {\n        message: 'username is required to resetPassword',\n    },\n    [AuthValidationErrorCode.EmptySignInPassword]: {\n        message: 'password is required to signIn',\n    },\n    [AuthValidationErrorCode.EmptySignInUsername]: {\n        message: 'username is required to signIn',\n    },\n    [AuthValidationErrorCode.EmptySignUpPassword]: {\n        message: 'password is required to signUp',\n    },\n    [AuthValidationErrorCode.EmptySignUpUsername]: {\n        message: 'username is required to signUp',\n    },\n    [AuthValidationErrorCode.CustomAuthSignInPassword]: {\n        message: 'A password is not needed when signing in with CUSTOM_WITHOUT_SRP',\n        recoverySuggestion: 'Do not include a password in your signIn call.',\n    },\n    [AuthValidationErrorCode.IncorrectMFAMethod]: {\n        message: 'Incorrect MFA method was chosen. It should be either SMS, TOTP, or EMAIL',\n        recoverySuggestion: 'Try to pass SMS, TOTP, or EMAIL as the challengeResponse',\n    },\n    [AuthValidationErrorCode.EmptyVerifyTOTPSetupCode]: {\n        message: 'code is required to verifyTotpSetup',\n    },\n    [AuthValidationErrorCode.EmptyUpdatePassword]: {\n        message: 'oldPassword and newPassword are required to changePassword',\n    },\n    [AuthValidationErrorCode.EmptyConfirmUserAttributeCode]: {\n        message: 'confirmation code is required to confirmUserAttribute',\n    },\n};\n// TODO: delete this code when the Auth class is removed.\nexport var AuthErrorStrings;\n(function (AuthErrorStrings) {\n    AuthErrorStrings[\"DEFAULT_MSG\"] = \"Authentication Error\";\n    AuthErrorStrings[\"EMPTY_EMAIL\"] = \"Email cannot be empty\";\n    AuthErrorStrings[\"EMPTY_PHONE\"] = \"Phone number cannot be empty\";\n    AuthErrorStrings[\"EMPTY_USERNAME\"] = \"Username cannot be empty\";\n    AuthErrorStrings[\"INVALID_USERNAME\"] = \"The username should either be a string or one of the sign in types\";\n    AuthErrorStrings[\"EMPTY_PASSWORD\"] = \"Password cannot be empty\";\n    AuthErrorStrings[\"EMPTY_CODE\"] = \"Confirmation code cannot be empty\";\n    AuthErrorStrings[\"SIGN_UP_ERROR\"] = \"Error creating account\";\n    AuthErrorStrings[\"NO_MFA\"] = \"No valid MFA method provided\";\n    AuthErrorStrings[\"INVALID_MFA\"] = \"Invalid MFA type\";\n    AuthErrorStrings[\"EMPTY_CHALLENGE\"] = \"Challenge response cannot be empty\";\n    AuthErrorStrings[\"NO_USER_SESSION\"] = \"Failed to get the session because the user is empty\";\n    AuthErrorStrings[\"NETWORK_ERROR\"] = \"Network Error\";\n    AuthErrorStrings[\"DEVICE_CONFIG\"] = \"Device tracking has not been configured in this User Pool\";\n    AuthErrorStrings[\"AUTOSIGNIN_ERROR\"] = \"Please use your credentials to sign in\";\n    AuthErrorStrings[\"OAUTH_ERROR\"] = \"Couldn't finish OAuth flow, check your User Pool HostedUI settings\";\n})(AuthErrorStrings || (AuthErrorStrings = {}));\nexport var AuthErrorCodes;\n(function (AuthErrorCodes) {\n    AuthErrorCodes[\"SignInException\"] = \"SignInException\";\n    AuthErrorCodes[\"OAuthSignInError\"] = \"OAuthSignInException\";\n})(AuthErrorCodes || (AuthErrorCodes = {}));\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport var AuthValidationErrorCode;\n(function (AuthValidationErrorCode) {\n    AuthValidationErrorCode[\"EmptySignInUsername\"] = \"EmptySignInUsername\";\n    AuthValidationErrorCode[\"EmptySignInPassword\"] = \"EmptySignInPassword\";\n    AuthValidationErrorCode[\"CustomAuthSignInPassword\"] = \"CustomAuthSignInPassword\";\n    AuthValidationErrorCode[\"EmptySignUpUsername\"] = \"EmptySignUpUsername\";\n    AuthValidationErrorCode[\"EmptySignUpPassword\"] = \"EmptySignUpPassword\";\n    AuthValidationErrorCode[\"EmptyConfirmSignUpUsername\"] = \"EmptyConfirmSignUpUsername\";\n    AuthValidationErrorCode[\"EmptyConfirmSignUpCode\"] = \"EmptyConfirmSignUpCode\";\n    AuthValidationErrorCode[\"EmptyResendSignUpCodeUsername\"] = \"EmptyresendSignUpCodeUsername\";\n    AuthValidationErrorCode[\"EmptyChallengeResponse\"] = \"EmptyChallengeResponse\";\n    AuthValidationErrorCode[\"EmptyConfirmResetPasswordUsername\"] = \"EmptyConfirmResetPasswordUsername\";\n    AuthValidationErrorCode[\"EmptyConfirmResetPasswordNewPassword\"] = \"EmptyConfirmResetPasswordNewPassword\";\n    AuthValidationErrorCode[\"EmptyConfirmResetPasswordConfirmationCode\"] = \"EmptyConfirmResetPasswordConfirmationCode\";\n    AuthValidationErrorCode[\"EmptyResetPasswordUsername\"] = \"EmptyResetPasswordUsername\";\n    AuthValidationErrorCode[\"EmptyVerifyTOTPSetupCode\"] = \"EmptyVerifyTOTPSetupCode\";\n    AuthValidationErrorCode[\"EmptyConfirmUserAttributeCode\"] = \"EmptyConfirmUserAttributeCode\";\n    AuthValidationErrorCode[\"IncorrectMFAMethod\"] = \"IncorrectMFAMethod\";\n    AuthValidationErrorCode[\"EmptyUpdatePassword\"] = \"EmptyUpdatePassword\";\n})(AuthValidationErrorCode || (AuthValidationErrorCode = {}));\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { validationErrorMap } from '../../common/AuthErrorStrings';\nimport { AuthError } from '../AuthError';\nexport function assertValidationError(assertion, name) {\n    const { message, recoverySuggestion } = validationErrorMap[name];\n    if (!assertion) {\n        throw new AuthError({ name, message, recoverySuggestion });\n    }\n}\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { autoSignInStore } from '../../../client/utils/store';\nimport { AuthError } from '../../../errors/AuthError';\nimport { AUTO_SIGN_IN_EXCEPTION } from '../../../errors/constants';\nconst initialAutoSignIn = async () => {\n    throw new AuthError({\n        name: AUTO_SIGN_IN_EXCEPTION,\n        message: 'The autoSignIn flow has not started, or has been cancelled/completed.',\n        recoverySuggestion: 'Please try to use the signIn API or log out before starting a new autoSignIn flow.',\n    });\n};\n/**\n * Signs a user in automatically after finishing the sign-up process.\n *\n * This API will automatically sign a user in if the autoSignIn flow has been completed in the following cases:\n * - User confirmed their account with a verification code sent to their phone or email (default option).\n * - User confirmed their account with a verification link sent to their phone or email. In order to\n * enable this option you need to go to the Amazon Cognito [console](https://aws.amazon.com/pm/cognito),\n * look for your userpool, then go to the `Messaging` tab and enable `link` mode inside the `Verification message` option.\n * Finally you need to define the `signUpVerificationMethod` in your `Auth` config.\n *\n * @example\n * ```typescript\n *  Amplify.configure({\n *    Auth: {\n *     Cognito: {\n *    ...cognitoConfig,\n *    signUpVerificationMethod: \"link\" // the default value is \"code\"\n *   }\n *\t}});\n * ```\n *\n * @throws AutoSignInException - Thrown when the autoSignIn flow has not started, or has been cancelled/completed.\n * @returns The signInOutput.\n *\n * @example\n * ```typescript\n *  // handleSignUp.ts\n * async function handleSignUp(\n *   username:string,\n *   password:string\n * ){\n *   try {\n *     const { nextStep } = await signUp({\n *       username,\n *       password,\n *       options: {\n *         userAttributes:{ email:'email@email.com'},\n *         autoSignIn: true // This enables the auto sign-in flow.\n *       },\n *     });\n *\n *     handleSignUpStep(nextStep);\n *\n *   } catch (error) {\n *     console.log(error);\n *   }\n * }\n *\n * // handleConfirmSignUp.ts\n * async function handleConfirmSignUp(username:string, confirmationCode:string) {\n *   try {\n *     const { nextStep } = await confirmSignUp({\n *       username,\n *       confirmationCode,\n *     });\n *\n *     handleSignUpStep(nextStep);\n *   } catch (error) {\n *     console.log(error);\n *   }\n * }\n *\n * // signUpUtils.ts\n * async function handleSignUpStep( step: SignUpOutput[\"nextStep\"]) {\n * switch (step.signUpStep) {\n *   case \"CONFIRM_SIGN_UP\":\n *\n *    // Redirect end-user to confirm-sign up screen.\n *\n *   case \"COMPLETE_AUTO_SIGN_IN\":\n *\t   const codeDeliveryDetails = step.codeDeliveryDetails;\n *     if (codeDeliveryDetails) {\n *      // Redirect user to confirm-sign-up with link screen.\n *     }\n *     const signInOutput = await autoSignIn();\n *   // handle sign-in steps\n * }\n *\n * ```\n */\n// TODO(Eslint): can this be refactored not using `let` on exported member?\n// eslint-disable-next-line import/no-mutable-exports\nexport let autoSignIn = initialAutoSignIn;\n/**\n * Sets the context of autoSignIn at run time.\n * @internal\n */\nexport function setAutoSignIn(callback) {\n    autoSignIn = callback;\n}\n/**\n * Resets the context\n *\n * @internal\n */\nexport function resetAutoSignIn(resetCallback = true) {\n    if (resetCallback) {\n        autoSignIn = initialAutoSignIn;\n    }\n    autoSignInStore.dispatch({ type: 'RESET' });\n}\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { getCurrentUser as getCurrentUserInternal } from './internal/getCurrentUser';\n/**\n * Gets the current user from the idToken.\n *\n * @param input -  The GetCurrentUserInput object.\n * @returns GetCurrentUserOutput\n * @throws - {@link InitiateAuthException} - Thrown when the service fails to refresh the tokens.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport const getCurrentUser = async () => {\n    return getCurrentUserInternal(Amplify);\n};\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { assertTokenProviderConfig } from '@aws-amplify/core/internals/utils';\nimport { assertAuthTokens } from '../../utils/types';\nexport const getCurrentUser = async (amplify) => {\n    const authConfig = amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const tokens = await amplify.Auth.getTokens({ forceRefresh: false });\n    assertAuthTokens(tokens);\n    const { 'cognito:username': username, sub } = tokens.idToken?.payload ?? {};\n    const authUser = {\n        username: username,\n        userId: sub,\n    };\n    const signInDetails = getSignInDetailsFromTokens(tokens);\n    if (signInDetails) {\n        authUser.signInDetails = signInDetails;\n    }\n    return authUser;\n};\nfunction getSignInDetailsFromTokens(tokens) {\n    return tokens?.signInDetails;\n}\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError';\nimport { getActiveSignInUsername, getNewDeviceMetadata, getSignInResult, getSignInResultFromError, handleUserSRPAuthFlow, } from '../utils/signInHelpers';\nimport { resetActiveSignInState, setActiveSignInState, } from '../../../client/utils/store/signInStore';\nimport { cacheCognitoTokens } from '../tokenProvider/cacheTokens';\nimport { tokenOrchestrator } from '../tokenProvider';\nimport { dispatchSignedInHubEvent } from '../utils/dispatchSignedInHubEvent';\nimport { resetAutoSignIn } from './autoSignIn';\n/**\n * Signs a user in\n *\n * @param input - The SignInWithSRPInput object\n * @returns SignInWithSRPOutput\n * @throws service: {@link InitiateAuthException }, {@link RespondToAuthChallengeException } - Cognito service errors\n * thrown during the sign-in process.\n * @throws validation: {@link AuthValidationErrorCode  } - Validation errors thrown when either username or password\n *  are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function signInWithSRP(input) {\n    const { username, password } = input;\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    const signInDetails = {\n        loginId: username,\n        authFlowType: 'USER_SRP_AUTH',\n    };\n    assertTokenProviderConfig(authConfig);\n    const clientMetaData = input.options?.clientMetadata;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptySignInUsername);\n    assertValidationError(!!password, AuthValidationErrorCode.EmptySignInPassword);\n    try {\n        const { ChallengeName: handledChallengeName, ChallengeParameters: handledChallengeParameters, AuthenticationResult, Session, } = await handleUserSRPAuthFlow(username, password, clientMetaData, authConfig, tokenOrchestrator);\n        const activeUsername = getActiveSignInUsername(username);\n        // sets up local state used during the sign-in process\n        setActiveSignInState({\n            signInSession: Session,\n            username: activeUsername,\n            challengeName: handledChallengeName,\n            signInDetails,\n        });\n        if (AuthenticationResult) {\n            await cacheCognitoTokens({\n                username: activeUsername,\n                ...AuthenticationResult,\n                NewDeviceMetadata: await getNewDeviceMetadata({\n                    userPoolId: authConfig.userPoolId,\n                    userPoolEndpoint: authConfig.userPoolEndpoint,\n                    newDeviceMetadata: AuthenticationResult.NewDeviceMetadata,\n                    accessToken: AuthenticationResult.AccessToken,\n                }),\n                signInDetails,\n            });\n            resetActiveSignInState();\n            await dispatchSignedInHubEvent();\n            resetAutoSignIn();\n            return {\n                isSignedIn: true,\n                nextStep: { signInStep: 'DONE' },\n            };\n        }\n        return getSignInResult({\n            challengeName: handledChallengeName,\n            challengeParameters: handledChallengeParameters,\n        });\n    }\n    catch (error) {\n        resetActiveSignInState();\n        resetAutoSignIn();\n        assertServiceError(error);\n        const result = getSignInResultFromError(error.name);\n        if (result)\n            return result;\n        throw error;\n    }\n}\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { assertUserNotAuthenticated } from '../utils/signInHelpers';\nimport { signInWithCustomAuth } from './signInWithCustomAuth';\nimport { signInWithCustomSRPAuth } from './signInWithCustomSRPAuth';\nimport { signInWithSRP } from './signInWithSRP';\nimport { signInWithUserPassword } from './signInWithUserPassword';\nimport { signInWithUserAuth } from './signInWithUserAuth';\nimport { resetAutoSignIn } from './autoSignIn';\n/**\n * Signs a user in\n *\n * @param input -  The SignInInput object\n * @returns SignInOutput\n * @throws service: {@link InitiateAuthException }, {@link RespondToAuthChallengeException }\n *  - Cognito service errors thrown during the sign-in process.\n * @throws validation: {@link AuthValidationErrorCode  } - Validation errors thrown when either username or password\n *  are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function signIn(input) {\n    // Here we want to reset the store but not reassign the callback.\n    // The callback is reset when the underlying promise resolves or rejects.\n    // With the advent of session based sign in, this guarantees that the signIn API initiates a new auth flow,\n    // regardless of whether it is called for a user currently engaged in an active auto sign in session.\n    resetAutoSignIn(false);\n    const authFlowType = input.options?.authFlowType;\n    await assertUserNotAuthenticated();\n    switch (authFlowType) {\n        case 'USER_SRP_AUTH':\n            return signInWithSRP(input);\n        case 'USER_PASSWORD_AUTH':\n            return signInWithUserPassword(input);\n        case 'CUSTOM_WITHOUT_SRP':\n            return signInWithCustomAuth(input);\n        case 'CUSTOM_WITH_SRP':\n            return signInWithCustomSRPAuth(input);\n        case 'USER_AUTH':\n            return signInWithUserAuth(input);\n        default:\n            return signInWithSRP(input);\n    }\n}\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { getActiveSignInUsername, getNewDeviceMetadata, getSignInResult, getSignInResultFromError, handleUserPasswordAuthFlow, retryOnResourceNotFoundException, } from '../utils/signInHelpers';\nimport { resetActiveSignInState, setActiveSignInState, } from '../../../client/utils/store/signInStore';\nimport { cacheCognitoTokens } from '../tokenProvider/cacheTokens';\nimport { tokenOrchestrator } from '../tokenProvider';\nimport { dispatchSignedInHubEvent } from '../utils/dispatchSignedInHubEvent';\nimport { resetAutoSignIn } from './autoSignIn';\n/**\n * Signs a user in using USER_PASSWORD_AUTH AuthFlowType\n *\n * @param input - The SignInWithUserPasswordInput object\n * @returns SignInWithUserPasswordOutput\n * @throws service: {@link InitiateAuthException } - Cognito service error thrown during the sign-in process.\n * @throws validation: {@link AuthValidationErrorCode  } - Validation errors thrown when either username or password\n *  are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function signInWithUserPassword(input) {\n    const { username, password, options } = input;\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    const signInDetails = {\n        loginId: username,\n        authFlowType: 'USER_PASSWORD_AUTH',\n    };\n    assertTokenProviderConfig(authConfig);\n    const metadata = options?.clientMetadata;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptySignInUsername);\n    assertValidationError(!!password, AuthValidationErrorCode.EmptySignInPassword);\n    try {\n        const { ChallengeName: retiredChallengeName, ChallengeParameters: retriedChallengeParameters, AuthenticationResult, Session, } = await retryOnResourceNotFoundException(handleUserPasswordAuthFlow, [username, password, metadata, authConfig, tokenOrchestrator], username, tokenOrchestrator);\n        const activeUsername = getActiveSignInUsername(username);\n        // sets up local state used during the sign-in process\n        setActiveSignInState({\n            signInSession: Session,\n            username: activeUsername,\n            challengeName: retiredChallengeName,\n            signInDetails,\n        });\n        if (AuthenticationResult) {\n            await cacheCognitoTokens({\n                ...AuthenticationResult,\n                username: activeUsername,\n                NewDeviceMetadata: await getNewDeviceMetadata({\n                    userPoolId: authConfig.userPoolId,\n                    userPoolEndpoint: authConfig.userPoolEndpoint,\n                    newDeviceMetadata: AuthenticationResult.NewDeviceMetadata,\n                    accessToken: AuthenticationResult.AccessToken,\n                }),\n                signInDetails,\n            });\n            resetActiveSignInState();\n            await dispatchSignedInHubEvent();\n            resetAutoSignIn();\n            return {\n                isSignedIn: true,\n                nextStep: { signInStep: 'DONE' },\n            };\n        }\n        return getSignInResult({\n            challengeName: retiredChallengeName,\n            challengeParameters: retriedChallengeParameters,\n        });\n    }\n    catch (error) {\n        resetActiveSignInState();\n        resetAutoSignIn();\n        assertServiceError(error);\n        const result = getSignInResultFromError(error.name);\n        if (result)\n            return result;\n        throw error;\n    }\n}\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError';\nimport { getActiveSignInUsername, getNewDeviceMetadata, getSignInResult, getSignInResultFromError, handleCustomAuthFlowWithoutSRP, retryOnResourceNotFoundException, } from '../utils/signInHelpers';\nimport { resetActiveSignInState, setActiveSignInState, } from '../../../client/utils/store/signInStore';\nimport { cacheCognitoTokens } from '../tokenProvider/cacheTokens';\nimport { tokenOrchestrator } from '../tokenProvider';\nimport { dispatchSignedInHubEvent } from '../utils/dispatchSignedInHubEvent';\n/**\n * Signs a user in using a custom authentication flow without password\n *\n * @param input -  The SignInWithCustomAuthInput object\n * @returns AuthSignInResult\n * @throws service: {@link InitiateAuthException } - Cognito service errors thrown during the sign-in process.\n * @throws validation: {@link AuthValidationErrorCode  } - Validation errors thrown when either username or password\n *  are not defined.\n * @throws SignInWithCustomAuthOutput - Thrown when the token provider config is invalid.\n */\nexport async function signInWithCustomAuth(input) {\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { username, password, options } = input;\n    const signInDetails = {\n        loginId: username,\n        authFlowType: 'CUSTOM_WITHOUT_SRP',\n    };\n    const metadata = options?.clientMetadata;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptySignInUsername);\n    assertValidationError(!password, AuthValidationErrorCode.CustomAuthSignInPassword);\n    try {\n        const { ChallengeName: retriedChallengeName, ChallengeParameters: retiredChallengeParameters, AuthenticationResult, Session, } = await retryOnResourceNotFoundException(handleCustomAuthFlowWithoutSRP, [username, metadata, authConfig, tokenOrchestrator], username, tokenOrchestrator);\n        const activeUsername = getActiveSignInUsername(username);\n        // sets up local state used during the sign-in process\n        setActiveSignInState({\n            signInSession: Session,\n            username: activeUsername,\n            challengeName: retriedChallengeName,\n            signInDetails,\n        });\n        if (AuthenticationResult) {\n            await cacheCognitoTokens({\n                username: activeUsername,\n                ...AuthenticationResult,\n                NewDeviceMetadata: await getNewDeviceMetadata({\n                    userPoolId: authConfig.userPoolId,\n                    userPoolEndpoint: authConfig.userPoolEndpoint,\n                    newDeviceMetadata: AuthenticationResult.NewDeviceMetadata,\n                    accessToken: AuthenticationResult.AccessToken,\n                }),\n                signInDetails,\n            });\n            resetActiveSignInState();\n            await dispatchSignedInHubEvent();\n            return {\n                isSignedIn: true,\n                nextStep: { signInStep: 'DONE' },\n            };\n        }\n        return getSignInResult({\n            challengeName: retriedChallengeName,\n            challengeParameters: retiredChallengeParameters,\n        });\n    }\n    catch (error) {\n        resetActiveSignInState();\n        assertServiceError(error);\n        const result = getSignInResultFromError(error.name);\n        if (result)\n            return result;\n        throw error;\n    }\n}\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError';\nimport { getActiveSignInUsername, getNewDeviceMetadata, getSignInResult, getSignInResultFromError, handleCustomSRPAuthFlow, } from '../utils/signInHelpers';\nimport { resetActiveSignInState, setActiveSignInState, } from '../../../client/utils/store/signInStore';\nimport { cacheCognitoTokens } from '../tokenProvider/cacheTokens';\nimport { tokenOrchestrator } from '../tokenProvider';\nimport { dispatchSignedInHubEvent } from '../utils/dispatchSignedInHubEvent';\n/**\n * Signs a user in using a custom authentication flow with SRP\n *\n * @param input -  The SignInWithCustomSRPAuthInput object\n * @returns SignInWithCustomSRPAuthOutput\n * @throws service: {@link InitiateAuthException }, {@link RespondToAuthChallengeException } - Cognito\n * service errors thrown during the sign-in process.\n * @throws validation: {@link AuthValidationErrorCode  } - Validation errors thrown when either username or password\n *  are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function signInWithCustomSRPAuth(input) {\n    const { username, password, options } = input;\n    const signInDetails = {\n        loginId: username,\n        authFlowType: 'CUSTOM_WITH_SRP',\n    };\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const metadata = options?.clientMetadata;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptySignInUsername);\n    assertValidationError(!!password, AuthValidationErrorCode.EmptySignInPassword);\n    try {\n        const { ChallengeName: handledChallengeName, ChallengeParameters: handledChallengeParameters, AuthenticationResult, Session, } = await handleCustomSRPAuthFlow(username, password, metadata, authConfig, tokenOrchestrator);\n        const activeUsername = getActiveSignInUsername(username);\n        // sets up local state used during the sign-in process\n        setActiveSignInState({\n            signInSession: Session,\n            username: activeUsername,\n            challengeName: handledChallengeName,\n            signInDetails,\n        });\n        if (AuthenticationResult) {\n            await cacheCognitoTokens({\n                username: activeUsername,\n                ...AuthenticationResult,\n                NewDeviceMetadata: await getNewDeviceMetadata({\n                    userPoolId: authConfig.userPoolId,\n                    userPoolEndpoint: authConfig.userPoolEndpoint,\n                    newDeviceMetadata: AuthenticationResult.NewDeviceMetadata,\n                    accessToken: AuthenticationResult.AccessToken,\n                }),\n                signInDetails,\n            });\n            resetActiveSignInState();\n            await dispatchSignedInHubEvent();\n            return {\n                isSignedIn: true,\n                nextStep: { signInStep: 'DONE' },\n            };\n        }\n        return getSignInResult({\n            challengeName: handledChallengeName,\n            challengeParameters: handledChallengeParameters,\n        });\n    }\n    catch (error) {\n        resetActiveSignInState();\n        assertServiceError(error);\n        const result = getSignInResultFromError(error.name);\n        if (result)\n            return result;\n        throw error;\n    }\n}\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError';\nimport { getActiveSignInUsername, getNewDeviceMetadata, getSignInResult, getSignInResultFromError, } from '../utils/signInHelpers';\nimport { autoSignInStore } from '../../../client/utils/store';\nimport { resetActiveSignInState, setActiveSignInState, } from '../../../client/utils/store/signInStore';\nimport { cacheCognitoTokens } from '../tokenProvider/cacheTokens';\nimport { dispatchSignedInHubEvent } from '../utils/dispatchSignedInHubEvent';\nimport { tokenOrchestrator } from '../tokenProvider';\nimport { handleUserAuthFlow, } from '../../../client/flows/userAuth/handleUserAuthFlow';\nimport { resetAutoSignIn } from './autoSignIn';\n/**\n * Signs a user in through a registered email or phone number without a password by by receiving and entering an OTP.\n *\n * @param input - The SignInWithUserAuthInput object\n * @returns SignInWithUserAuthOutput\n * @throws service: {@link InitiateAuthException }, {@link RespondToAuthChallengeException } - Cognito service errors\n * thrown during the sign-in process.\n * @throws validation: {@link AuthValidationErrorCode  } - Validation errors thrown when either username or password -- needs to change\n *  are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function signInWithUserAuth(input) {\n    const { username, password, options } = input;\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    const signInDetails = {\n        loginId: username,\n        authFlowType: 'USER_AUTH',\n    };\n    assertTokenProviderConfig(authConfig);\n    const clientMetaData = options?.clientMetadata;\n    const preferredChallenge = options?.preferredChallenge;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptySignInUsername);\n    try {\n        const handleUserAuthFlowInput = {\n            username,\n            config: authConfig,\n            tokenOrchestrator,\n            clientMetadata: clientMetaData,\n            preferredChallenge,\n            password,\n        };\n        const autoSignInStoreState = autoSignInStore.getState();\n        if (autoSignInStoreState.active &&\n            autoSignInStoreState.username === username) {\n            handleUserAuthFlowInput.session = autoSignInStoreState.session;\n        }\n        const response = await handleUserAuthFlow(handleUserAuthFlowInput);\n        const activeUsername = getActiveSignInUsername(username);\n        setActiveSignInState({\n            signInSession: response.Session,\n            username: activeUsername,\n            challengeName: response.ChallengeName,\n            signInDetails,\n        });\n        if (response.AuthenticationResult) {\n            await cacheCognitoTokens({\n                username: activeUsername,\n                ...response.AuthenticationResult,\n                NewDeviceMetadata: await getNewDeviceMetadata({\n                    userPoolId: authConfig.userPoolId,\n                    userPoolEndpoint: authConfig.userPoolEndpoint,\n                    newDeviceMetadata: response.AuthenticationResult.NewDeviceMetadata,\n                    accessToken: response.AuthenticationResult.AccessToken,\n                }),\n                signInDetails,\n            });\n            resetActiveSignInState();\n            await dispatchSignedInHubEvent();\n            resetAutoSignIn();\n            return {\n                isSignedIn: true,\n                nextStep: { signInStep: 'DONE' },\n            };\n        }\n        return getSignInResult({\n            challengeName: response.ChallengeName,\n            challengeParameters: response.ChallengeParameters,\n            availableChallenges: 'AvailableChallenges' in response\n                ? response.AvailableChallenges\n                : undefined,\n        });\n    }\n    catch (error) {\n        resetActiveSignInState();\n        resetAutoSignIn();\n        assertServiceError(error);\n        const result = getSignInResultFromError(error.name);\n        if (result)\n            return result;\n        throw error;\n    }\n}\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AuthAction } from '@aws-amplify/core/internals/utils';\nimport { getUserContextData } from '../../../providers/cognito/utils/userContextData';\nimport { createInitiateAuthClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../../../providers/cognito/factories';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { handlePasswordSRP } from '../shared/handlePasswordSRP';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { setActiveSignInUsername } from '../../../providers/cognito/utils/signInHelpers';\n/**\n * Handles user authentication flow with configurable challenge preferences.\n * Supports AuthFactorType challenges through the USER_AUTH flow.\n *\n * @param {HandleUserAuthFlowInput} params - Authentication flow parameters\n * @param {string} params.username - The username for authentication\n * @param {Record<string, string>} [params.clientMetadata] - Optional metadata to pass to authentication service\n * @param {CognitoUserPoolConfig} params.config - Cognito User Pool configuration\n * @param {AuthTokenOrchestrator} params.tokenOrchestrator - Manages authentication tokens and device tracking\n * @param {AuthFactorType} [params.preferredChallenge] - Optional preferred authentication method\n * @param {string} [params.password] - Required when preferredChallenge is 'PASSWORD' or 'PASSWORD_SRP'\n *\n * @returns {Promise<InitiateAuthCommandOutput>} The authentication response from Cognito\n */\nexport async function handleUserAuthFlow({ username, clientMetadata, config, tokenOrchestrator, preferredChallenge, password, session, }) {\n    const { userPoolId, userPoolClientId, userPoolEndpoint } = config;\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const authParameters = { USERNAME: username };\n    if (preferredChallenge) {\n        if (preferredChallenge === 'PASSWORD_SRP') {\n            assertValidationError(!!password, AuthValidationErrorCode.EmptySignInPassword);\n            return handlePasswordSRP({\n                username,\n                password,\n                clientMetadata,\n                config,\n                tokenOrchestrator,\n                authFlow: 'USER_AUTH',\n                preferredChallenge,\n            });\n        }\n        if (preferredChallenge === 'PASSWORD') {\n            assertValidationError(!!password, AuthValidationErrorCode.EmptySignInPassword);\n            authParameters.PASSWORD = password;\n        }\n        authParameters.PREFERRED_CHALLENGE = preferredChallenge;\n    }\n    const jsonReq = {\n        AuthFlow: 'USER_AUTH',\n        AuthParameters: authParameters,\n        ClientMetadata: clientMetadata,\n        ClientId: userPoolClientId,\n        UserContextData,\n    };\n    if (session) {\n        jsonReq.Session = session;\n    }\n    const initiateAuth = createInitiateAuthClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const response = await initiateAuth({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.SignIn),\n    }, jsonReq);\n    // Set the active username immediately after successful authentication attempt\n    // If a user starts a new sign-in while another sign-in is incomplete,\n    // this ensures we're tracking the correct user for subsequent auth challenges.\n    setActiveSignInUsername(username);\n    return response;\n}\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AmplifyError, decodeJWT } from '@aws-amplify/core/internals/utils';\nimport { tokenOrchestrator } from './tokenProvider';\nexport async function cacheCognitoTokens(AuthenticationResult) {\n    if (AuthenticationResult.AccessToken) {\n        const accessToken = decodeJWT(AuthenticationResult.AccessToken);\n        const accessTokenIssuedAtInMillis = (accessToken.payload.iat || 0) * 1000;\n        const currentTime = new Date().getTime();\n        const clockDrift = accessTokenIssuedAtInMillis > 0\n            ? accessTokenIssuedAtInMillis - currentTime\n            : 0;\n        let idToken;\n        let refreshToken;\n        let deviceMetadata;\n        if (AuthenticationResult.RefreshToken) {\n            refreshToken = AuthenticationResult.RefreshToken;\n        }\n        if (AuthenticationResult.IdToken) {\n            idToken = decodeJWT(AuthenticationResult.IdToken);\n        }\n        if (AuthenticationResult?.NewDeviceMetadata) {\n            deviceMetadata = AuthenticationResult.NewDeviceMetadata;\n        }\n        const tokens = {\n            accessToken,\n            idToken,\n            refreshToken,\n            clockDrift,\n            deviceMetadata,\n            username: AuthenticationResult.username,\n        };\n        if (AuthenticationResult?.signInDetails) {\n            tokens.signInDetails = AuthenticationResult.signInDetails;\n        }\n        await tokenOrchestrator.setTokens({\n            tokens,\n        });\n    }\n    else {\n        // This would be a service error\n        throw new AmplifyError({\n            message: 'Invalid tokens',\n            name: 'InvalidTokens',\n            recoverySuggestion: 'Check Cognito UserPool settings',\n        });\n    }\n}\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport var AssociateSoftwareTokenException;\n(function (AssociateSoftwareTokenException) {\n    AssociateSoftwareTokenException[\"ConcurrentModificationException\"] = \"ConcurrentModificationException\";\n    AssociateSoftwareTokenException[\"ForbiddenException\"] = \"ForbiddenException\";\n    AssociateSoftwareTokenException[\"InternalErrorException\"] = \"InternalErrorException\";\n    AssociateSoftwareTokenException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n    AssociateSoftwareTokenException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n    AssociateSoftwareTokenException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n    AssociateSoftwareTokenException[\"SoftwareTokenMFANotFoundException\"] = \"SoftwareTokenMFANotFoundException\";\n})(AssociateSoftwareTokenException || (AssociateSoftwareTokenException = {}));\nexport var ChangePasswordException;\n(function (ChangePasswordException) {\n    ChangePasswordException[\"ForbiddenException\"] = \"ForbiddenException\";\n    ChangePasswordException[\"InternalErrorException\"] = \"InternalErrorException\";\n    ChangePasswordException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n    ChangePasswordException[\"InvalidPasswordException\"] = \"InvalidPasswordException\";\n    ChangePasswordException[\"LimitExceededException\"] = \"LimitExceededException\";\n    ChangePasswordException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n    ChangePasswordException[\"PasswordResetRequiredException\"] = \"PasswordResetRequiredException\";\n    ChangePasswordException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n    ChangePasswordException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n    ChangePasswordException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n    ChangePasswordException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(ChangePasswordException || (ChangePasswordException = {}));\nexport var ConfirmDeviceException;\n(function (ConfirmDeviceException) {\n    ConfirmDeviceException[\"ForbiddenException\"] = \"ForbiddenException\";\n    ConfirmDeviceException[\"InternalErrorException\"] = \"InternalErrorException\";\n    ConfirmDeviceException[\"InvalidLambdaResponseException\"] = \"InvalidLambdaResponseException\";\n    ConfirmDeviceException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n    ConfirmDeviceException[\"InvalidPasswordException\"] = \"InvalidPasswordException\";\n    ConfirmDeviceException[\"InvalidUserPoolConfigurationException\"] = \"InvalidUserPoolConfigurationException\";\n    ConfirmDeviceException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n    ConfirmDeviceException[\"PasswordResetRequiredException\"] = \"PasswordResetRequiredException\";\n    ConfirmDeviceException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n    ConfirmDeviceException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n    ConfirmDeviceException[\"UsernameExistsException\"] = \"UsernameExistsException\";\n    ConfirmDeviceException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n    ConfirmDeviceException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(ConfirmDeviceException || (ConfirmDeviceException = {}));\nexport var ConfirmForgotPasswordException;\n(function (ConfirmForgotPasswordException) {\n    ConfirmForgotPasswordException[\"CodeMismatchException\"] = \"CodeMismatchException\";\n    ConfirmForgotPasswordException[\"ExpiredCodeException\"] = \"ExpiredCodeException\";\n    ConfirmForgotPasswordException[\"ForbiddenException\"] = \"ForbiddenException\";\n    ConfirmForgotPasswordException[\"InternalErrorException\"] = \"InternalErrorException\";\n    ConfirmForgotPasswordException[\"InvalidLambdaResponseException\"] = \"InvalidLambdaResponseException\";\n    ConfirmForgotPasswordException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n    ConfirmForgotPasswordException[\"InvalidPasswordException\"] = \"InvalidPasswordException\";\n    ConfirmForgotPasswordException[\"LimitExceededException\"] = \"LimitExceededException\";\n    ConfirmForgotPasswordException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n    ConfirmForgotPasswordException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n    ConfirmForgotPasswordException[\"TooManyFailedAttemptsException\"] = \"TooManyFailedAttemptsException\";\n    ConfirmForgotPasswordException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n    ConfirmForgotPasswordException[\"UnexpectedLambdaException\"] = \"UnexpectedLambdaException\";\n    ConfirmForgotPasswordException[\"UserLambdaValidationException\"] = \"UserLambdaValidationException\";\n    ConfirmForgotPasswordException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n    ConfirmForgotPasswordException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(ConfirmForgotPasswordException || (ConfirmForgotPasswordException = {}));\nexport var ConfirmSignUpException;\n(function (ConfirmSignUpException) {\n    ConfirmSignUpException[\"AliasExistsException\"] = \"AliasExistsException\";\n    ConfirmSignUpException[\"CodeMismatchException\"] = \"CodeMismatchException\";\n    ConfirmSignUpException[\"ExpiredCodeException\"] = \"ExpiredCodeException\";\n    ConfirmSignUpException[\"ForbiddenException\"] = \"ForbiddenException\";\n    ConfirmSignUpException[\"InternalErrorException\"] = \"InternalErrorException\";\n    ConfirmSignUpException[\"InvalidLambdaResponseException\"] = \"InvalidLambdaResponseException\";\n    ConfirmSignUpException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n    ConfirmSignUpException[\"LimitExceededException\"] = \"LimitExceededException\";\n    ConfirmSignUpException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n    ConfirmSignUpException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n    ConfirmSignUpException[\"TooManyFailedAttemptsException\"] = \"TooManyFailedAttemptsException\";\n    ConfirmSignUpException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n    ConfirmSignUpException[\"UnexpectedLambdaException\"] = \"UnexpectedLambdaException\";\n    ConfirmSignUpException[\"UserLambdaValidationException\"] = \"UserLambdaValidationException\";\n    ConfirmSignUpException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(ConfirmSignUpException || (ConfirmSignUpException = {}));\nexport var DeleteUserAttributesException;\n(function (DeleteUserAttributesException) {\n    DeleteUserAttributesException[\"ForbiddenException\"] = \"ForbiddenException\";\n    DeleteUserAttributesException[\"InternalErrorException\"] = \"InternalErrorException\";\n    DeleteUserAttributesException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n    DeleteUserAttributesException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n    DeleteUserAttributesException[\"PasswordResetRequiredException\"] = \"PasswordResetRequiredException\";\n    DeleteUserAttributesException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n    DeleteUserAttributesException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n    DeleteUserAttributesException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n    DeleteUserAttributesException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(DeleteUserAttributesException || (DeleteUserAttributesException = {}));\nexport var DeleteUserException;\n(function (DeleteUserException) {\n    DeleteUserException[\"ForbiddenException\"] = \"ForbiddenException\";\n    DeleteUserException[\"InternalErrorException\"] = \"InternalErrorException\";\n    DeleteUserException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n    DeleteUserException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n    DeleteUserException[\"PasswordResetRequiredException\"] = \"PasswordResetRequiredException\";\n    DeleteUserException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n    DeleteUserException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n    DeleteUserException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n    DeleteUserException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(DeleteUserException || (DeleteUserException = {}));\nexport var ForgetDeviceException;\n(function (ForgetDeviceException) {\n    ForgetDeviceException[\"ForbiddenException\"] = \"ForbiddenException\";\n    ForgetDeviceException[\"InternalErrorException\"] = \"InternalErrorException\";\n    ForgetDeviceException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n    ForgetDeviceException[\"InvalidUserPoolConfigurationException\"] = \"InvalidUserPoolConfigurationException\";\n    ForgetDeviceException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n    ForgetDeviceException[\"PasswordResetRequiredException\"] = \"PasswordResetRequiredException\";\n    ForgetDeviceException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n    ForgetDeviceException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n    ForgetDeviceException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n    ForgetDeviceException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(ForgetDeviceException || (ForgetDeviceException = {}));\nexport var ForgotPasswordException;\n(function (ForgotPasswordException) {\n    ForgotPasswordException[\"CodeDeliveryFailureException\"] = \"CodeDeliveryFailureException\";\n    ForgotPasswordException[\"ForbiddenException\"] = \"ForbiddenException\";\n    ForgotPasswordException[\"InternalErrorException\"] = \"InternalErrorException\";\n    ForgotPasswordException[\"InvalidEmailRoleAccessPolicyException\"] = \"InvalidEmailRoleAccessPolicyException\";\n    ForgotPasswordException[\"InvalidLambdaResponseException\"] = \"InvalidLambdaResponseException\";\n    ForgotPasswordException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n    ForgotPasswordException[\"InvalidSmsRoleAccessPolicyException\"] = \"InvalidSmsRoleAccessPolicyException\";\n    ForgotPasswordException[\"InvalidSmsRoleTrustRelationshipException\"] = \"InvalidSmsRoleTrustRelationshipException\";\n    ForgotPasswordException[\"LimitExceededException\"] = \"LimitExceededException\";\n    ForgotPasswordException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n    ForgotPasswordException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n    ForgotPasswordException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n    ForgotPasswordException[\"UnexpectedLambdaException\"] = \"UnexpectedLambdaException\";\n    ForgotPasswordException[\"UserLambdaValidationException\"] = \"UserLambdaValidationException\";\n    ForgotPasswordException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(ForgotPasswordException || (ForgotPasswordException = {}));\nexport var GetUserException;\n(function (GetUserException) {\n    GetUserException[\"ForbiddenException\"] = \"ForbiddenException\";\n    GetUserException[\"InternalErrorException\"] = \"InternalErrorException\";\n    GetUserException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n    GetUserException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n    GetUserException[\"PasswordResetRequiredException\"] = \"PasswordResetRequiredException\";\n    GetUserException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n    GetUserException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n    GetUserException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n    GetUserException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(GetUserException || (GetUserException = {}));\nexport var GetIdException;\n(function (GetIdException) {\n    GetIdException[\"ExternalServiceException\"] = \"ExternalServiceException\";\n    GetIdException[\"InternalErrorException\"] = \"InternalErrorException\";\n    GetIdException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n    GetIdException[\"LimitExceededException\"] = \"LimitExceededException\";\n    GetIdException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n    GetIdException[\"ResourceConflictException\"] = \"ResourceConflictException\";\n    GetIdException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n    GetIdException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n})(GetIdException || (GetIdException = {}));\nexport var GetCredentialsForIdentityException;\n(function (GetCredentialsForIdentityException) {\n    GetCredentialsForIdentityException[\"ExternalServiceException\"] = \"ExternalServiceException\";\n    GetCredentialsForIdentityException[\"InternalErrorException\"] = \"InternalErrorException\";\n    GetCredentialsForIdentityException[\"InvalidIdentityPoolConfigurationException\"] = \"InvalidIdentityPoolConfigurationException\";\n    GetCredentialsForIdentityException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n    GetCredentialsForIdentityException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n    GetCredentialsForIdentityException[\"ResourceConflictException\"] = \"ResourceConflictException\";\n    GetCredentialsForIdentityException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n    GetCredentialsForIdentityException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n})(GetCredentialsForIdentityException || (GetCredentialsForIdentityException = {}));\nexport var GetUserAttributeVerificationException;\n(function (GetUserAttributeVerificationException) {\n    GetUserAttributeVerificationException[\"CodeDeliveryFailureException\"] = \"CodeDeliveryFailureException\";\n    GetUserAttributeVerificationException[\"ForbiddenException\"] = \"ForbiddenException\";\n    GetUserAttributeVerificationException[\"InternalErrorException\"] = \"InternalErrorException\";\n    GetUserAttributeVerificationException[\"InvalidEmailRoleAccessPolicyException\"] = \"InvalidEmailRoleAccessPolicyException\";\n    GetUserAttributeVerificationException[\"InvalidLambdaResponseException\"] = \"InvalidLambdaResponseException\";\n    GetUserAttributeVerificationException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n    GetUserAttributeVerificationException[\"InvalidSmsRoleAccessPolicyException\"] = \"InvalidSmsRoleAccessPolicyException\";\n    GetUserAttributeVerificationException[\"InvalidSmsRoleTrustRelationshipException\"] = \"InvalidSmsRoleTrustRelationshipException\";\n    GetUserAttributeVerificationException[\"LimitExceededException\"] = \"LimitExceededException\";\n    GetUserAttributeVerificationException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n    GetUserAttributeVerificationException[\"PasswordResetRequiredException\"] = \"PasswordResetRequiredException\";\n    GetUserAttributeVerificationException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n    GetUserAttributeVerificationException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n    GetUserAttributeVerificationException[\"UnexpectedLambdaException\"] = \"UnexpectedLambdaException\";\n    GetUserAttributeVerificationException[\"UserLambdaValidationException\"] = \"UserLambdaValidationException\";\n    GetUserAttributeVerificationException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n    GetUserAttributeVerificationException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(GetUserAttributeVerificationException || (GetUserAttributeVerificationException = {}));\nexport var GlobalSignOutException;\n(function (GlobalSignOutException) {\n    GlobalSignOutException[\"ForbiddenException\"] = \"ForbiddenException\";\n    GlobalSignOutException[\"InternalErrorException\"] = \"InternalErrorException\";\n    GlobalSignOutException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n    GlobalSignOutException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n    GlobalSignOutException[\"PasswordResetRequiredException\"] = \"PasswordResetRequiredException\";\n    GlobalSignOutException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n    GlobalSignOutException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n    GlobalSignOutException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n})(GlobalSignOutException || (GlobalSignOutException = {}));\nexport var InitiateAuthException;\n(function (InitiateAuthException) {\n    InitiateAuthException[\"PasswordResetRequiredException\"] = \"PasswordResetRequiredException\";\n    InitiateAuthException[\"ForbiddenException\"] = \"ForbiddenException\";\n    InitiateAuthException[\"InternalErrorException\"] = \"InternalErrorException\";\n    InitiateAuthException[\"InvalidLambdaResponseException\"] = \"InvalidLambdaResponseException\";\n    InitiateAuthException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n    InitiateAuthException[\"InvalidSmsRoleAccessPolicyException\"] = \"InvalidSmsRoleAccessPolicyException\";\n    InitiateAuthException[\"InvalidSmsRoleTrustRelationshipException\"] = \"InvalidSmsRoleTrustRelationshipException\";\n    InitiateAuthException[\"InvalidUserPoolConfigurationException\"] = \"InvalidUserPoolConfigurationException\";\n    InitiateAuthException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n    InitiateAuthException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n    InitiateAuthException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n    InitiateAuthException[\"UnexpectedLambdaException\"] = \"UnexpectedLambdaException\";\n    InitiateAuthException[\"UserLambdaValidationException\"] = \"UserLambdaValidationException\";\n    InitiateAuthException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n    InitiateAuthException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(InitiateAuthException || (InitiateAuthException = {}));\nexport var ResendConfirmationException;\n(function (ResendConfirmationException) {\n    ResendConfirmationException[\"CodeDeliveryFailureException\"] = \"CodeDeliveryFailureException\";\n    ResendConfirmationException[\"ForbiddenException\"] = \"ForbiddenException\";\n    ResendConfirmationException[\"InternalErrorException\"] = \"InternalErrorException\";\n    ResendConfirmationException[\"InvalidEmailRoleAccessPolicyException\"] = \"InvalidEmailRoleAccessPolicyException\";\n    ResendConfirmationException[\"InvalidLambdaResponseException\"] = \"InvalidLambdaResponseException\";\n    ResendConfirmationException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n    ResendConfirmationException[\"InvalidSmsRoleAccessPolicyException\"] = \"InvalidSmsRoleAccessPolicyException\";\n    ResendConfirmationException[\"InvalidSmsRoleTrustRelationshipException\"] = \"InvalidSmsRoleTrustRelationshipException\";\n    ResendConfirmationException[\"LimitExceededException\"] = \"LimitExceededException\";\n    ResendConfirmationException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n    ResendConfirmationException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n    ResendConfirmationException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n    ResendConfirmationException[\"UnexpectedLambdaException\"] = \"UnexpectedLambdaException\";\n    ResendConfirmationException[\"UserLambdaValidationException\"] = \"UserLambdaValidationException\";\n    ResendConfirmationException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(ResendConfirmationException || (ResendConfirmationException = {}));\nexport var RespondToAuthChallengeException;\n(function (RespondToAuthChallengeException) {\n    RespondToAuthChallengeException[\"AliasExistsException\"] = \"AliasExistsException\";\n    RespondToAuthChallengeException[\"CodeMismatchException\"] = \"CodeMismatchException\";\n    RespondToAuthChallengeException[\"ExpiredCodeException\"] = \"ExpiredCodeException\";\n    RespondToAuthChallengeException[\"ForbiddenException\"] = \"ForbiddenException\";\n    RespondToAuthChallengeException[\"InternalErrorException\"] = \"InternalErrorException\";\n    RespondToAuthChallengeException[\"InvalidLambdaResponseException\"] = \"InvalidLambdaResponseException\";\n    RespondToAuthChallengeException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n    RespondToAuthChallengeException[\"InvalidPasswordException\"] = \"InvalidPasswordException\";\n    RespondToAuthChallengeException[\"InvalidSmsRoleAccessPolicyException\"] = \"InvalidSmsRoleAccessPolicyException\";\n    RespondToAuthChallengeException[\"InvalidSmsRoleTrustRelationshipException\"] = \"InvalidSmsRoleTrustRelationshipException\";\n    RespondToAuthChallengeException[\"InvalidUserPoolConfigurationException\"] = \"InvalidUserPoolConfigurationException\";\n    RespondToAuthChallengeException[\"MFAMethodNotFoundException\"] = \"MFAMethodNotFoundException\";\n    RespondToAuthChallengeException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n    RespondToAuthChallengeException[\"PasswordResetRequiredException\"] = \"PasswordResetRequiredException\";\n    RespondToAuthChallengeException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n    RespondToAuthChallengeException[\"SoftwareTokenMFANotFoundException\"] = \"SoftwareTokenMFANotFoundException\";\n    RespondToAuthChallengeException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n    RespondToAuthChallengeException[\"UnexpectedLambdaException\"] = \"UnexpectedLambdaException\";\n    RespondToAuthChallengeException[\"UserLambdaValidationException\"] = \"UserLambdaValidationException\";\n    RespondToAuthChallengeException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n    RespondToAuthChallengeException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(RespondToAuthChallengeException || (RespondToAuthChallengeException = {}));\nexport var SetUserMFAPreferenceException;\n(function (SetUserMFAPreferenceException) {\n    SetUserMFAPreferenceException[\"ForbiddenException\"] = \"ForbiddenException\";\n    SetUserMFAPreferenceException[\"InternalErrorException\"] = \"InternalErrorException\";\n    SetUserMFAPreferenceException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n    SetUserMFAPreferenceException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n    SetUserMFAPreferenceException[\"PasswordResetRequiredException\"] = \"PasswordResetRequiredException\";\n    SetUserMFAPreferenceException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n    SetUserMFAPreferenceException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n    SetUserMFAPreferenceException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(SetUserMFAPreferenceException || (SetUserMFAPreferenceException = {}));\nexport var SignUpException;\n(function (SignUpException) {\n    SignUpException[\"CodeDeliveryFailureException\"] = \"CodeDeliveryFailureException\";\n    SignUpException[\"InternalErrorException\"] = \"InternalErrorException\";\n    SignUpException[\"InvalidEmailRoleAccessPolicyException\"] = \"InvalidEmailRoleAccessPolicyException\";\n    SignUpException[\"InvalidLambdaResponseException\"] = \"InvalidLambdaResponseException\";\n    SignUpException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n    SignUpException[\"InvalidPasswordException\"] = \"InvalidPasswordException\";\n    SignUpException[\"InvalidSmsRoleAccessPolicyException\"] = \"InvalidSmsRoleAccessPolicyException\";\n    SignUpException[\"InvalidSmsRoleTrustRelationshipException\"] = \"InvalidSmsRoleTrustRelationshipException\";\n    SignUpException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n    SignUpException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n    SignUpException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n    SignUpException[\"UnexpectedLambdaException\"] = \"UnexpectedLambdaException\";\n    SignUpException[\"UserLambdaValidationException\"] = \"UserLambdaValidationException\";\n    SignUpException[\"UsernameExistsException\"] = \"UsernameExistsException\";\n})(SignUpException || (SignUpException = {}));\nexport var UpdateUserAttributesException;\n(function (UpdateUserAttributesException) {\n    UpdateUserAttributesException[\"AliasExistsException\"] = \"AliasExistsException\";\n    UpdateUserAttributesException[\"CodeDeliveryFailureException\"] = \"CodeDeliveryFailureException\";\n    UpdateUserAttributesException[\"CodeMismatchException\"] = \"CodeMismatchException\";\n    UpdateUserAttributesException[\"ExpiredCodeException\"] = \"ExpiredCodeException\";\n    UpdateUserAttributesException[\"ForbiddenException\"] = \"ForbiddenException\";\n    UpdateUserAttributesException[\"InternalErrorException\"] = \"InternalErrorException\";\n    UpdateUserAttributesException[\"InvalidEmailRoleAccessPolicyException\"] = \"InvalidEmailRoleAccessPolicyException\";\n    UpdateUserAttributesException[\"InvalidLambdaResponseException\"] = \"InvalidLambdaResponseException\";\n    UpdateUserAttributesException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n    UpdateUserAttributesException[\"InvalidSmsRoleAccessPolicyException\"] = \"InvalidSmsRoleAccessPolicyException\";\n    UpdateUserAttributesException[\"InvalidSmsRoleTrustRelationshipException\"] = \"InvalidSmsRoleTrustRelationshipException\";\n    UpdateUserAttributesException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n    UpdateUserAttributesException[\"PasswordResetRequiredException\"] = \"PasswordResetRequiredException\";\n    UpdateUserAttributesException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n    UpdateUserAttributesException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n    UpdateUserAttributesException[\"UnexpectedLambdaException\"] = \"UnexpectedLambdaException\";\n    UpdateUserAttributesException[\"UserLambdaValidationException\"] = \"UserLambdaValidationException\";\n    UpdateUserAttributesException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n    UpdateUserAttributesException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(UpdateUserAttributesException || (UpdateUserAttributesException = {}));\nexport var VerifySoftwareTokenException;\n(function (VerifySoftwareTokenException) {\n    VerifySoftwareTokenException[\"CodeMismatchException\"] = \"CodeMismatchException\";\n    VerifySoftwareTokenException[\"EnableSoftwareTokenMFAException\"] = \"EnableSoftwareTokenMFAException\";\n    VerifySoftwareTokenException[\"ForbiddenException\"] = \"ForbiddenException\";\n    VerifySoftwareTokenException[\"InternalErrorException\"] = \"InternalErrorException\";\n    VerifySoftwareTokenException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n    VerifySoftwareTokenException[\"InvalidUserPoolConfigurationException\"] = \"InvalidUserPoolConfigurationException\";\n    VerifySoftwareTokenException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n    VerifySoftwareTokenException[\"PasswordResetRequiredException\"] = \"PasswordResetRequiredException\";\n    VerifySoftwareTokenException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n    VerifySoftwareTokenException[\"SoftwareTokenMFANotFoundException\"] = \"SoftwareTokenMFANotFoundException\";\n    VerifySoftwareTokenException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n    VerifySoftwareTokenException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n    VerifySoftwareTokenException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(VerifySoftwareTokenException || (VerifySoftwareTokenException = {}));\nexport var VerifyUserAttributeException;\n(function (VerifyUserAttributeException) {\n    VerifyUserAttributeException[\"AliasExistsException\"] = \"AliasExistsException\";\n    VerifyUserAttributeException[\"CodeMismatchException\"] = \"CodeMismatchException\";\n    VerifyUserAttributeException[\"ExpiredCodeException\"] = \"ExpiredCodeException\";\n    VerifyUserAttributeException[\"ForbiddenException\"] = \"ForbiddenException\";\n    VerifyUserAttributeException[\"InternalErrorException\"] = \"InternalErrorException\";\n    VerifyUserAttributeException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n    VerifyUserAttributeException[\"LimitExceededException\"] = \"LimitExceededException\";\n    VerifyUserAttributeException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n    VerifyUserAttributeException[\"PasswordResetRequiredException\"] = \"PasswordResetRequiredException\";\n    VerifyUserAttributeException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n    VerifyUserAttributeException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n    VerifyUserAttributeException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n    VerifyUserAttributeException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(VerifyUserAttributeException || (VerifyUserAttributeException = {}));\nexport var UpdateDeviceStatusException;\n(function (UpdateDeviceStatusException) {\n    UpdateDeviceStatusException[\"ForbiddenException\"] = \"ForbiddenException\";\n    UpdateDeviceStatusException[\"InternalErrorException\"] = \"InternalErrorException\";\n    UpdateDeviceStatusException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n    UpdateDeviceStatusException[\"InvalidUserPoolConfigurationException\"] = \"InvalidUserPoolConfigurationException\";\n    UpdateDeviceStatusException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n    UpdateDeviceStatusException[\"PasswordResetRequiredException\"] = \"PasswordResetRequiredException\";\n    UpdateDeviceStatusException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n    UpdateDeviceStatusException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n    UpdateDeviceStatusException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n    UpdateDeviceStatusException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(UpdateDeviceStatusException || (UpdateDeviceStatusException = {}));\nexport var ListDevicesException;\n(function (ListDevicesException) {\n    ListDevicesException[\"ForbiddenException\"] = \"ForbiddenException\";\n    ListDevicesException[\"InternalErrorException\"] = \"InternalErrorException\";\n    ListDevicesException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n    ListDevicesException[\"InvalidUserPoolConfigurationException\"] = \"InvalidUserPoolConfigurationException\";\n    ListDevicesException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n    ListDevicesException[\"PasswordResetRequiredException\"] = \"PasswordResetRequiredException\";\n    ListDevicesException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n    ListDevicesException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n    ListDevicesException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n    ListDevicesException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(ListDevicesException || (ListDevicesException = {}));\nexport const SETUP_TOTP_EXCEPTION = 'SetUpTOTPException';\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Hub } from '@aws-amplify/core';\nimport { AMPLIFY_SYMBOL } from '@aws-amplify/core/internals/utils';\nimport { getCurrentUser } from '../apis/getCurrentUser';\nimport { UNEXPECTED_SIGN_IN_INTERRUPTION_EXCEPTION, USER_UNAUTHENTICATED_EXCEPTION, } from '../../../errors/constants';\nimport { AuthError } from '../../../errors/AuthError';\nexport const ERROR_MESSAGE = 'Unable to get user session following successful sign-in.';\nexport const dispatchSignedInHubEvent = async () => {\n    try {\n        Hub.dispatch('auth', {\n            event: 'signedIn',\n            data: await getCurrentUser(),\n        }, 'Auth', AMPLIFY_SYMBOL);\n    }\n    catch (error) {\n        if (error.name === USER_UNAUTHENTICATED_EXCEPTION) {\n            throw new AuthError({\n                name: UNEXPECTED_SIGN_IN_INTERRUPTION_EXCEPTION,\n                message: ERROR_MESSAGE,\n                recoverySuggestion: 'This most likely is due to auth tokens not being persisted. If you are using cookie store, please ensure cookies can be correctly set from your server.',\n            });\n        }\n        throw error;\n    }\n};\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Retrieves the device name using the User-Agent Client Hints API if available,\n * falling back to the traditional userAgent string if not.\n *\n * @returns {Promise<string>} A promise that resolves with a string representing the device name.\n *\n * Example Output:\n * navigator.userAgentData:\n *   'macOS 14.2.1 arm macOS Not A(Brand/99.0.0.0;Google Chrome/121.0.6167.160;Chromium/121.0.6167.160'\n * navigator.userAgent:\n *   'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/115.0'\n */\nexport const getDeviceName = async () => {\n    const { userAgentData } = navigator;\n    if (!userAgentData)\n        return navigator.userAgent;\n    const { platform = '', platformVersion = '', model = '', architecture = '', fullVersionList = [], } = await userAgentData.getHighEntropyValues([\n        'platform',\n        'platformVersion',\n        'architecture',\n        'model',\n        'fullVersionList',\n    ]);\n    const versionList = fullVersionList\n        .map((v) => `${v.brand}/${v.version}`)\n        .join(';');\n    const deviceName = [\n        platform,\n        platformVersion,\n        architecture,\n        model,\n        platform,\n        versionList,\n    ]\n        .filter(value => value)\n        .join(' ');\n    return deviceName || navigator.userAgent;\n};\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler';\nimport { createUserPoolDeserializer, createUserPoolSerializer, } from './shared/serde';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants';\nexport const createRespondToAuthChallengeClient = (config) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('RespondToAuthChallenge'), createUserPoolDeserializer(), {\n    ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n    ...config,\n});\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler';\nimport { createUserPoolDeserializer, createUserPoolSerializer, } from './shared/serde';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants';\nexport const createAssociateSoftwareTokenClient = (config) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('AssociateSoftwareToken'), createUserPoolDeserializer(), {\n    ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n    ...config,\n});\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler';\nimport { createUserPoolDeserializer, createUserPoolSerializer, } from './shared/serde';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants';\nexport const createConfirmDeviceClient = (config) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('ConfirmDevice'), createUserPoolDeserializer(), {\n    ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n    ...config,\n});\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AmplifyError, AmplifyErrorCode, createAssertionFunction, } from '@aws-amplify/core/internals/utils';\nexport class PasskeyError extends AmplifyError {\n    constructor(params) {\n        super(params);\n        // Hack for making the custom error class work when transpiled to es5\n        // TODO: Delete the following 2 lines after we change the build target to >= es2015\n        this.constructor = PasskeyError;\n        Object.setPrototypeOf(this, PasskeyError.prototype);\n    }\n}\nexport var PasskeyErrorCode;\n(function (PasskeyErrorCode) {\n    // not supported\n    PasskeyErrorCode[\"PasskeyNotSupported\"] = \"PasskeyNotSupported\";\n    // duplicate passkey\n    PasskeyErrorCode[\"PasskeyAlreadyExists\"] = \"PasskeyAlreadyExists\";\n    // misconfigurations\n    PasskeyErrorCode[\"InvalidPasskeyRegistrationOptions\"] = \"InvalidPasskeyRegistrationOptions\";\n    PasskeyErrorCode[\"InvalidPasskeyAuthenticationOptions\"] = \"InvalidPasskeyAuthenticationOptions\";\n    PasskeyErrorCode[\"RelyingPartyMismatch\"] = \"RelyingPartyMismatch\";\n    // failed credential creation / retrieval\n    PasskeyErrorCode[\"PasskeyRegistrationFailed\"] = \"PasskeyRegistrationFailed\";\n    PasskeyErrorCode[\"PasskeyRetrievalFailed\"] = \"PasskeyRetrievalFailed\";\n    // cancel / aborts\n    PasskeyErrorCode[\"PasskeyRegistrationCanceled\"] = \"PasskeyRegistrationCanceled\";\n    PasskeyErrorCode[\"PasskeyAuthenticationCanceled\"] = \"PasskeyAuthenticationCanceled\";\n    PasskeyErrorCode[\"PasskeyOperationAborted\"] = \"PasskeyOperationAborted\";\n})(PasskeyErrorCode || (PasskeyErrorCode = {}));\nconst notSupportedRecoverySuggestion = 'Passkeys may not be supported on this device. Ensure your application is running in a secure context (HTTPS) and Web Authentication API is supported.';\nconst abortOrCancelRecoverySuggestion = 'User may have canceled the ceremony or another interruption has occurred. Check underlying error for details.';\nconst misconfigurationRecoverySuggestion = 'Ensure your user pool is configured to support the WEB_AUTHN as an authentication factor.';\nconst passkeyErrorMap = {\n    [PasskeyErrorCode.PasskeyNotSupported]: {\n        message: 'Passkeys may not be supported on this device.',\n        recoverySuggestion: notSupportedRecoverySuggestion,\n    },\n    [PasskeyErrorCode.InvalidPasskeyRegistrationOptions]: {\n        message: 'Invalid passkey registration options.',\n        recoverySuggestion: misconfigurationRecoverySuggestion,\n    },\n    [PasskeyErrorCode.InvalidPasskeyAuthenticationOptions]: {\n        message: 'Invalid passkey authentication options.',\n        recoverySuggestion: misconfigurationRecoverySuggestion,\n    },\n    [PasskeyErrorCode.PasskeyRegistrationFailed]: {\n        message: 'Device failed to create passkey.',\n        recoverySuggestion: notSupportedRecoverySuggestion,\n    },\n    [PasskeyErrorCode.PasskeyRetrievalFailed]: {\n        message: 'Device failed to retrieve passkey.',\n        recoverySuggestion: 'Passkeys may not be available on this device. Try an alternative authentication factor like PASSWORD, EMAIL_OTP, or SMS_OTP.',\n    },\n    [PasskeyErrorCode.PasskeyAlreadyExists]: {\n        message: 'Passkey already exists in authenticator.',\n        recoverySuggestion: 'Proceed with existing passkey or try again after deleting the credential.',\n    },\n    [PasskeyErrorCode.PasskeyRegistrationCanceled]: {\n        message: 'Passkey registration ceremony has been canceled.',\n        recoverySuggestion: abortOrCancelRecoverySuggestion,\n    },\n    [PasskeyErrorCode.PasskeyAuthenticationCanceled]: {\n        message: 'Passkey authentication ceremony has been canceled.',\n        recoverySuggestion: abortOrCancelRecoverySuggestion,\n    },\n    [PasskeyErrorCode.PasskeyOperationAborted]: {\n        message: 'Passkey operation has been aborted.',\n        recoverySuggestion: abortOrCancelRecoverySuggestion,\n    },\n    [PasskeyErrorCode.RelyingPartyMismatch]: {\n        message: 'Relying party does not match current domain.',\n        recoverySuggestion: 'Ensure relying party identifier matches current domain.',\n    },\n};\nexport const assertPasskeyError = createAssertionFunction(passkeyErrorMap, PasskeyError);\n/**\n * Handle Passkey Authentication Errors\n * https://w3c.github.io/webauthn/#sctn-get-request-exceptions\n *\n * @param err unknown\n * @returns PasskeyError\n */\nexport const handlePasskeyAuthenticationError = (err) => {\n    if (err instanceof PasskeyError) {\n        return err;\n    }\n    if (err instanceof Error) {\n        if (err.name === 'NotAllowedError') {\n            const { message, recoverySuggestion } = passkeyErrorMap[PasskeyErrorCode.PasskeyAuthenticationCanceled];\n            return new PasskeyError({\n                name: PasskeyErrorCode.PasskeyAuthenticationCanceled,\n                message,\n                recoverySuggestion,\n                underlyingError: err,\n            });\n        }\n    }\n    return handlePasskeyError(err);\n};\n/**\n * Handle Passkey Registration Errors\n * https://w3c.github.io/webauthn/#sctn-create-request-exceptions\n *\n * @param err unknown\n * @returns PasskeyError\n */\nexport const handlePasskeyRegistrationError = (err) => {\n    if (err instanceof PasskeyError) {\n        return err;\n    }\n    if (err instanceof Error) {\n        // Duplicate Passkey\n        if (err.name === 'InvalidStateError') {\n            const { message, recoverySuggestion } = passkeyErrorMap[PasskeyErrorCode.PasskeyAlreadyExists];\n            return new PasskeyError({\n                name: PasskeyErrorCode.PasskeyAlreadyExists,\n                message,\n                recoverySuggestion,\n                underlyingError: err,\n            });\n        }\n        // User Cancels Ceremony / Generic Catch All\n        if (err.name === 'NotAllowedError') {\n            const { message, recoverySuggestion } = passkeyErrorMap[PasskeyErrorCode.PasskeyRegistrationCanceled];\n            return new PasskeyError({\n                name: PasskeyErrorCode.PasskeyRegistrationCanceled,\n                message,\n                recoverySuggestion,\n                underlyingError: err,\n            });\n        }\n    }\n    return handlePasskeyError(err);\n};\n/**\n * Handles Overlapping Passkey Errors Between Registration & Authentication\n * https://w3c.github.io/webauthn/#sctn-create-request-exceptions\n * https://w3c.github.io/webauthn/#sctn-get-request-exceptions\n *\n * @param err unknown\n * @returns PasskeyError\n */\nconst handlePasskeyError = (err) => {\n    if (err instanceof Error) {\n        // Passkey Operation Aborted\n        if (err.name === 'AbortError') {\n            const { message, recoverySuggestion } = passkeyErrorMap[PasskeyErrorCode.PasskeyOperationAborted];\n            return new PasskeyError({\n                name: PasskeyErrorCode.PasskeyOperationAborted,\n                message,\n                recoverySuggestion,\n                underlyingError: err,\n            });\n        }\n        // Relying Party / Domain Mismatch\n        if (err.name === 'SecurityError') {\n            const { message, recoverySuggestion } = passkeyErrorMap[PasskeyErrorCode.RelyingPartyMismatch];\n            return new PasskeyError({\n                name: PasskeyErrorCode.RelyingPartyMismatch,\n                message,\n                recoverySuggestion,\n                underlyingError: err,\n            });\n        }\n    }\n    return new PasskeyError({\n        name: AmplifyErrorCode.Unknown,\n        message: 'An unknown error has occurred.',\n        underlyingError: err,\n    });\n};\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { isBrowser } from '@aws-amplify/core/internals/utils';\n/**\n * Determines if passkey is supported in current context\n * Will return false if executed in non-secure context\n * @returns boolean\n */\nexport const getIsPasskeySupported = () => {\n    return (isBrowser() &&\n        window.isSecureContext &&\n        'credentials' in navigator &&\n        typeof window.PublicKeyCredential === 'function');\n};\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { base64Encoder } from '@aws-amplify/core/internals/utils';\n// https://datatracker.ietf.org/doc/html/rfc4648#page-7\n/**\n * Converts an ArrayBuffer to a base64url encoded string\n * @param buffer - the ArrayBuffer instance of a Uint8Array\n * @returns string - a base64url encoded string\n */\nexport const convertArrayBufferToBase64Url = (buffer) => {\n    return base64Encoder.convert(new Uint8Array(buffer), {\n        urlSafe: true,\n        skipPadding: true,\n    });\n};\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { base64Decoder } from '@aws-amplify/core/internals/utils';\n/**\n * Converts a base64url encoded string to an ArrayBuffer\n * @param base64url - a base64url encoded string\n * @returns ArrayBuffer\n */\nexport const convertBase64UrlToArrayBuffer = (base64url) => {\n    return Uint8Array.from(base64Decoder.convert(base64url, { urlSafe: true }), x => x.charCodeAt(0)).buffer;\n};\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { PasskeyErrorCode, assertPasskeyError, handlePasskeyAuthenticationError, } from './errors';\nimport { getIsPasskeySupported } from './getIsPasskeySupported';\nimport { deserializeJsonToPkcGetOptions, serializePkcWithAssertionToJson, } from './serde';\nimport { assertCredentialIsPkcWithAuthenticatorAssertionResponse, } from './types';\nexport const getPasskey = async (input) => {\n    try {\n        const isPasskeySupported = getIsPasskeySupported();\n        assertPasskeyError(isPasskeySupported, PasskeyErrorCode.PasskeyNotSupported);\n        const passkeyGetOptions = deserializeJsonToPkcGetOptions(input);\n        const credential = await navigator.credentials.get({\n            publicKey: passkeyGetOptions,\n        });\n        assertCredentialIsPkcWithAuthenticatorAssertionResponse(credential);\n        return serializePkcWithAssertionToJson(credential);\n    }\n    catch (err) {\n        throw handlePasskeyAuthenticationError(err);\n    }\n};\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { convertArrayBufferToBase64Url, convertBase64UrlToArrayBuffer, } from '../../../foundation/convert';\n/**\n * Deserializes Public Key Credential Creation Options JSON\n * @param input PasskeyCreateOptionsJson\n * @returns PublicKeyCredentialCreationOptions\n */\nexport const deserializeJsonToPkcCreationOptions = (input) => {\n    const userIdBuffer = convertBase64UrlToArrayBuffer(input.user.id);\n    const challengeBuffer = convertBase64UrlToArrayBuffer(input.challenge);\n    const excludeCredentialsWithBuffer = (input.excludeCredentials || []).map(excludeCred => ({\n        ...excludeCred,\n        id: convertBase64UrlToArrayBuffer(excludeCred.id),\n    }));\n    return {\n        ...input,\n        excludeCredentials: excludeCredentialsWithBuffer,\n        challenge: challengeBuffer,\n        user: {\n            ...input.user,\n            id: userIdBuffer,\n        },\n    };\n};\n/**\n * Serializes a Public Key Credential With Attestation to JSON\n * @param input PasskeyCreateResult\n * @returns PasskeyCreateResultJson\n */\nexport const serializePkcWithAttestationToJson = (input) => {\n    const response = {\n        clientDataJSON: convertArrayBufferToBase64Url(input.response.clientDataJSON),\n        attestationObject: convertArrayBufferToBase64Url(input.response.attestationObject),\n        transports: input.response.getTransports(),\n        publicKeyAlgorithm: input.response.getPublicKeyAlgorithm(),\n        authenticatorData: convertArrayBufferToBase64Url(input.response.getAuthenticatorData()),\n    };\n    const publicKey = input.response.getPublicKey();\n    if (publicKey) {\n        response.publicKey = convertArrayBufferToBase64Url(publicKey);\n    }\n    const resultJson = {\n        type: input.type,\n        id: input.id,\n        rawId: convertArrayBufferToBase64Url(input.rawId),\n        clientExtensionResults: input.getClientExtensionResults(),\n        response,\n    };\n    if (input.authenticatorAttachment) {\n        resultJson.authenticatorAttachment = input.authenticatorAttachment;\n    }\n    return resultJson;\n};\n/**\n * Deserializes Public Key Credential Get Options JSON\n * @param input PasskeyGetOptionsJson\n * @returns PublicKeyCredentialRequestOptions\n */\nexport const deserializeJsonToPkcGetOptions = (input) => {\n    const challengeBuffer = convertBase64UrlToArrayBuffer(input.challenge);\n    const allowedCredentialsWithBuffer = (input.allowCredentials || []).map(allowedCred => ({\n        ...allowedCred,\n        id: convertBase64UrlToArrayBuffer(allowedCred.id),\n    }));\n    return {\n        ...input,\n        challenge: challengeBuffer,\n        allowCredentials: allowedCredentialsWithBuffer,\n    };\n};\n/**\n * Serializes a Public Key Credential With Attestation to JSON\n * @param input PasskeyGetResult\n * @returns PasskeyGetResultJson\n */\nexport const serializePkcWithAssertionToJson = (input) => {\n    const response = {\n        clientDataJSON: convertArrayBufferToBase64Url(input.response.clientDataJSON),\n        authenticatorData: convertArrayBufferToBase64Url(input.response.authenticatorData),\n        signature: convertArrayBufferToBase64Url(input.response.signature),\n    };\n    if (input.response.userHandle) {\n        response.userHandle = convertArrayBufferToBase64Url(input.response.userHandle);\n    }\n    const resultJson = {\n        id: input.id,\n        rawId: convertArrayBufferToBase64Url(input.rawId),\n        type: input.type,\n        clientExtensionResults: input.getClientExtensionResults(),\n        response,\n    };\n    if (input.authenticatorAttachment) {\n        resultJson.authenticatorAttachment = input.authenticatorAttachment;\n    }\n    return resultJson;\n};\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { PasskeyErrorCode, assertPasskeyError } from '../errors';\n/**\n * Passkey Create Types\n */\nexport { assertValidCredentialCreationOptions, } from './shared';\nexport function assertCredentialIsPkcWithAuthenticatorAttestationResponse(credential) {\n    assertPasskeyError(credential &&\n        credential instanceof PublicKeyCredential &&\n        credential.response instanceof AuthenticatorAttestationResponse, PasskeyErrorCode.PasskeyRegistrationFailed);\n}\nexport function assertCredentialIsPkcWithAuthenticatorAssertionResponse(credential) {\n    assertPasskeyError(credential &&\n        credential instanceof PublicKeyCredential &&\n        credential.response instanceof AuthenticatorAssertionResponse, PasskeyErrorCode.PasskeyRetrievalFailed);\n}\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst MONTH_NAMES = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n];\nconst WEEK_NAMES = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nexport const getNowString = () => {\n    const now = new Date();\n    const weekDay = WEEK_NAMES[now.getUTCDay()];\n    const month = MONTH_NAMES[now.getUTCMonth()];\n    const day = now.getUTCDate();\n    let hours = now.getUTCHours();\n    if (hours < 10) {\n        hours = `0${hours}`;\n    }\n    let minutes = now.getUTCMinutes();\n    if (minutes < 10) {\n        minutes = `0${minutes}`;\n    }\n    let seconds = now.getUTCSeconds();\n    if (seconds < 10) {\n        seconds = `0${seconds}`;\n    }\n    const year = now.getUTCFullYear();\n    // ddd MMM D HH:mm:ss UTC YYYY\n    const dateNow = `${weekDay} ${month} ${day} ${hours}:${minutes}:${seconds} UTC ${year}`;\n    return dateNow;\n};\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Sha256 } from '@aws-crypto/sha256-js';\nimport { base64Decoder, base64Encoder, } from '@aws-amplify/core/internals/utils';\nimport { textEncoder } from '../textEncoder';\nexport const getSignatureString = ({ userPoolName, username, challengeParameters, dateNow, hkdf, }) => {\n    const bufUPIDaToB = textEncoder.convert(userPoolName);\n    const bufUNaToB = textEncoder.convert(username);\n    const bufSBaToB = urlB64ToUint8Array(challengeParameters.SECRET_BLOCK);\n    const bufDNaToB = textEncoder.convert(dateNow);\n    const bufConcat = new Uint8Array(bufUPIDaToB.byteLength +\n        bufUNaToB.byteLength +\n        bufSBaToB.byteLength +\n        bufDNaToB.byteLength);\n    bufConcat.set(bufUPIDaToB, 0);\n    bufConcat.set(bufUNaToB, bufUPIDaToB.byteLength);\n    bufConcat.set(bufSBaToB, bufUPIDaToB.byteLength + bufUNaToB.byteLength);\n    bufConcat.set(bufDNaToB, bufUPIDaToB.byteLength + bufUNaToB.byteLength + bufSBaToB.byteLength);\n    const awsCryptoHash = new Sha256(hkdf);\n    awsCryptoHash.update(bufConcat);\n    const resultFromAWSCrypto = awsCryptoHash.digestSync();\n    const signatureString = base64Encoder.convert(resultFromAWSCrypto);\n    return signatureString;\n};\nconst urlB64ToUint8Array = (base64String) => {\n    const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n    const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n    const rawData = base64Decoder.convert(base64);\n    const outputArray = new Uint8Array(rawData.length);\n    for (let i = 0; i < rawData.length; ++i) {\n        outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n};\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { AmplifyUrl, AuthAction, assertTokenProviderConfig, base64Encoder, getDeviceName, } from '@aws-amplify/core/internals/utils';\nimport { AuthError } from '../../../errors/AuthError';\nimport { InitiateAuthException } from '../types/errors';\nimport { AuthErrorCodes } from '../../../common/AuthErrorStrings';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { USER_ALREADY_AUTHENTICATED_EXCEPTION } from '../../../errors/constants';\nimport { getCurrentUser } from '../apis/getCurrentUser';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { createAssociateSoftwareTokenClient, createConfirmDeviceClient, createInitiateAuthClient, createRespondToAuthChallengeClient, createVerifySoftwareTokenClient, } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { handleWebAuthnSignInResult } from '../../../client/flows/userAuth/handleWebAuthnSignInResult';\nimport { handlePasswordSRP } from '../../../client/flows/shared/handlePasswordSRP';\nimport { initiateSelectedChallenge } from '../../../client/flows/userAuth/handleSelectChallenge';\nimport { handleSelectChallengeWithPassword } from '../../../client/flows/userAuth/handleSelectChallengeWithPassword';\nimport { handleSelectChallengeWithPasswordSRP } from '../../../client/flows/userAuth/handleSelectChallengeWithPasswordSRP';\nimport { signInStore } from '../../../client/utils/store';\nimport { assertDeviceMetadata } from './types';\nimport { getAuthenticationHelper, getBytesFromHex, getNowString, getSignatureString, } from './srp';\nimport { BigInteger } from './srp/BigInteger';\nimport { getUserContextData } from './userContextData';\nconst USER_ATTRIBUTES = 'userAttributes.';\nexport async function handleCustomChallenge({ challengeResponse, clientMetadata, session, username, config, tokenOrchestrator, }) {\n    const { userPoolId, userPoolClientId, userPoolEndpoint } = config;\n    const challengeResponses = {\n        USERNAME: username,\n        ANSWER: challengeResponse,\n    };\n    const deviceMetadata = await tokenOrchestrator?.getDeviceMetadata(username);\n    if (deviceMetadata && deviceMetadata.deviceKey) {\n        challengeResponses.DEVICE_KEY = deviceMetadata.deviceKey;\n    }\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const jsonReq = {\n        ChallengeName: 'CUSTOM_CHALLENGE',\n        ChallengeResponses: challengeResponses,\n        Session: session,\n        ClientMetadata: clientMetadata,\n        ClientId: userPoolClientId,\n        UserContextData,\n    };\n    const respondToAuthChallenge = createRespondToAuthChallengeClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const response = await respondToAuthChallenge({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn),\n    }, jsonReq);\n    if (response.ChallengeName === 'DEVICE_SRP_AUTH') {\n        return handleDeviceSRPAuth({\n            username,\n            config,\n            clientMetadata,\n            session: response.Session,\n            tokenOrchestrator,\n        });\n    }\n    return response;\n}\nexport async function handleMFASetupChallenge({ challengeResponse, username, clientMetadata, session, deviceName, config, }) {\n    const { userPoolId, userPoolClientId, userPoolEndpoint } = config;\n    if (challengeResponse === 'EMAIL') {\n        return {\n            ChallengeName: 'MFA_SETUP',\n            Session: session,\n            ChallengeParameters: {\n                MFAS_CAN_SETUP: '[\"EMAIL_OTP\"]',\n            },\n            $metadata: {},\n        };\n    }\n    if (challengeResponse === 'TOTP') {\n        return {\n            ChallengeName: 'MFA_SETUP',\n            Session: session,\n            ChallengeParameters: {\n                MFAS_CAN_SETUP: '[\"SOFTWARE_TOKEN_MFA\"]',\n            },\n            $metadata: {},\n        };\n    }\n    const challengeResponses = {\n        USERNAME: username,\n    };\n    const isTOTPCode = /^\\d+$/.test(challengeResponse);\n    if (isTOTPCode) {\n        const verifySoftwareToken = createVerifySoftwareTokenClient({\n            endpointResolver: createCognitoUserPoolEndpointResolver({\n                endpointOverride: userPoolEndpoint,\n            }),\n        });\n        const { Session } = await verifySoftwareToken({\n            region: getRegionFromUserPoolId(userPoolId),\n            userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn),\n        }, {\n            UserCode: challengeResponse,\n            Session: session,\n            FriendlyDeviceName: deviceName,\n        });\n        signInStore.dispatch({\n            type: 'SET_SIGN_IN_SESSION',\n            value: Session,\n        });\n        const jsonReq = {\n            ChallengeName: 'MFA_SETUP',\n            ChallengeResponses: challengeResponses,\n            Session,\n            ClientMetadata: clientMetadata,\n            ClientId: userPoolClientId,\n        };\n        const respondToAuthChallenge = createRespondToAuthChallengeClient({\n            endpointResolver: createCognitoUserPoolEndpointResolver({\n                endpointOverride: userPoolEndpoint,\n            }),\n        });\n        return respondToAuthChallenge({\n            region: getRegionFromUserPoolId(userPoolId),\n            userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn),\n        }, jsonReq);\n    }\n    const isEmail = challengeResponse.includes('@');\n    if (isEmail) {\n        challengeResponses.EMAIL = challengeResponse;\n        const jsonReq = {\n            ChallengeName: 'MFA_SETUP',\n            ChallengeResponses: challengeResponses,\n            Session: session,\n            ClientMetadata: clientMetadata,\n            ClientId: userPoolClientId,\n        };\n        const respondToAuthChallenge = createRespondToAuthChallengeClient({\n            endpointResolver: createCognitoUserPoolEndpointResolver({\n                endpointOverride: userPoolEndpoint,\n            }),\n        });\n        return respondToAuthChallenge({\n            region: getRegionFromUserPoolId(userPoolId),\n            userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn),\n        }, jsonReq);\n    }\n    throw new AuthError({\n        name: AuthErrorCodes.SignInException,\n        message: `Cannot proceed with MFA setup using challengeResponse: ${challengeResponse}`,\n        recoverySuggestion: 'Try passing \"EMAIL\", \"TOTP\", a valid email, or OTP code as the challengeResponse.',\n    });\n}\nexport async function handleSelectMFATypeChallenge({ challengeResponse, username, clientMetadata, session, config, }) {\n    const { userPoolId, userPoolClientId, userPoolEndpoint } = config;\n    assertValidationError(challengeResponse === 'TOTP' ||\n        challengeResponse === 'SMS' ||\n        challengeResponse === 'EMAIL', AuthValidationErrorCode.IncorrectMFAMethod);\n    const challengeResponses = {\n        USERNAME: username,\n        ANSWER: mapMfaType(challengeResponse),\n    };\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const jsonReq = {\n        ChallengeName: 'SELECT_MFA_TYPE',\n        ChallengeResponses: challengeResponses,\n        Session: session,\n        ClientMetadata: clientMetadata,\n        ClientId: userPoolClientId,\n        UserContextData,\n    };\n    const respondToAuthChallenge = createRespondToAuthChallengeClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    return respondToAuthChallenge({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn),\n    }, jsonReq);\n}\nexport async function handleCompleteNewPasswordChallenge({ challengeResponse, clientMetadata, session, username, requiredAttributes, config, }) {\n    const { userPoolId, userPoolClientId, userPoolEndpoint } = config;\n    const challengeResponses = {\n        ...createAttributes(requiredAttributes),\n        NEW_PASSWORD: challengeResponse,\n        USERNAME: username,\n    };\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const jsonReq = {\n        ChallengeName: 'NEW_PASSWORD_REQUIRED',\n        ChallengeResponses: challengeResponses,\n        ClientMetadata: clientMetadata,\n        Session: session,\n        ClientId: userPoolClientId,\n        UserContextData,\n    };\n    const respondToAuthChallenge = createRespondToAuthChallengeClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    return respondToAuthChallenge({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn),\n    }, jsonReq);\n}\nexport async function handleUserPasswordAuthFlow(username, password, clientMetadata, config, tokenOrchestrator) {\n    const { userPoolClientId, userPoolId, userPoolEndpoint } = config;\n    const authParameters = {\n        USERNAME: username,\n        PASSWORD: password,\n    };\n    const deviceMetadata = await tokenOrchestrator.getDeviceMetadata(username);\n    if (deviceMetadata && deviceMetadata.deviceKey) {\n        authParameters.DEVICE_KEY = deviceMetadata.deviceKey;\n    }\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const jsonReq = {\n        AuthFlow: 'USER_PASSWORD_AUTH',\n        AuthParameters: authParameters,\n        ClientMetadata: clientMetadata,\n        ClientId: userPoolClientId,\n        UserContextData,\n    };\n    const initiateAuth = createInitiateAuthClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const response = await initiateAuth({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.SignIn),\n    }, jsonReq);\n    const activeUsername = response.ChallengeParameters?.USERNAME ??\n        response.ChallengeParameters?.USER_ID_FOR_SRP ??\n        username;\n    setActiveSignInUsername(activeUsername);\n    if (response.ChallengeName === 'DEVICE_SRP_AUTH')\n        return handleDeviceSRPAuth({\n            username: activeUsername,\n            config,\n            clientMetadata,\n            session: response.Session,\n            tokenOrchestrator,\n        });\n    return response;\n}\nexport async function handleUserSRPAuthFlow(username, password, clientMetadata, config, tokenOrchestrator) {\n    return handlePasswordSRP({\n        username,\n        password,\n        clientMetadata,\n        config,\n        tokenOrchestrator,\n        authFlow: 'USER_SRP_AUTH',\n    });\n}\nexport async function handleCustomAuthFlowWithoutSRP(username, clientMetadata, config, tokenOrchestrator) {\n    const { userPoolClientId, userPoolId, userPoolEndpoint } = config;\n    const authParameters = {\n        USERNAME: username,\n    };\n    const deviceMetadata = await tokenOrchestrator.getDeviceMetadata(username);\n    if (deviceMetadata && deviceMetadata.deviceKey) {\n        authParameters.DEVICE_KEY = deviceMetadata.deviceKey;\n    }\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const jsonReq = {\n        AuthFlow: 'CUSTOM_AUTH',\n        AuthParameters: authParameters,\n        ClientMetadata: clientMetadata,\n        ClientId: userPoolClientId,\n        UserContextData,\n    };\n    const initiateAuth = createInitiateAuthClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const response = await initiateAuth({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.SignIn),\n    }, jsonReq);\n    const activeUsername = response.ChallengeParameters?.USERNAME ?? username;\n    setActiveSignInUsername(activeUsername);\n    if (response.ChallengeName === 'DEVICE_SRP_AUTH')\n        return handleDeviceSRPAuth({\n            username: activeUsername,\n            config,\n            clientMetadata,\n            session: response.Session,\n            tokenOrchestrator,\n        });\n    return response;\n}\nexport async function handleCustomSRPAuthFlow(username, password, clientMetadata, config, tokenOrchestrator) {\n    assertTokenProviderConfig(config);\n    const { userPoolId, userPoolClientId, userPoolEndpoint } = config;\n    const userPoolName = userPoolId?.split('_')[1] || '';\n    const authenticationHelper = await getAuthenticationHelper(userPoolName);\n    const authParameters = {\n        USERNAME: username,\n        SRP_A: authenticationHelper.A.toString(16),\n        CHALLENGE_NAME: 'SRP_A',\n    };\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const jsonReq = {\n        AuthFlow: 'CUSTOM_AUTH',\n        AuthParameters: authParameters,\n        ClientMetadata: clientMetadata,\n        ClientId: userPoolClientId,\n        UserContextData,\n    };\n    const initiateAuth = createInitiateAuthClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const { ChallengeParameters: challengeParameters, Session: session } = await initiateAuth({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.SignIn),\n    }, jsonReq);\n    const activeUsername = challengeParameters?.USERNAME ?? username;\n    setActiveSignInUsername(activeUsername);\n    return retryOnResourceNotFoundException(handlePasswordVerifierChallenge, [\n        password,\n        challengeParameters,\n        clientMetadata,\n        session,\n        authenticationHelper,\n        config,\n        tokenOrchestrator,\n    ], activeUsername, tokenOrchestrator);\n}\nasync function handleDeviceSRPAuth({ username, config, clientMetadata, session, tokenOrchestrator, }) {\n    const { userPoolId, userPoolEndpoint } = config;\n    const clientId = config.userPoolClientId;\n    const deviceMetadata = await tokenOrchestrator?.getDeviceMetadata(username);\n    assertDeviceMetadata(deviceMetadata);\n    const authenticationHelper = await getAuthenticationHelper(deviceMetadata.deviceGroupKey);\n    const challengeResponses = {\n        USERNAME: username,\n        SRP_A: authenticationHelper.A.toString(16),\n        DEVICE_KEY: deviceMetadata.deviceKey,\n    };\n    const jsonReqResponseChallenge = {\n        ChallengeName: 'DEVICE_SRP_AUTH',\n        ClientId: clientId,\n        ChallengeResponses: challengeResponses,\n        ClientMetadata: clientMetadata,\n        Session: session,\n    };\n    const respondToAuthChallenge = createRespondToAuthChallengeClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const { ChallengeParameters: respondedChallengeParameters, Session } = await respondToAuthChallenge({ region: getRegionFromUserPoolId(userPoolId) }, jsonReqResponseChallenge);\n    return handleDevicePasswordVerifier(username, respondedChallengeParameters, clientMetadata, Session, authenticationHelper, config, tokenOrchestrator);\n}\nasync function handleDevicePasswordVerifier(username, challengeParameters, clientMetadata, session, authenticationHelper, { userPoolId, userPoolClientId, userPoolEndpoint }, tokenOrchestrator) {\n    const deviceMetadata = await tokenOrchestrator?.getDeviceMetadata(username);\n    assertDeviceMetadata(deviceMetadata);\n    const serverBValue = new BigInteger(challengeParameters?.SRP_B, 16);\n    const salt = new BigInteger(challengeParameters?.SALT, 16);\n    const { deviceKey } = deviceMetadata;\n    const { deviceGroupKey } = deviceMetadata;\n    const hkdf = await authenticationHelper.getPasswordAuthenticationKey({\n        username: deviceMetadata.deviceKey,\n        password: deviceMetadata.randomPassword,\n        serverBValue,\n        salt,\n    });\n    const dateNow = getNowString();\n    const challengeResponses = {\n        USERNAME: challengeParameters?.USERNAME ?? username,\n        PASSWORD_CLAIM_SECRET_BLOCK: challengeParameters?.SECRET_BLOCK,\n        TIMESTAMP: dateNow,\n        PASSWORD_CLAIM_SIGNATURE: getSignatureString({\n            username: deviceKey,\n            userPoolName: deviceGroupKey,\n            challengeParameters,\n            dateNow,\n            hkdf,\n        }),\n        DEVICE_KEY: deviceKey,\n    };\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const jsonReqResponseChallenge = {\n        ChallengeName: 'DEVICE_PASSWORD_VERIFIER',\n        ClientId: userPoolClientId,\n        ChallengeResponses: challengeResponses,\n        Session: session,\n        ClientMetadata: clientMetadata,\n        UserContextData,\n    };\n    const respondToAuthChallenge = createRespondToAuthChallengeClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    return respondToAuthChallenge({ region: getRegionFromUserPoolId(userPoolId) }, jsonReqResponseChallenge);\n}\nexport async function handlePasswordVerifierChallenge(password, challengeParameters, clientMetadata, session, authenticationHelper, config, tokenOrchestrator) {\n    const { userPoolId, userPoolClientId, userPoolEndpoint } = config;\n    const userPoolName = userPoolId?.split('_')[1] || '';\n    const serverBValue = new BigInteger(challengeParameters?.SRP_B, 16);\n    const salt = new BigInteger(challengeParameters?.SALT, 16);\n    const username = challengeParameters?.USER_ID_FOR_SRP;\n    if (!username)\n        throw new AuthError({\n            name: 'EmptyUserIdForSRPException',\n            message: 'USER_ID_FOR_SRP was not found in challengeParameters',\n        });\n    const hkdf = await authenticationHelper.getPasswordAuthenticationKey({\n        username,\n        password,\n        serverBValue,\n        salt,\n    });\n    const dateNow = getNowString();\n    const challengeResponses = {\n        USERNAME: username,\n        PASSWORD_CLAIM_SECRET_BLOCK: challengeParameters?.SECRET_BLOCK,\n        TIMESTAMP: dateNow,\n        PASSWORD_CLAIM_SIGNATURE: getSignatureString({\n            username,\n            userPoolName,\n            challengeParameters,\n            dateNow,\n            hkdf,\n        }),\n    };\n    const deviceMetadata = await tokenOrchestrator.getDeviceMetadata(username);\n    if (deviceMetadata && deviceMetadata.deviceKey) {\n        challengeResponses.DEVICE_KEY = deviceMetadata.deviceKey;\n    }\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const jsonReqResponseChallenge = {\n        ChallengeName: 'PASSWORD_VERIFIER',\n        ChallengeResponses: challengeResponses,\n        ClientMetadata: clientMetadata,\n        Session: session,\n        ClientId: userPoolClientId,\n        UserContextData,\n    };\n    const respondToAuthChallenge = createRespondToAuthChallengeClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const response = await respondToAuthChallenge({ region: getRegionFromUserPoolId(userPoolId) }, jsonReqResponseChallenge);\n    if (response.ChallengeName === 'DEVICE_SRP_AUTH')\n        return handleDeviceSRPAuth({\n            username,\n            config,\n            clientMetadata,\n            session: response.Session,\n            tokenOrchestrator,\n        });\n    return response;\n}\nexport async function getSignInResult(params) {\n    const { challengeName, challengeParameters, availableChallenges } = params;\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    switch (challengeName) {\n        case 'CUSTOM_CHALLENGE':\n            return {\n                isSignedIn: false,\n                nextStep: {\n                    signInStep: 'CONFIRM_SIGN_IN_WITH_CUSTOM_CHALLENGE',\n                    additionalInfo: challengeParameters,\n                },\n            };\n        case 'MFA_SETUP': {\n            const { signInSession, username } = signInStore.getState();\n            const mfaSetupTypes = getMFATypes(parseMFATypes(challengeParameters.MFAS_CAN_SETUP)) || [];\n            const allowedMfaSetupTypes = getAllowedMfaSetupTypes(mfaSetupTypes);\n            const isTotpMfaSetupAvailable = allowedMfaSetupTypes.includes('TOTP');\n            const isEmailMfaSetupAvailable = allowedMfaSetupTypes.includes('EMAIL');\n            if (isTotpMfaSetupAvailable && isEmailMfaSetupAvailable) {\n                return {\n                    isSignedIn: false,\n                    nextStep: {\n                        signInStep: 'CONTINUE_SIGN_IN_WITH_MFA_SETUP_SELECTION',\n                        allowedMFATypes: allowedMfaSetupTypes,\n                    },\n                };\n            }\n            if (isEmailMfaSetupAvailable) {\n                return {\n                    isSignedIn: false,\n                    nextStep: {\n                        signInStep: 'CONTINUE_SIGN_IN_WITH_EMAIL_SETUP',\n                    },\n                };\n            }\n            if (isTotpMfaSetupAvailable) {\n                const associateSoftwareToken = createAssociateSoftwareTokenClient({\n                    endpointResolver: createCognitoUserPoolEndpointResolver({\n                        endpointOverride: authConfig.userPoolEndpoint,\n                    }),\n                });\n                const { Session, SecretCode: secretCode } = await associateSoftwareToken({ region: getRegionFromUserPoolId(authConfig.userPoolId) }, {\n                    Session: signInSession,\n                });\n                signInStore.dispatch({\n                    type: 'SET_SIGN_IN_SESSION',\n                    value: Session,\n                });\n                return {\n                    isSignedIn: false,\n                    nextStep: {\n                        signInStep: 'CONTINUE_SIGN_IN_WITH_TOTP_SETUP',\n                        totpSetupDetails: getTOTPSetupDetails(secretCode, username),\n                    },\n                };\n            }\n            throw new AuthError({\n                name: AuthErrorCodes.SignInException,\n                message: `Cannot initiate MFA setup from available types: ${mfaSetupTypes}`,\n            });\n        }\n        case 'NEW_PASSWORD_REQUIRED':\n            return {\n                isSignedIn: false,\n                nextStep: {\n                    signInStep: 'CONFIRM_SIGN_IN_WITH_NEW_PASSWORD_REQUIRED',\n                    missingAttributes: parseAttributes(challengeParameters.requiredAttributes),\n                },\n            };\n        case 'SELECT_MFA_TYPE':\n            return {\n                isSignedIn: false,\n                nextStep: {\n                    signInStep: 'CONTINUE_SIGN_IN_WITH_MFA_SELECTION',\n                    allowedMFATypes: getMFATypes(parseMFATypes(challengeParameters.MFAS_CAN_CHOOSE)),\n                },\n            };\n        case 'SMS_OTP':\n        case 'SMS_MFA':\n            return {\n                isSignedIn: false,\n                nextStep: {\n                    signInStep: 'CONFIRM_SIGN_IN_WITH_SMS_CODE',\n                    codeDeliveryDetails: {\n                        deliveryMedium: challengeParameters.CODE_DELIVERY_DELIVERY_MEDIUM,\n                        destination: challengeParameters.CODE_DELIVERY_DESTINATION,\n                    },\n                },\n            };\n        case 'SOFTWARE_TOKEN_MFA':\n            return {\n                isSignedIn: false,\n                nextStep: {\n                    signInStep: 'CONFIRM_SIGN_IN_WITH_TOTP_CODE',\n                },\n            };\n        case 'EMAIL_OTP':\n            return {\n                isSignedIn: false,\n                nextStep: {\n                    signInStep: 'CONFIRM_SIGN_IN_WITH_EMAIL_CODE',\n                    codeDeliveryDetails: {\n                        deliveryMedium: challengeParameters.CODE_DELIVERY_DELIVERY_MEDIUM,\n                        destination: challengeParameters.CODE_DELIVERY_DESTINATION,\n                    },\n                },\n            };\n        case 'WEB_AUTHN':\n            return handleWebAuthnSignInResult(challengeParameters);\n        case 'PASSWORD':\n        case 'PASSWORD_SRP':\n            return {\n                isSignedIn: false,\n                nextStep: {\n                    signInStep: 'CONFIRM_SIGN_IN_WITH_PASSWORD',\n                },\n            };\n        case 'SELECT_CHALLENGE':\n            return {\n                isSignedIn: false,\n                nextStep: {\n                    signInStep: 'CONTINUE_SIGN_IN_WITH_FIRST_FACTOR_SELECTION',\n                    availableChallenges,\n                },\n            };\n        case 'ADMIN_NO_SRP_AUTH':\n            break;\n        case 'DEVICE_PASSWORD_VERIFIER':\n            break;\n        case 'DEVICE_SRP_AUTH':\n            break;\n        case 'PASSWORD_VERIFIER':\n            break;\n    }\n    // TODO: remove this error message for production apps\n    throw new AuthError({\n        name: AuthErrorCodes.SignInException,\n        message: 'An error occurred during the sign in process. ' +\n            `${challengeName} challengeName returned by the underlying service was not addressed.`,\n    });\n}\nexport function getTOTPSetupDetails(secretCode, username) {\n    return {\n        sharedSecret: secretCode,\n        getSetupUri: (appName, accountName) => {\n            const totpUri = `otpauth://totp/${appName}:${accountName ?? username}?secret=${secretCode}&issuer=${appName}`;\n            return new AmplifyUrl(totpUri);\n        },\n    };\n}\nexport function getSignInResultFromError(errorName) {\n    if (errorName === InitiateAuthException.PasswordResetRequiredException) {\n        return {\n            isSignedIn: false,\n            nextStep: { signInStep: 'RESET_PASSWORD' },\n        };\n    }\n    else if (errorName === InitiateAuthException.UserNotConfirmedException) {\n        return {\n            isSignedIn: false,\n            nextStep: { signInStep: 'CONFIRM_SIGN_UP' },\n        };\n    }\n}\nexport function parseAttributes(attributes) {\n    if (!attributes)\n        return [];\n    const parsedAttributes = JSON.parse(attributes).map(att => att.includes(USER_ATTRIBUTES) ? att.replace(USER_ATTRIBUTES, '') : att);\n    return parsedAttributes;\n}\nexport function createAttributes(attributes) {\n    if (!attributes)\n        return {};\n    const newAttributes = {};\n    Object.entries(attributes).forEach(([key, value]) => {\n        if (value)\n            newAttributes[`${USER_ATTRIBUTES}${key}`] = value;\n    });\n    return newAttributes;\n}\nexport async function handleChallengeName(username, challengeName, session, challengeResponse, config, tokenOrchestrator, clientMetadata, options) {\n    const userAttributes = options?.userAttributes;\n    const deviceName = options?.friendlyDeviceName;\n    switch (challengeName) {\n        case 'WEB_AUTHN':\n        case 'SELECT_CHALLENGE':\n            if (challengeResponse === 'PASSWORD_SRP' ||\n                challengeResponse === 'PASSWORD') {\n                return {\n                    ChallengeName: challengeResponse,\n                    Session: session,\n                    $metadata: {},\n                };\n            }\n            return initiateSelectedChallenge({\n                username,\n                session,\n                selectedChallenge: challengeResponse,\n                config,\n                clientMetadata,\n            });\n        case 'SELECT_MFA_TYPE':\n            return handleSelectMFATypeChallenge({\n                challengeResponse,\n                clientMetadata,\n                session,\n                username,\n                config,\n            });\n        case 'MFA_SETUP':\n            return handleMFASetupChallenge({\n                challengeResponse,\n                clientMetadata,\n                session,\n                username,\n                deviceName,\n                config,\n            });\n        case 'NEW_PASSWORD_REQUIRED':\n            return handleCompleteNewPasswordChallenge({\n                challengeResponse,\n                clientMetadata,\n                session,\n                username,\n                requiredAttributes: userAttributes,\n                config,\n            });\n        case 'CUSTOM_CHALLENGE':\n            return retryOnResourceNotFoundException(handleCustomChallenge, [\n                {\n                    challengeResponse,\n                    clientMetadata,\n                    session,\n                    username,\n                    config,\n                    tokenOrchestrator,\n                },\n            ], username, tokenOrchestrator);\n        case 'SMS_MFA':\n        case 'SOFTWARE_TOKEN_MFA':\n        case 'SMS_OTP':\n        case 'EMAIL_OTP':\n            return handleMFAChallenge({\n                challengeName,\n                challengeResponse,\n                clientMetadata,\n                session,\n                username,\n                config,\n            });\n        case 'PASSWORD':\n            return handleSelectChallengeWithPassword(username, challengeResponse, clientMetadata, config, session);\n        case 'PASSWORD_SRP':\n            return handleSelectChallengeWithPasswordSRP(username, challengeResponse, // This is the actual password\n            clientMetadata, config, session, tokenOrchestrator);\n    }\n    // TODO: remove this error message for production apps\n    throw new AuthError({\n        name: AuthErrorCodes.SignInException,\n        message: `An error occurred during the sign in process.\n\t\t${challengeName} challengeName returned by the underlying service was not addressed.`,\n    });\n}\nexport function mapMfaType(mfa) {\n    let mfaType = 'SMS_MFA';\n    if (mfa === 'TOTP')\n        mfaType = 'SOFTWARE_TOKEN_MFA';\n    if (mfa === 'EMAIL')\n        mfaType = 'EMAIL_OTP';\n    return mfaType;\n}\nexport function getMFAType(type) {\n    if (type === 'SMS_MFA')\n        return 'SMS';\n    if (type === 'SOFTWARE_TOKEN_MFA')\n        return 'TOTP';\n    if (type === 'EMAIL_OTP')\n        return 'EMAIL';\n    // TODO: log warning for unknown MFA type\n}\nexport function getMFATypes(types) {\n    if (!types)\n        return undefined;\n    return types.map(getMFAType).filter(Boolean);\n}\nexport function parseMFATypes(mfa) {\n    if (!mfa)\n        return [];\n    return JSON.parse(mfa);\n}\nexport function getAllowedMfaSetupTypes(availableMfaSetupTypes) {\n    return availableMfaSetupTypes.filter(authMfaType => authMfaType === 'EMAIL' || authMfaType === 'TOTP');\n}\nexport async function assertUserNotAuthenticated() {\n    let authUser;\n    try {\n        authUser = await getCurrentUser();\n    }\n    catch (error) { }\n    if (authUser && authUser.userId && authUser.username) {\n        throw new AuthError({\n            name: USER_ALREADY_AUTHENTICATED_EXCEPTION,\n            message: 'There is already a signed in user.',\n            recoverySuggestion: 'Call signOut before calling signIn again.',\n        });\n    }\n}\n/**\n * This function is used to kick off the device management flow.\n *\n * If an error is thrown while generating a hash device or calling the `ConfirmDevice`\n * client, then this API will ignore the error and return undefined. Otherwise the authentication\n * flow will not complete and the user won't be able to be signed in.\n *\n * @returns DeviceMetadata | undefined\n */\nexport async function getNewDeviceMetadata({ userPoolId, userPoolEndpoint, newDeviceMetadata, accessToken, }) {\n    if (!newDeviceMetadata)\n        return undefined;\n    const userPoolName = userPoolId.split('_')[1] || '';\n    const authenticationHelper = await getAuthenticationHelper(userPoolName);\n    const deviceKey = newDeviceMetadata?.DeviceKey;\n    const deviceGroupKey = newDeviceMetadata?.DeviceGroupKey;\n    try {\n        await authenticationHelper.generateHashDevice(deviceGroupKey ?? '', deviceKey ?? '');\n    }\n    catch (errGenHash) {\n        // TODO: log error here\n        return undefined;\n    }\n    const deviceSecretVerifierConfig = {\n        Salt: base64Encoder.convert(getBytesFromHex(authenticationHelper.getSaltToHashDevices())),\n        PasswordVerifier: base64Encoder.convert(getBytesFromHex(authenticationHelper.getVerifierDevices())),\n    };\n    const randomPassword = authenticationHelper.getRandomPassword();\n    try {\n        const confirmDevice = createConfirmDeviceClient({\n            endpointResolver: createCognitoUserPoolEndpointResolver({\n                endpointOverride: userPoolEndpoint,\n            }),\n        });\n        await confirmDevice({ region: getRegionFromUserPoolId(userPoolId) }, {\n            AccessToken: accessToken,\n            DeviceName: await getDeviceName(),\n            DeviceKey: newDeviceMetadata?.DeviceKey,\n            DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n        });\n        return {\n            deviceKey,\n            deviceGroupKey,\n            randomPassword,\n        };\n    }\n    catch (error) {\n        // TODO: log error here\n        return undefined;\n    }\n}\n/**\n * It will retry the function if the error is a `ResourceNotFoundException` and\n * will clean the device keys stored in the storage mechanism.\n *\n */\nexport async function retryOnResourceNotFoundException(func, args, username, tokenOrchestrator) {\n    try {\n        return await func(...args);\n    }\n    catch (error) {\n        if (error instanceof AuthError &&\n            error.name === 'ResourceNotFoundException' &&\n            error.message.includes('Device does not exist.')) {\n            await tokenOrchestrator.clearDeviceMetadata(username);\n            return func(...args);\n        }\n        throw error;\n    }\n}\nexport function setActiveSignInUsername(username) {\n    const { dispatch } = signInStore;\n    dispatch({ type: 'SET_USERNAME', value: username });\n}\nexport function getActiveSignInUsername(username) {\n    const state = signInStore.getState();\n    return state.username ?? username;\n}\nexport async function handleMFAChallenge({ challengeName, challengeResponse, clientMetadata, session, username, config, }) {\n    const { userPoolId, userPoolClientId, userPoolEndpoint } = config;\n    const challengeResponses = {\n        USERNAME: username,\n    };\n    if (challengeName === 'EMAIL_OTP') {\n        challengeResponses.EMAIL_OTP_CODE = challengeResponse;\n    }\n    if (challengeName === 'SMS_MFA') {\n        challengeResponses.SMS_MFA_CODE = challengeResponse;\n    }\n    if (challengeName === 'SMS_OTP') {\n        challengeResponses.SMS_OTP_CODE = challengeResponse;\n    }\n    if (challengeName === 'SOFTWARE_TOKEN_MFA') {\n        challengeResponses.SOFTWARE_TOKEN_MFA_CODE = challengeResponse;\n    }\n    const userContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const jsonReq = {\n        ChallengeName: challengeName,\n        ChallengeResponses: challengeResponses,\n        Session: session,\n        ClientMetadata: clientMetadata,\n        ClientId: userPoolClientId,\n        UserContextData: userContextData,\n    };\n    const respondToAuthChallenge = createRespondToAuthChallengeClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    return respondToAuthChallenge({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn),\n    }, jsonReq);\n}\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { AuthErrorCodes } from '../../../common/AuthErrorStrings';\nimport { createRespondToAuthChallengeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { createCognitoUserPoolEndpointResolver } from '../../../providers/cognito/factories';\nimport { cacheCognitoTokens } from '../../../providers/cognito/tokenProvider/cacheTokens';\nimport { dispatchSignedInHubEvent } from '../../../providers/cognito/utils/dispatchSignedInHubEvent';\nimport { getNewDeviceMetadata, getSignInResult, } from '../../../providers/cognito/utils/signInHelpers';\nimport { setActiveSignInState, signInStore } from '../../../client/utils/store';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { getPasskey } from '../../utils/passkey';\nimport { PasskeyErrorCode, assertPasskeyError, } from '../../utils/passkey/errors';\nimport { AuthError } from '../../../errors/AuthError';\nexport async function handleWebAuthnSignInResult(challengeParameters) {\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { username, signInSession, signInDetails, challengeName } = signInStore.getState();\n    if (challengeName !== 'WEB_AUTHN' || !username) {\n        throw new AuthError({\n            name: AuthErrorCodes.SignInException,\n            message: 'Unable to proceed due to invalid sign in state.',\n        });\n    }\n    const { CREDENTIAL_REQUEST_OPTIONS: credentialRequestOptions } = challengeParameters;\n    assertPasskeyError(!!credentialRequestOptions, PasskeyErrorCode.InvalidPasskeyAuthenticationOptions);\n    const cred = await getPasskey(JSON.parse(credentialRequestOptions));\n    const respondToAuthChallenge = createRespondToAuthChallengeClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: authConfig.userPoolEndpoint,\n        }),\n    });\n    const { ChallengeName: nextChallengeName, ChallengeParameters: nextChallengeParameters, AuthenticationResult: authenticationResult, Session: nextSession, } = await respondToAuthChallenge({\n        region: getRegionFromUserPoolId(authConfig.userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn),\n    }, {\n        ChallengeName: 'WEB_AUTHN',\n        ChallengeResponses: {\n            USERNAME: username,\n            CREDENTIAL: JSON.stringify(cred),\n        },\n        ClientId: authConfig.userPoolClientId,\n        Session: signInSession,\n    });\n    setActiveSignInState({\n        signInSession: nextSession,\n        username,\n        challengeName: nextChallengeName,\n        signInDetails,\n    });\n    if (authenticationResult) {\n        await cacheCognitoTokens({\n            ...authenticationResult,\n            username,\n            NewDeviceMetadata: await getNewDeviceMetadata({\n                userPoolId: authConfig.userPoolId,\n                userPoolEndpoint: authConfig.userPoolEndpoint,\n                newDeviceMetadata: authenticationResult.NewDeviceMetadata,\n                accessToken: authenticationResult.AccessToken,\n            }),\n            signInDetails,\n        });\n        signInStore.dispatch({ type: 'RESET_STATE' });\n        await dispatchSignedInHubEvent();\n        return {\n            isSignedIn: true,\n            nextStep: { signInStep: 'DONE' },\n        };\n    }\n    if (nextChallengeName === 'WEB_AUTHN') {\n        throw new AuthError({\n            name: AuthErrorCodes.SignInException,\n            message: 'Sequential WEB_AUTHN challenges returned from underlying service cannot be handled.',\n        });\n    }\n    return getSignInResult({\n        challengeName: nextChallengeName,\n        challengeParameters: nextChallengeParameters,\n    });\n}\n","/* eslint-disable */\n// @ts-nocheck -> BigInteger is already a vended utility\n// A small implementation of BigInteger based on http://www-cs-students.stanford.edu/~tjw/jsbn/\n//\n// All public methods have been removed except the following:\n//   new BigInteger(a, b) (only radix 2, 4, 8, 16 and 32 supported)\n//   toString (only radix 2, 4, 8, 16 and 32 supported)\n//   negate\n//   abs\n//   compareTo\n//   bitLength\n//   mod\n//   equals\n//   add\n//   subtract\n//   multiply\n//   divide\n//   modPow\nexport default BigInteger;\n/*\n * Copyright (c) 2003-2005  Tom Wu\n * All Rights Reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS-IS\" AND WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY\n * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n *\n * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,\n * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER\n * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF\n * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT\n * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n *\n * In addition, the following condition applies:\n *\n * All redistributions must retain an intact copy of this copyright notice\n * and disclaimer.\n */\n// (public) Constructor\nfunction BigInteger(a, b) {\n    if (a != null)\n        this.fromString(a, b);\n}\n// return new, unset BigInteger\nfunction nbi() {\n    return new BigInteger(null, null);\n}\n// Bits per digit\nlet dbits;\n// JavaScript engine analysis\nconst canary = 0xdeadbeefcafe;\nconst j_lm = (canary & 0xffffff) === 0xefcafe;\n// am: Compute w_j += (x*this_i), propagate carries,\n// c is initial carry, returns final carry.\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n// We need to select the fastest one that works in this environment.\n// am1: use a single mult and divide to get the high bits,\n// max digit bits should be 26 because\n// max internal value = 2*dvalue^2-2*dvalue (< 2^53)\nfunction am1(i, x, w, j, c, n) {\n    while (--n >= 0) {\n        const v = x * this[i++] + w[j] + c;\n        c = Math.floor(v / 0x4000000);\n        w[j++] = v & 0x3ffffff;\n    }\n    return c;\n}\n// am2 avoids a big mult-and-extract completely.\n// Max digit bits should be <= 30 because we do bitwise ops\n// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\nfunction am2(i, x, w, j, c, n) {\n    const xl = x & 0x7fff;\n    const xh = x >> 15;\n    while (--n >= 0) {\n        let l = this[i] & 0x7fff;\n        const h = this[i++] >> 15;\n        const m = xh * l + h * xl;\n        l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);\n        c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\n        w[j++] = l & 0x3fffffff;\n    }\n    return c;\n}\n// Alternately, set max digit bits to 28 since some\n// browsers slow down when dealing with 32-bit numbers.\nfunction am3(i, x, w, j, c, n) {\n    const xl = x & 0x3fff;\n    const xh = x >> 14;\n    while (--n >= 0) {\n        let l = this[i] & 0x3fff;\n        const h = this[i++] >> 14;\n        const m = xh * l + h * xl;\n        l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\n        c = (l >> 28) + (m >> 14) + xh * h;\n        w[j++] = l & 0xfffffff;\n    }\n    return c;\n}\nconst inBrowser = typeof navigator !== 'undefined';\nif (inBrowser && j_lm && navigator.appName === 'Microsoft Internet Explorer') {\n    BigInteger.prototype.am = am2;\n    dbits = 30;\n}\nelse if (inBrowser && j_lm && navigator.appName !== 'Netscape') {\n    BigInteger.prototype.am = am1;\n    dbits = 26;\n}\nelse {\n    // Mozilla/Netscape seems to prefer am3\n    BigInteger.prototype.am = am3;\n    dbits = 28;\n}\nBigInteger.prototype.DB = dbits;\nBigInteger.prototype.DM = (1 << dbits) - 1;\nBigInteger.prototype.DV = 1 << dbits;\nconst BI_FP = 52;\nBigInteger.prototype.FV = Math.pow(2, BI_FP);\nBigInteger.prototype.F1 = BI_FP - dbits;\nBigInteger.prototype.F2 = 2 * dbits - BI_FP;\n// Digit conversions\nconst BI_RM = '0123456789abcdefghijklmnopqrstuvwxyz';\nconst BI_RC = [];\nlet rr, vv;\nrr = '0'.charCodeAt(0);\nfor (vv = 0; vv <= 9; ++vv)\n    BI_RC[rr++] = vv;\nrr = 'a'.charCodeAt(0);\nfor (vv = 10; vv < 36; ++vv)\n    BI_RC[rr++] = vv;\nrr = 'A'.charCodeAt(0);\nfor (vv = 10; vv < 36; ++vv)\n    BI_RC[rr++] = vv;\nfunction int2char(n) {\n    return BI_RM.charAt(n);\n}\nfunction intAt(s, i) {\n    const c = BI_RC[s.charCodeAt(i)];\n    return c == null ? -1 : c;\n}\n// (protected) copy this to r\nfunction bnpCopyTo(r) {\n    for (let i = this.t - 1; i >= 0; --i)\n        r[i] = this[i];\n    r.t = this.t;\n    r.s = this.s;\n}\n// (protected) set from integer value x, -DV <= x < DV\nfunction bnpFromInt(x) {\n    this.t = 1;\n    this.s = x < 0 ? -1 : 0;\n    if (x > 0)\n        this[0] = x;\n    else if (x < -1)\n        this[0] = x + this.DV;\n    else\n        this.t = 0;\n}\n// return bigint initialized to value\nfunction nbv(i) {\n    const r = nbi();\n    r.fromInt(i);\n    return r;\n}\n// (protected) set from string and radix\nfunction bnpFromString(s, b) {\n    let k;\n    if (b === 16)\n        k = 4;\n    else if (b === 8)\n        k = 3;\n    else if (b === 2)\n        k = 1;\n    else if (b === 32)\n        k = 5;\n    else if (b === 4)\n        k = 2;\n    else\n        throw new Error('Only radix 2, 4, 8, 16, 32 are supported');\n    this.t = 0;\n    this.s = 0;\n    let i = s.length;\n    let mi = false;\n    let sh = 0;\n    while (--i >= 0) {\n        const x = intAt(s, i);\n        if (x < 0) {\n            if (s.charAt(i) === '-')\n                mi = true;\n            continue;\n        }\n        mi = false;\n        if (sh === 0)\n            this[this.t++] = x;\n        else if (sh + k > this.DB) {\n            this[this.t - 1] |= (x & ((1 << (this.DB - sh)) - 1)) << sh;\n            this[this.t++] = x >> (this.DB - sh);\n        }\n        else\n            this[this.t - 1] |= x << sh;\n        sh += k;\n        if (sh >= this.DB)\n            sh -= this.DB;\n    }\n    this.clamp();\n    if (mi)\n        BigInteger.ZERO.subTo(this, this);\n}\n// (protected) clamp off excess high words\nfunction bnpClamp() {\n    const c = this.s & this.DM;\n    while (this.t > 0 && this[this.t - 1] == c)\n        --this.t;\n}\n// (public) return string representation in given radix\nfunction bnToString(b) {\n    if (this.s < 0)\n        return '-' + this.negate().toString(b);\n    let k;\n    if (b == 16)\n        k = 4;\n    else if (b === 8)\n        k = 3;\n    else if (b === 2)\n        k = 1;\n    else if (b === 32)\n        k = 5;\n    else if (b === 4)\n        k = 2;\n    else\n        throw new Error('Only radix 2, 4, 8, 16, 32 are supported');\n    const km = (1 << k) - 1;\n    let d;\n    let m = false;\n    let r = '';\n    let i = this.t;\n    let p = this.DB - ((i * this.DB) % k);\n    if (i-- > 0) {\n        if (p < this.DB && (d = this[i] >> p) > 0) {\n            m = true;\n            r = int2char(d);\n        }\n        while (i >= 0) {\n            if (p < k) {\n                d = (this[i] & ((1 << p) - 1)) << (k - p);\n                d |= this[--i] >> (p += this.DB - k);\n            }\n            else {\n                d = (this[i] >> (p -= k)) & km;\n                if (p <= 0) {\n                    p += this.DB;\n                    --i;\n                }\n            }\n            if (d > 0)\n                m = true;\n            if (m)\n                r += int2char(d);\n        }\n    }\n    return m ? r : '0';\n}\n// (public) -this\nfunction bnNegate() {\n    const r = nbi();\n    BigInteger.ZERO.subTo(this, r);\n    return r;\n}\n// (public) |this|\nfunction bnAbs() {\n    return this.s < 0 ? this.negate() : this;\n}\n// (public) return + if this > a, - if this < a, 0 if equal\nfunction bnCompareTo(a) {\n    let r = this.s - a.s;\n    if (r != 0)\n        return r;\n    let i = this.t;\n    r = i - a.t;\n    if (r != 0)\n        return this.s < 0 ? -r : r;\n    while (--i >= 0)\n        if ((r = this[i] - a[i]) != 0)\n            return r;\n    return 0;\n}\n// returns bit length of the integer x\nfunction nbits(x) {\n    let r = 1;\n    let t;\n    if ((t = x >>> 16) !== 0) {\n        x = t;\n        r += 16;\n    }\n    if ((t = x >> 8) !== 0) {\n        x = t;\n        r += 8;\n    }\n    if ((t = x >> 4) !== 0) {\n        x = t;\n        r += 4;\n    }\n    if ((t = x >> 2) !== 0) {\n        x = t;\n        r += 2;\n    }\n    if ((t = x >> 1) !== 0) {\n        x = t;\n        r += 1;\n    }\n    return r;\n}\n// (public) return the number of bits in \"this\"\nfunction bnBitLength() {\n    if (this.t <= 0)\n        return 0;\n    return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM));\n}\n// (protected) r = this << n*DB\nfunction bnpDLShiftTo(n, r) {\n    let i;\n    for (i = this.t - 1; i >= 0; --i)\n        r[i + n] = this[i];\n    for (i = n - 1; i >= 0; --i)\n        r[i] = 0;\n    r.t = this.t + n;\n    r.s = this.s;\n}\n// (protected) r = this >> n*DB\nfunction bnpDRShiftTo(n, r) {\n    for (let i = n; i < this.t; ++i)\n        r[i - n] = this[i];\n    r.t = Math.max(this.t - n, 0);\n    r.s = this.s;\n}\n// (protected) r = this << n\nfunction bnpLShiftTo(n, r) {\n    const bs = n % this.DB;\n    const cbs = this.DB - bs;\n    const bm = (1 << cbs) - 1;\n    const ds = Math.floor(n / this.DB);\n    let c = (this.s << bs) & this.DM;\n    let i;\n    for (i = this.t - 1; i >= 0; --i) {\n        r[i + ds + 1] = (this[i] >> cbs) | c;\n        c = (this[i] & bm) << bs;\n    }\n    for (i = ds - 1; i >= 0; --i)\n        r[i] = 0;\n    r[ds] = c;\n    r.t = this.t + ds + 1;\n    r.s = this.s;\n    r.clamp();\n}\n// (protected) r = this >> n\nfunction bnpRShiftTo(n, r) {\n    r.s = this.s;\n    const ds = Math.floor(n / this.DB);\n    if (ds >= this.t) {\n        r.t = 0;\n        return;\n    }\n    const bs = n % this.DB;\n    const cbs = this.DB - bs;\n    const bm = (1 << bs) - 1;\n    r[0] = this[ds] >> bs;\n    for (let i = ds + 1; i < this.t; ++i) {\n        r[i - ds - 1] |= (this[i] & bm) << cbs;\n        r[i - ds] = this[i] >> bs;\n    }\n    if (bs > 0)\n        r[this.t - ds - 1] |= (this.s & bm) << cbs;\n    r.t = this.t - ds;\n    r.clamp();\n}\n// (protected) r = this - a\nfunction bnpSubTo(a, r) {\n    let i = 0;\n    let c = 0;\n    const m = Math.min(a.t, this.t);\n    while (i < m) {\n        c += this[i] - a[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n    }\n    if (a.t < this.t) {\n        c -= a.s;\n        while (i < this.t) {\n            c += this[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        c += this.s;\n    }\n    else {\n        c += this.s;\n        while (i < a.t) {\n            c -= a[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        c -= a.s;\n    }\n    r.s = c < 0 ? -1 : 0;\n    if (c < -1)\n        r[i++] = this.DV + c;\n    else if (c > 0)\n        r[i++] = c;\n    r.t = i;\n    r.clamp();\n}\n// (protected) r = this * a, r != this,a (HAC 14.12)\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyTo(a, r) {\n    const x = this.abs();\n    const y = a.abs();\n    let i = x.t;\n    r.t = i + y.t;\n    while (--i >= 0)\n        r[i] = 0;\n    for (i = 0; i < y.t; ++i)\n        r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\n    r.s = 0;\n    r.clamp();\n    if (this.s !== a.s)\n        BigInteger.ZERO.subTo(r, r);\n}\n// (protected) r = this^2, r != this (HAC 14.16)\nfunction bnpSquareTo(r) {\n    const x = this.abs();\n    let i = (r.t = 2 * x.t);\n    while (--i >= 0)\n        r[i] = 0;\n    for (i = 0; i < x.t - 1; ++i) {\n        const c = x.am(i, x[i], r, 2 * i, 0, 1);\n        if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >=\n            x.DV) {\n            r[i + x.t] -= x.DV;\n            r[i + x.t + 1] = 1;\n        }\n    }\n    if (r.t > 0)\n        r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\n    r.s = 0;\n    r.clamp();\n}\n// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n// r != q, this != m.  q or r may be null.\nfunction bnpDivRemTo(m, q, r) {\n    const pm = m.abs();\n    if (pm.t <= 0)\n        return;\n    const pt = this.abs();\n    if (pt.t < pm.t) {\n        if (q != null)\n            q.fromInt(0);\n        if (r != null)\n            this.copyTo(r);\n        return;\n    }\n    if (r === null)\n        r = nbi();\n    const y = nbi();\n    const ts = this.s;\n    const ms = m.s;\n    const nsh = this.DB - nbits(pm[pm.t - 1]);\n    // normalize modulus\n    if (nsh > 0) {\n        pm.lShiftTo(nsh, y);\n        pt.lShiftTo(nsh, r);\n    }\n    else {\n        pm.copyTo(y);\n        pt.copyTo(r);\n    }\n    const ys = y.t;\n    const y0 = y[ys - 1];\n    if (y0 === 0)\n        return;\n    const yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);\n    const d1 = this.FV / yt;\n    const d2 = (1 << this.F1) / yt;\n    const e = 1 << this.F2;\n    let i = r.t;\n    let j = i - ys;\n    const t = q === null ? nbi() : q;\n    y.dlShiftTo(j, t);\n    if (r.compareTo(t) >= 0) {\n        r[r.t++] = 1;\n        r.subTo(t, r);\n    }\n    BigInteger.ONE.dlShiftTo(ys, t);\n    t.subTo(y, y);\n    // \"negative\" y so we can replace sub with am later\n    while (y.t < ys)\n        y[y.t++] = 0;\n    while (--j >= 0) {\n        // Estimate quotient digit\n        let qd = r[--i] === y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\n        if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {\n            // Try it out\n            y.dlShiftTo(j, t);\n            r.subTo(t, r);\n            while (r[i] < --qd)\n                r.subTo(t, r);\n        }\n    }\n    if (q !== null) {\n        r.drShiftTo(ys, q);\n        if (ts !== ms)\n            BigInteger.ZERO.subTo(q, q);\n    }\n    r.t = ys;\n    r.clamp();\n    if (nsh > 0)\n        r.rShiftTo(nsh, r);\n    // Denormalize remainder\n    if (ts < 0)\n        BigInteger.ZERO.subTo(r, r);\n}\n// (public) this mod a\nfunction bnMod(a) {\n    const r = nbi();\n    this.abs().divRemTo(a, null, r);\n    if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0)\n        a.subTo(r, r);\n    return r;\n}\n// (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n// justification:\n//         xy == 1 (mod m)\n//         xy =  1+km\n//   xy(2-xy) = (1+km)(1-km)\n// x[y(2-xy)] = 1-k^2m^2\n// x[y(2-xy)] == 1 (mod m^2)\n// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n// JS multiply \"overflows\" differently from C/C++, so care is needed here.\nfunction bnpInvDigit() {\n    if (this.t < 1)\n        return 0;\n    const x = this[0];\n    if ((x & 1) === 0)\n        return 0;\n    let y = x & 3;\n    // y == 1/x mod 2^2\n    y = (y * (2 - (x & 0xf) * y)) & 0xf;\n    // y == 1/x mod 2^4\n    y = (y * (2 - (x & 0xff) * y)) & 0xff;\n    // y == 1/x mod 2^8\n    y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff;\n    // y == 1/x mod 2^16\n    // last step - calculate inverse mod DV directly;\n    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n    y = (y * (2 - ((x * y) % this.DV))) % this.DV;\n    // y == 1/x mod 2^dbits\n    // we really want the negative inverse, and -DV < y < DV\n    return y > 0 ? this.DV - y : -y;\n}\nfunction bnEquals(a) {\n    return this.compareTo(a) === 0;\n}\n// (protected) r = this + a\nfunction bnpAddTo(a, r) {\n    let i = 0;\n    let c = 0;\n    const m = Math.min(a.t, this.t);\n    while (i < m) {\n        c += this[i] + a[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n    }\n    if (a.t < this.t) {\n        c += a.s;\n        while (i < this.t) {\n            c += this[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        c += this.s;\n    }\n    else {\n        c += this.s;\n        while (i < a.t) {\n            c += a[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        c += a.s;\n    }\n    r.s = c < 0 ? -1 : 0;\n    if (c > 0)\n        r[i++] = c;\n    else if (c < -1)\n        r[i++] = this.DV + c;\n    r.t = i;\n    r.clamp();\n}\n// (public) this + a\nfunction bnAdd(a) {\n    const r = nbi();\n    this.addTo(a, r);\n    return r;\n}\n// (public) this - a\nfunction bnSubtract(a) {\n    const r = nbi();\n    this.subTo(a, r);\n    return r;\n}\n// (public) this * a\nfunction bnMultiply(a) {\n    const r = nbi();\n    this.multiplyTo(a, r);\n    return r;\n}\n// (public) this / a\nfunction bnDivide(a) {\n    const r = nbi();\n    this.divRemTo(a, r, null);\n    return r;\n}\n// Montgomery reduction\nfunction Montgomery(m) {\n    this.m = m;\n    this.mp = m.invDigit();\n    this.mpl = this.mp & 0x7fff;\n    this.mph = this.mp >> 15;\n    this.um = (1 << (m.DB - 15)) - 1;\n    this.mt2 = 2 * m.t;\n}\n// xR mod m\nfunction montConvert(x) {\n    const r = nbi();\n    x.abs().dlShiftTo(this.m.t, r);\n    r.divRemTo(this.m, null, r);\n    if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0)\n        this.m.subTo(r, r);\n    return r;\n}\n// x/R mod m\nfunction montRevert(x) {\n    const r = nbi();\n    x.copyTo(r);\n    this.reduce(r);\n    return r;\n}\n// x = x/R mod m (HAC 14.32)\nfunction montReduce(x) {\n    while (x.t <= this.mt2)\n        // pad x so am has enough room later\n        x[x.t++] = 0;\n    for (let i = 0; i < this.m.t; ++i) {\n        // faster way of calculating u0 = x[i]*mp mod DV\n        let j = x[i] & 0x7fff;\n        const u0 = (j * this.mpl +\n            (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) &\n            x.DM;\n        // use am to combine the multiply-shift-add into one call\n        j = i + this.m.t;\n        x[j] += this.m.am(0, u0, x, i, 0, this.m.t);\n        // propagate carry\n        while (x[j] >= x.DV) {\n            x[j] -= x.DV;\n            x[++j]++;\n        }\n    }\n    x.clamp();\n    x.drShiftTo(this.m.t, x);\n    if (x.compareTo(this.m) >= 0)\n        x.subTo(this.m, x);\n}\n// r = \"x^2/R mod m\"; x != r\nfunction montSqrTo(x, r) {\n    x.squareTo(r);\n    this.reduce(r);\n}\n// r = \"xy/R mod m\"; x,y != r\nfunction montMulTo(x, y, r) {\n    x.multiplyTo(y, r);\n    this.reduce(r);\n}\nMontgomery.prototype.convert = montConvert;\nMontgomery.prototype.revert = montRevert;\nMontgomery.prototype.reduce = montReduce;\nMontgomery.prototype.mulTo = montMulTo;\nMontgomery.prototype.sqrTo = montSqrTo;\n// (public) this^e % m (HAC 14.85)\nfunction bnModPow(e, m, callback) {\n    let i = e.bitLength();\n    let k;\n    let r = nbv(1);\n    const z = new Montgomery(m);\n    if (i <= 0)\n        return r;\n    else if (i < 18)\n        k = 1;\n    else if (i < 48)\n        k = 3;\n    else if (i < 144)\n        k = 4;\n    else if (i < 768)\n        k = 5;\n    else\n        k = 6;\n    // precomputation\n    const g = [];\n    let n = 3;\n    const k1 = k - 1;\n    const km = (1 << k) - 1;\n    g[1] = z.convert(this);\n    if (k > 1) {\n        const g2 = nbi();\n        z.sqrTo(g[1], g2);\n        while (n <= km) {\n            g[n] = nbi();\n            z.mulTo(g2, g[n - 2], g[n]);\n            n += 2;\n        }\n    }\n    let j = e.t - 1;\n    let w;\n    let is1 = true;\n    let r2 = nbi();\n    let t;\n    i = nbits(e[j]) - 1;\n    while (j >= 0) {\n        if (i >= k1)\n            w = (e[j] >> (i - k1)) & km;\n        else {\n            w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i);\n            if (j > 0)\n                w |= e[j - 1] >> (this.DB + i - k1);\n        }\n        n = k;\n        while ((w & 1) === 0) {\n            w >>= 1;\n            --n;\n        }\n        if ((i -= n) < 0) {\n            i += this.DB;\n            --j;\n        }\n        if (is1) {\n            // ret == 1, don't bother squaring or multiplying it\n            g[w].copyTo(r);\n            is1 = false;\n        }\n        else {\n            while (n > 1) {\n                z.sqrTo(r, r2);\n                z.sqrTo(r2, r);\n                n -= 2;\n            }\n            if (n > 0)\n                z.sqrTo(r, r2);\n            else {\n                t = r;\n                r = r2;\n                r2 = t;\n            }\n            z.mulTo(r2, g[w], r);\n        }\n        while (j >= 0 && (e[j] & (1 << i)) === 0) {\n            z.sqrTo(r, r2);\n            t = r;\n            r = r2;\n            r2 = t;\n            if (--i < 0) {\n                i = this.DB - 1;\n                --j;\n            }\n        }\n    }\n    const result = z.revert(r);\n    callback(null, result);\n    return result;\n}\n// protected\nBigInteger.prototype.copyTo = bnpCopyTo;\nBigInteger.prototype.fromInt = bnpFromInt;\nBigInteger.prototype.fromString = bnpFromString;\nBigInteger.prototype.clamp = bnpClamp;\nBigInteger.prototype.dlShiftTo = bnpDLShiftTo;\nBigInteger.prototype.drShiftTo = bnpDRShiftTo;\nBigInteger.prototype.lShiftTo = bnpLShiftTo;\nBigInteger.prototype.rShiftTo = bnpRShiftTo;\nBigInteger.prototype.subTo = bnpSubTo;\nBigInteger.prototype.multiplyTo = bnpMultiplyTo;\nBigInteger.prototype.squareTo = bnpSquareTo;\nBigInteger.prototype.divRemTo = bnpDivRemTo;\nBigInteger.prototype.invDigit = bnpInvDigit;\nBigInteger.prototype.addTo = bnpAddTo;\n// public\nBigInteger.prototype.toString = bnToString;\nBigInteger.prototype.negate = bnNegate;\nBigInteger.prototype.abs = bnAbs;\nBigInteger.prototype.compareTo = bnCompareTo;\nBigInteger.prototype.bitLength = bnBitLength;\nBigInteger.prototype.mod = bnMod;\nBigInteger.prototype.equals = bnEquals;\nBigInteger.prototype.add = bnAdd;\nBigInteger.prototype.subtract = bnSubtract;\nBigInteger.prototype.multiply = bnMultiply;\nBigInteger.prototype.divide = bnDivide;\nBigInteger.prototype.modPow = bnModPow;\n// \"constants\"\nBigInteger.ZERO = nbv(0);\nBigInteger.ONE = nbv(1);\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport const INIT_N = 'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1' +\n    '29024E088A67CC74020BBEA63B139B22514A08798E3404DD' +\n    'EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245' +\n    'E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED' +\n    'EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D' +\n    'C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F' +\n    '83655D23DCA3AD961C62F356208552BB9ED529077096966D' +\n    '670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B' +\n    'E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9' +\n    'DE2BCBF6955817183995497CEA956AE515D2261898FA0510' +\n    '15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64' +\n    'ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7' +\n    'ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B' +\n    'F12FFA06D98A0864D87602733EC86A64521F2B18177B200C' +\n    'BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31' +\n    '43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF';\nexport const SHORT_TO_HEX = {};\nexport const HEX_TO_SHORT = {};\nfor (let i = 0; i < 256; i++) {\n    let encodedByte = i.toString(16).toLowerCase();\n    if (encodedByte.length === 1) {\n        encodedByte = `0${encodedByte}`;\n    }\n    SHORT_TO_HEX[i] = encodedByte;\n    HEX_TO_SHORT[encodedByte] = i;\n}\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { SHORT_TO_HEX } from './constants';\n/**\n * Converts a Uint8Array of binary data to a hexadecimal encoded string.\n *\n * @param bytes The binary data to encode\n */\nexport const getHexFromBytes = (bytes) => {\n    let out = '';\n    for (let i = 0; i < bytes.byteLength; i++) {\n        out += SHORT_TO_HEX[bytes[i]];\n    }\n    return out;\n};\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Sha256 } from '@aws-crypto/sha256-js';\nimport { getHexFromBytes } from './getHexFromBytes';\n/**\n * Calculate a hash from a `SourceData`\n * @param {SourceData} data Value to hash.\n * @returns {string} Hex-encoded hash.\n * @private\n */\nexport const getHashFromData = (data) => {\n    const sha256 = new Sha256();\n    sha256.update(data);\n    const hashedData = sha256.digestSync();\n    const hashHexFromUint8 = getHexFromBytes(hashedData);\n    return new Array(64 - hashHexFromUint8.length).join('0') + hashHexFromUint8;\n};\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getBytesFromHex } from './getBytesFromHex';\nimport { getHashFromData } from './getHashFromData';\n/**\n * Calculate a hash from a hex string\n * @param {string} hexStr Value to hash.\n * @returns {string} Hex-encoded hash.\n * @private\n */\nexport const getHashFromHex = (hexStr) => getHashFromData(getBytesFromHex(hexStr));\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { BigInteger } from './BigInteger';\n/**\n * Tests if a hex string has it most significant bit set (case-insensitive regex)\n */\nconst HEX_MSB_REGEX = /^[89a-f]/i;\n/**\n * Returns an unambiguous, even-length hex string of the two's complement encoding of an integer.\n *\n * It is compatible with the hex encoding of Java's BigInteger's toByteArray(), wich returns a\n * byte array containing the two's-complement representation of a BigInteger. The array contains\n * the minimum number of bytes required to represent the BigInteger, including at least one sign bit.\n *\n * Examples showing how ambiguity is avoided by left padding with:\n * \t\"00\" (for positive values where the most-significant-bit is set)\n *  \"FF\" (for negative values where the most-significant-bit is set)\n *\n * padHex(bigInteger.fromInt(-236))  === \"FF14\"\n * padHex(bigInteger.fromInt(20))    === \"14\"\n *\n * padHex(bigInteger.fromInt(-200))  === \"FF38\"\n * padHex(bigInteger.fromInt(56))    === \"38\"\n *\n * padHex(bigInteger.fromInt(-20))   === \"EC\"\n * padHex(bigInteger.fromInt(236))   === \"00EC\"\n *\n * padHex(bigInteger.fromInt(-56))   === \"C8\"\n * padHex(bigInteger.fromInt(200))   === \"00C8\"\n *\n * @param {AuthBigInteger} bigInt Number to encode.\n * @returns {String} even-length hex string of the two's complement encoding.\n */\nexport const getPaddedHex = (bigInt) => {\n    if (!(bigInt instanceof BigInteger)) {\n        throw new Error('Not a BigInteger');\n    }\n    const isNegative = bigInt.compareTo(BigInteger.ZERO) < 0;\n    /* Get a hex string for abs(bigInt) */\n    let hexStr = bigInt.abs().toString(16);\n    /* Pad hex to even length if needed */\n    hexStr = hexStr.length % 2 !== 0 ? `0${hexStr}` : hexStr;\n    /* Prepend \"00\" if the most significant bit is set */\n    hexStr = HEX_MSB_REGEX.test(hexStr) ? `00${hexStr}` : hexStr;\n    if (isNegative) {\n        /* Flip the bits of the representation */\n        const invertedNibbles = hexStr\n            .split('')\n            .map((x) => {\n            const invertedNibble = ~parseInt(x, 16) & 0xf;\n            return '0123456789ABCDEF'.charAt(invertedNibble);\n        })\n            .join('');\n        /* After flipping the bits, add one to get the 2's complement representation */\n        const flippedBitsBI = new BigInteger(invertedNibbles, 16).add(BigInteger.ONE);\n        hexStr = flippedBitsBI.toString(16);\n        /*\n        For hex strings starting with 'FF8', 'FF' can be dropped, e.g. 0xFFFF80=0xFF80=0x80=-128\n\n        Any sequence of '1' bits on the left can always be substituted with a single '1' bit\n        without changing the represented value.\n\n        This only happens in the case when the input is 80...00\n        */\n        if (hexStr.toUpperCase().startsWith('FF8')) {\n            hexStr = hexStr.substring(2);\n        }\n    }\n    return hexStr;\n};\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { cryptoSecureRandomInt } from './cryptoSecureRandomInt';\n/**\n * Hex encoding strategy.\n * Converts a word array to a hex string.\n * @param {WordArray} wordArray The word array.\n * @return {string} The hex string.\n * @static\n */\nfunction hexStringify(wordArray) {\n    // Shortcuts\n    const { words } = wordArray;\n    const { sigBytes } = wordArray;\n    // Convert\n    const hexChars = [];\n    for (let i = 0; i < sigBytes; i++) {\n        const bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n        hexChars.push((bite >>> 4).toString(16));\n        hexChars.push((bite & 0x0f).toString(16));\n    }\n    return hexChars.join('');\n}\nexport class WordArray {\n    constructor(words, sigBytes) {\n        this.words = [];\n        let Words = words;\n        Words = this.words = Words || [];\n        if (sigBytes !== undefined) {\n            this.sigBytes = sigBytes;\n        }\n        else {\n            this.sigBytes = Words.length * 4;\n        }\n    }\n    random(nBytes) {\n        const words = [];\n        for (let i = 0; i < nBytes; i += 4) {\n            words.push(cryptoSecureRandomInt());\n        }\n        return new WordArray(words, nBytes);\n    }\n    toString() {\n        return hexStringify(this);\n    }\n}\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getCrypto } from './globalHelpers';\n/*\n * Cryptographically secure pseudorandom number generator\n * As Math.random() is cryptographically not safe to use\n */\nexport function cryptoSecureRandomInt() {\n    const crypto = getCrypto();\n    const randomResult = crypto.getRandomValues(new Uint32Array(1))[0];\n    return randomResult;\n}\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { WordArray } from '@aws-amplify/core/internals/utils';\nimport { getBytesFromHex } from './getBytesFromHex';\n/**\n * Returns a Uint8Array with a sequence of random nBytes\n *\n * @param {number} nBytes\n * @returns {Uint8Array} fixed-length sequence of random bytes\n */\nexport const getRandomBytes = (nBytes) => {\n    const str = new WordArray().random(nBytes).toString();\n    return getBytesFromHex(str);\n};\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AuthError } from '../../../../../errors/AuthError';\nimport { textEncoder } from '../../textEncoder';\nimport { BigInteger } from '../BigInteger';\nimport { calculateS, calculateU } from '../calculate';\nimport { getBytesFromHex } from '../getBytesFromHex';\nimport { getHashFromData } from '../getHashFromData';\nimport { getHashFromHex } from '../getHashFromHex';\nimport { getHexFromBytes } from '../getHexFromBytes';\nimport { getHkdfKey } from '../getHkdfKey';\nimport { getPaddedHex } from '../getPaddedHex';\nimport { getRandomBytes } from '../getRandomBytes';\nimport { getRandomString } from '../getRandomString';\n/** @class */\nexport default class AuthenticationHelper {\n    constructor({ userPoolName, a, g, A, N, }) {\n        this.encoder = textEncoder;\n        this.userPoolName = userPoolName;\n        this.a = a;\n        this.g = g;\n        this.A = A;\n        this.N = N;\n        this.k = new BigInteger(getHashFromHex(`${getPaddedHex(N)}${getPaddedHex(g)}`), 16);\n    }\n    /**\n     * @returns {string} Generated random value included in password hash.\n     */\n    getRandomPassword() {\n        if (!this.randomPassword) {\n            throw new AuthError({\n                name: 'EmptyBigIntegerRandomPassword',\n                message: 'random password is empty',\n            });\n        }\n        return this.randomPassword;\n    }\n    /**\n     * @returns {string} Generated random value included in devices hash.\n     */\n    getSaltToHashDevices() {\n        if (!this.saltToHashDevices) {\n            throw new AuthError({\n                name: 'EmptyBigIntegersaltToHashDevices',\n                message: 'saltToHashDevices is empty',\n            });\n        }\n        return this.saltToHashDevices;\n    }\n    /**\n     * @returns {string} Value used to verify devices.\n     */\n    getVerifierDevices() {\n        if (!this.verifierDevices) {\n            throw new AuthError({\n                name: 'EmptyBigIntegerVerifierDevices',\n                message: 'verifyDevices is empty',\n            });\n        }\n        return this.verifierDevices;\n    }\n    /**\n     * Generate salts and compute verifier.\n     *\n     * @param {string} deviceGroupKey Devices to generate verifier for.\n     * @param {string} username User to generate verifier for.\n     *\n     * @returns {Promise<void>}\n     */\n    async generateHashDevice(deviceGroupKey, username) {\n        this.randomPassword = getRandomString();\n        const combinedString = `${deviceGroupKey}${username}:${this.randomPassword}`;\n        const hashedString = getHashFromData(combinedString);\n        const hexRandom = getHexFromBytes(getRandomBytes(16));\n        // The random hex will be unambiguously represented as a postive integer\n        this.saltToHashDevices = getPaddedHex(new BigInteger(hexRandom, 16));\n        return new Promise((resolve, reject) => {\n            this.g.modPow(new BigInteger(getHashFromHex(this.saltToHashDevices + hashedString), 16), this.N, (err, result) => {\n                if (err) {\n                    reject(err);\n                    return;\n                }\n                this.verifierDevices = getPaddedHex(result);\n                resolve();\n            });\n        });\n    }\n    /**\n     * Calculates the final HKDF key based on computed S value, computed U value and the key\n     *\n     * @param {String} username Username.\n     * @param {String} password Password.\n     * @param {AuthBigInteger} B Server B value.\n     * @param {AuthBigInteger} salt Generated salt.\n     */\n    async getPasswordAuthenticationKey({ username, password, serverBValue, salt, }) {\n        if (serverBValue.mod(this.N).equals(BigInteger.ZERO)) {\n            throw new Error('B cannot be zero.');\n        }\n        const U = calculateU({\n            A: this.A,\n            B: serverBValue,\n        });\n        const usernamePassword = `${this.userPoolName}${username}:${password}`;\n        const usernamePasswordHash = getHashFromData(usernamePassword);\n        const x = new BigInteger(getHashFromHex(getPaddedHex(salt) + usernamePasswordHash), 16);\n        const S = await calculateS({\n            a: this.a,\n            g: this.g,\n            k: this.k,\n            x,\n            B: serverBValue,\n            N: this.N,\n            U,\n        });\n        const context = this.encoder.convert('Caldera Derived Key');\n        const spacer = this.encoder.convert(String.fromCharCode(1));\n        const info = new Uint8Array(context.byteLength + spacer.byteLength);\n        info.set(context, 0);\n        info.set(spacer, context.byteLength);\n        const hkdfKey = getHkdfKey(getBytesFromHex(getPaddedHex(S)), getBytesFromHex(getPaddedHex(U)), info);\n        return hkdfKey;\n    }\n}\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { base64Encoder } from '@aws-amplify/core/internals/utils';\nimport { getRandomBytes } from './getRandomBytes';\n/**\n * Helper function to generate a random string\n * @returns {string} a random value.\n *\n * @internal\n */\nexport const getRandomString = () => base64Encoder.convert(getRandomBytes(40));\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { BigInteger } from '../BigInteger';\nimport { getHashFromHex } from '../getHashFromHex';\nimport { getPaddedHex } from '../getPaddedHex';\n/**\n * @internal\n */\nexport const calculateU = ({ A, B, }) => {\n    const U = new BigInteger(getHashFromHex(getPaddedHex(A) + getPaddedHex(B)), 16);\n    if (U.equals(BigInteger.ZERO)) {\n        throw new Error('U cannot be zero.');\n    }\n    return U;\n};\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * @internal\n */\nexport const calculateS = async ({ a, g, k, x, B, N, U, }) => {\n    return new Promise((resolve, reject) => {\n        g.modPow(x, N, (outerErr, outerResult) => {\n            if (outerErr) {\n                reject(outerErr);\n                return;\n            }\n            B.subtract(k.multiply(outerResult)).modPow(a.add(U.multiply(x)), N, (innerErr, innerResult) => {\n                if (innerErr) {\n                    reject(innerErr);\n                    return;\n                }\n                resolve(innerResult.mod(N));\n            });\n        });\n    });\n};\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Sha256 } from '@aws-crypto/sha256-js';\n/**\n * Standard HKDF algorithm.\n *\n * @param {Uint8Array} ikm Input key material.\n * @param {Uint8Array} salt Salt value.\n * @param {Uint8Array} info Context and application specific info.\n *\n * @returns {Uint8Array} Strong key material.\n *\n * @internal\n */\nexport const getHkdfKey = (ikm, salt, info) => {\n    const awsCryptoHash = new Sha256(salt);\n    awsCryptoHash.update(ikm);\n    const resultFromAWSCryptoPrk = awsCryptoHash.digestSync();\n    const awsCryptoHashHmac = new Sha256(resultFromAWSCryptoPrk);\n    awsCryptoHashHmac.update(info);\n    const resultFromAWSCryptoHmac = awsCryptoHashHmac.digestSync();\n    const hashHexFromAWSCrypto = resultFromAWSCryptoHmac;\n    return hashHexFromAWSCrypto.slice(0, 16);\n};\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { BigInteger } from '../BigInteger';\n/**\n * @internal\n */\nexport const calculateA = async ({ a, g, N, }) => {\n    return new Promise((resolve, reject) => {\n        g.modPow(a, N, (err, A) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            if (A.mod(N).equals(BigInteger.ZERO)) {\n                reject(new Error('Illegal parameter. A mod N cannot be 0.'));\n                return;\n            }\n            resolve(A);\n        });\n    });\n};\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AuthenticationHelper } from './AuthenticationHelper';\nimport { BigInteger } from './BigInteger';\nimport { calculateA } from './calculate';\nimport { INIT_N } from './constants';\nimport { getHexFromBytes } from './getHexFromBytes';\nimport { getRandomBytes } from './getRandomBytes';\n/**\n * Returns a new {@link AuthenticationHelper} instance with randomly generated BigInteger seed\n *\n * @param userPoolName Cognito user pool name.\n * @returns An {@link AuthenticationHelper} instance.\n *\n * @internal\n */\nexport const getAuthenticationHelper = async (userPoolName) => {\n    const N = new BigInteger(INIT_N, 16);\n    const g = new BigInteger('2', 16);\n    const a = generateRandomBigInteger();\n    const A = await calculateA({ a, g, N });\n    return new AuthenticationHelper({ userPoolName, a, g, A, N });\n};\n/**\n * Generates a random BigInteger.\n *\n * @returns {BigInteger} a random value.\n */\nconst generateRandomBigInteger = () => {\n    // This will be interpreted as a postive 128-bit integer\n    const hexRandom = getHexFromBytes(getRandomBytes(128));\n    // There is no need to do randomBigInt.mod(this.N - 1) as N (3072-bit) is > 128 bytes (1024-bit)\n    return new BigInteger(hexRandom, 16);\n};\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { HEX_TO_SHORT } from './constants';\n/**\n * Converts a hexadecimal encoded string to a Uint8Array of bytes.\n *\n * @param encoded The hexadecimal encoded string\n */\nexport const getBytesFromHex = (encoded) => {\n    if (encoded.length % 2 !== 0) {\n        throw new Error('Hex encoded strings must have an even number length');\n    }\n    const out = new Uint8Array(encoded.length / 2);\n    for (let i = 0; i < encoded.length; i += 2) {\n        const encodedByte = encoded.slice(i, i + 2).toLowerCase();\n        if (encodedByte in HEX_TO_SHORT) {\n            out[i / 2] = HEX_TO_SHORT[encodedByte];\n        }\n        else {\n            throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);\n        }\n    }\n    return out;\n};\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport const textEncoder = {\n    convert(input) {\n        return new TextEncoder().encode(input);\n    },\n};\n"],"names":["async","handlePasswordSRP","_ref","_challengeParameters$","username","password","clientMetadata","config","tokenOrchestrator","authFlow","preferredChallenge","userPoolId","userPoolClientId","userPoolEndpoint","userPoolName","split","authenticationHelper","getAuthenticationHelper","authParameters","USERNAME","SRP_A","A","toString","PREFERRED_CHALLENGE","jsonReq","AuthFlow","AuthParameters","ClientMetadata","ClientId","UserContextData","getUserContextData","initiateAuth","createInitiateAuthClient","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","resp","region","getRegionFromUserPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","SignIn","ChallengeParameters","challengeParameters","Session","session","activeUsername","setActiveSignInUsername","ChallengeName","retryOnResourceNotFoundException","handlePasswordVerifierChallenge","autoSignInStore","reducer","currentState","active","type","getState","dispatch","action","createAutoSignInStore","autoSignInReducer","state","_objectSpread","value","TGT_STATE","SIGN_IN_STATE_KEYS","concat","challengeName","signInSession","expiry","resetActiveSignInState","signInStore","clearPersistedSignInState","stateKey","Object","values","syncSessionStorage","removeItem","getDefaultState","undefined","getInitialState","_syncSessionStorage$g","_syncSessionStorage$g2","_syncSessionStorage$g3","getItem","Number","Date","now","createStore","signInReducer","persistSignInState","setActiveSignInState","setItem","String","validationErrorMap","AuthValidationErrorCode","EmptyChallengeResponse","message","EmptyConfirmResetPasswordUsername","EmptyConfirmSignUpCode","EmptyConfirmSignUpUsername","EmptyConfirmResetPasswordConfirmationCode","EmptyConfirmResetPasswordNewPassword","EmptyResendSignUpCodeUsername","EmptyResetPasswordUsername","EmptySignInPassword","EmptySignInUsername","EmptySignUpPassword","EmptySignUpUsername","CustomAuthSignInPassword","recoverySuggestion","IncorrectMFAMethod","EmptyVerifyTOTPSetupCode","EmptyUpdatePassword","EmptyConfirmUserAttributeCode","AuthErrorStrings","AuthErrorCodes","assertValidationError","assertion","name","AuthError","initialAutoSignIn","AUTO_SIGN_IN_EXCEPTION","autoSignIn","setAutoSignIn","callback","resetAutoSignIn","arguments","length","getCurrentUser","_amplify$getConfig$Au","_tokens$idToken$paylo","_tokens$idToken","authConfig","amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","tokens","getTokens","forceRefresh","assertAuthTokens","sub","idToken","payload","authUser","userId","signInDetails","getSignInDetailsFromTokens","getCurrentUser$1","Amplify","signInWithSRP","input","_Amplify$getConfig$Au","_input$options","loginId","authFlowType","clientMetaData","options","handledChallengeName","handledChallengeParameters","AuthenticationResult","handleUserSRPAuthFlow","getActiveSignInUsername","cacheCognitoTokens","NewDeviceMetadata","getNewDeviceMetadata","newDeviceMetadata","accessToken","AccessToken","dispatchSignedInHubEvent","isSignedIn","nextStep","signInStep","getSignInResult","error","assertServiceError","result","getSignInResultFromError","signIn","assertUserNotAuthenticated","metadata","retiredChallengeName","retriedChallengeParameters","handleUserPasswordAuthFlow","signInWithUserPassword","retriedChallengeName","retiredChallengeParameters","handleCustomAuthFlowWithoutSRP","signInWithCustomAuth","handleCustomSRPAuthFlow","signInWithCustomSRPAuth","signInWithUserAuth","handleUserAuthFlowInput","autoSignInStoreState","response","PASSWORD","handleUserAuthFlow","availableChallenges","AvailableChallenges","AmplifyError","decodeJWT","accessTokenIssuedAtInMillis","iat","currentTime","getTime","clockDrift","refreshToken","deviceMetadata","RefreshToken","IdToken","setTokens","AssociateSoftwareTokenException","ChangePasswordException","ConfirmDeviceException","ConfirmForgotPasswordException","ConfirmSignUpException","DeleteUserAttributesException","DeleteUserException","ForgetDeviceException","ForgotPasswordException","GetUserException","GetIdException","GetCredentialsForIdentityException","GetUserAttributeVerificationException","GlobalSignOutException","InitiateAuthException","ResendConfirmationException","RespondToAuthChallengeException","SetUserMFAPreferenceException","SignUpException","UpdateUserAttributesException","VerifySoftwareTokenException","VerifyUserAttributeException","UpdateDeviceStatusException","ListDevicesException","Hub","event","data","AMPLIFY_SYMBOL","USER_UNAUTHENTICATED_EXCEPTION","UNEXPECTED_SIGN_IN_INTERRUPTION_EXCEPTION","getDeviceName","userAgentData","navigator","userAgent","platform","platformVersion","model","architecture","fullVersionList","getHighEntropyValues","map","v","brand","version","join","filter","createRespondToAuthChallengeClient","composeServiceApi","cognitoUserPoolTransferHandler","createUserPoolSerializer","createUserPoolDeserializer","DEFAULT_SERVICE_CLIENT_API_CONFIG","createAssociateSoftwareTokenClient","createConfirmDeviceClient","PasskeyErrorCode","PasskeyError","constructor","params","super","this","setPrototypeOf","prototype","notSupportedRecoverySuggestion","abortOrCancelRecoverySuggestion","misconfigurationRecoverySuggestion","passkeyErrorMap","PasskeyNotSupported","InvalidPasskeyRegistrationOptions","InvalidPasskeyAuthenticationOptions","PasskeyRegistrationFailed","PasskeyRetrievalFailed","PasskeyAlreadyExists","PasskeyRegistrationCanceled","PasskeyAuthenticationCanceled","PasskeyOperationAborted","RelyingPartyMismatch","assertPasskeyError","createAssertionFunction","handlePasskeyError","err","Error","underlyingError","AmplifyErrorCode","Unknown","convertArrayBufferToBase64Url","buffer","base64Encoder","convert","Uint8Array","urlSafe","skipPadding","convertBase64UrlToArrayBuffer","base64url","from","base64Decoder","x","charCodeAt","getPasskey","isPasskeySupported","isBrowser","window","isSecureContext","PublicKeyCredential","passkeyGetOptions","challengeBuffer","challenge","allowedCredentialsWithBuffer","allowCredentials","allowedCred","id","deserializeJsonToPkcGetOptions","credential","credentials","get","publicKey","AuthenticatorAssertionResponse","assertCredentialIsPkcWithAuthenticatorAssertionResponse","clientDataJSON","authenticatorData","signature","userHandle","resultJson","rawId","clientExtensionResults","getClientExtensionResults","authenticatorAttachment","serializePkcWithAssertionToJson","handlePasskeyAuthenticationError","MONTH_NAMES","WEEK_NAMES","getNowString","weekDay","getUTCDay","month","getUTCMonth","day","getUTCDate","hours","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","year","getUTCFullYear","getSignatureString","dateNow","hkdf","bufUPIDaToB","textEncoder","bufUNaToB","bufSBaToB","urlB64ToUint8Array","SECRET_BLOCK","bufDNaToB","bufConcat","byteLength","set","awsCryptoHash","Sha256","update","resultFromAWSCrypto","digestSync","base64String","base64","repeat","replace","rawData","outputArray","i","USER_ATTRIBUTES","_ref5","_response$ChallengePa","_response$ChallengePa2","_response$ChallengePa3","getDeviceMetadata","deviceKey","DEVICE_KEY","USER_ID_FOR_SRP","handleDeviceSRPAuth","_response$ChallengePa4","_response$ChallengePa5","CHALLENGE_NAME","_ref6","clientId","assertDeviceMetadata","deviceGroupKey","jsonReqResponseChallenge","ChallengeResponses","respondToAuthChallenge","respondedChallengeParameters","_ref7","_challengeParameters$2","serverBValue","BigInteger","SRP_B","salt","SALT","getPasswordAuthenticationKey","randomPassword","challengeResponses","PASSWORD_CLAIM_SECRET_BLOCK","TIMESTAMP","PASSWORD_CLAIM_SIGNATURE","handleDevicePasswordVerifier","additionalInfo","mfaSetupTypes","getMFATypes","parseMFATypes","MFAS_CAN_SETUP","allowedMfaSetupTypes","authMfaType","isTotpMfaSetupAvailable","includes","isEmailMfaSetupAvailable","allowedMFATypes","associateSoftwareToken","SecretCode","secretCode","totpSetupDetails","getTOTPSetupDetails","SignInException","missingAttributes","parseAttributes","requiredAttributes","MFAS_CAN_CHOOSE","codeDeliveryDetails","deliveryMedium","CODE_DELIVERY_DELIVERY_MEDIUM","destination","CODE_DELIVERY_DESTINATION","CREDENTIAL_REQUEST_OPTIONS","credentialRequestOptions","cred","JSON","parse","nextChallengeName","nextChallengeParameters","authenticationResult","nextSession","ConfirmSignIn","CREDENTIAL","stringify","handleWebAuthnSignInResult","sharedSecret","getSetupUri","appName","accountName","totpUri","AmplifyUrl","errorName","PasswordResetRequiredException","UserNotConfirmedException","attributes","att","getMFAType","types","Boolean","mfa","USER_ALREADY_AUTHENTICATED_EXCEPTION","_ref9","DeviceKey","DeviceGroupKey","generateHashDevice","errGenHash","deviceSecretVerifierConfig","Salt","getBytesFromHex","getSaltToHashDevices","PasswordVerifier","getVerifierDevices","getRandomPassword","confirmDevice","DeviceName","DeviceSecretVerifierConfig","func","args","clearDeviceMetadata","_state$username","a","b","fromString","nbi","dbits","inBrowser","am","w","j","c","n","xl","xh","l","h","m","Math","floor","DB","DM","DV","FV","pow","F1","F2","BI_RC","rr","vv","int2char","charAt","intAt","s","nbv","r","fromInt","nbits","t","Montgomery","mp","invDigit","mpl","mph","um","mt2","abs","dlShiftTo","divRemTo","compareTo","ZERO","subTo","revert","copyTo","reduce","u0","clamp","drShiftTo","mulTo","y","multiplyTo","sqrTo","squareTo","k","mi","sh","max","lShiftTo","bs","cbs","bm","ds","rShiftTo","min","q","pm","pt","ts","ms","nsh","ys","y0","yt","d1","d2","e","ONE","qd","addTo","negate","km","d","p","bitLength","mod","equals","add","subtract","multiply","divide","modPow","z","g","k1","g2","is1","r2","INIT_N","SHORT_TO_HEX","HEX_TO_SHORT","encodedByte","toLowerCase","getHexFromBytes","bytes","out","getHashFromData","sha256","hashedData","hashHexFromUint8","Array","getHashFromHex","hexStr","HEX_MSB_REGEX","getPaddedHex","bigInt","isNegative","test","invertedNibbles","invertedNibble","parseInt","toUpperCase","startsWith","substring","WordArray","words","sigBytes","Words","random","nBytes","push","getCrypto","getRandomValues","Uint32Array","wordArray","hexChars","bite","hexStringify","getRandomBytes","str","AuthenticationHelper","N","encoder","saltToHashDevices","verifierDevices","combinedString","hashedString","hexRandom","Promise","resolve","reject","_ref2","U","B","calculateU","usernamePassword","usernamePasswordHash","S","outerErr","outerResult","innerErr","innerResult","calculateS","context","spacer","fromCharCode","info","hkdfKey","getHkdfKey","ikm","resultFromAWSCryptoPrk","awsCryptoHashHmac","slice","generateRandomBigInteger","calculateA","encoded","TextEncoder","encode"],"sourceRoot":""}