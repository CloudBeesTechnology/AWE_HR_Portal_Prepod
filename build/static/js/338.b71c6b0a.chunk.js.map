{"version":3,"file":"static/js/338.b71c6b0a.chunk.js","mappings":"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","sources":["pages/forgotPassword/ForgotEmail.jsx","services/Validation.jsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport emailImage from \"../../assets/login/emailImage.jpg\";\r\nimport logo from \"../../assets/logo/logo-with-name.svg\";\r\nimport { EmailSchema } from \"../../services/Validation\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\n\r\nconst ForgotEmail = () => {\r\n  const navigate = useNavigate();\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n    handleSubmit,\r\n  } = useForm({ resolver: yupResolver(EmailSchema) });\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const Submit = handleSubmit(async (data) => {\r\n  //  console.log(data);\r\n   navigate(\"/forgotOtp\");\r\n  });\r\n\r\n\r\n  return (\r\n    <section className=\"screen-size mx-auto flex h-screen\">\r\n      <div className=\"flex-1 border-r-2  border-[#E9E9E9] center \">\r\n        <img\r\n          className=\"w-full max-w-[500px]\"\r\n          src={emailImage}\r\n          alt=\"Rightside Pic not found\"\r\n        />\r\n      </div>\r\n      <div className=\"flex-1 justify-center flex items-center gap-8 py-20 flex-col w-full px-3\">\r\n        <div>\r\n          {\" \"}\r\n          <img\r\n            className=\"w-full max-w-[450px]\"\r\n            src={logo}\r\n            alt=\"Logo not found\"\r\n          />\r\n        </div>\r\n        <article className=\" space-y-2 mt-10\">\r\n          <h1 className=\"text-dark_grey title\">Welcome Back</h1>\r\n          <p className=\"text-dark_grey text_size_8\">\r\n            Hello again! Dive into your tasks and let's make today productive.\r\n          </p>\r\n        </article>\r\n        {error && <p className=\"text-red\">{error}</p>}\r\n        <section  className=\" space-y-5\">\r\n          <div className=\"w-[400px] space-y-1\">\r\n            <label htmlFor=\"userName\" className=\"text-dark_grey text_size_8\">\r\n            User Name\r\n            </label>\r\n            <div className=\"shadow-md shadow-[#00000040] border border-[#D3D3D3] overflow-hidden rounded-lg py-1 px-3 w-full\">\r\n              <input\r\n                className=\"outline-none py-2 w-full\"\r\n                type=\"text\"\r\n                id=\"userName\"\r\n                name=\"userName\"\r\n                {...register(\"userName\")}\r\n              />\r\n            </div>\r\n            <p className=\"text-[red] text-sm my-3 ml-5\">\r\n              {errors.name?.message}\r\n            </p>\r\n          </div>\r\n               \r\n          <div className=\"center \">\r\n            <button className=\"primary_btn text_size_4 mt-5\" onClick={Submit}>\r\n            Next\r\n            </button>\r\n          </div>\r\n          <hr className=\"border-[1.5px] text-[#B3B3B3]\" />\r\n\r\n          <Link to=\"/login\" className=\"center \">\r\n            <button className=\"text-blue text_size_4\" >\r\n            Cancel\r\n            </button>\r\n          </Link>\r\n         \r\n        </section>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ForgotEmail;\r\n","import * as Yup from \"yup\";\r\n\r\nexport const LoginSchema = Yup.object({\r\n  userID: Yup.string().required(\"UserID is mandatory\"),\r\n  password: Yup.string().required(\"Password is Required\"),\r\n});\r\nexport const newPasswordSchema = Yup.object({\r\n  newPassword: Yup.string()\r\n  .required(\"New Password is required\")\r\n  .min(8, \"Password must be at least 8 characters\"),\r\nrePassword: Yup.string()\r\n  .required(\"Please confirm your password\")\r\n  .oneOf([Yup.ref(\"newPassword\"), null], \"Passwords must match\"),\r\n});\r\nexport const EmailSchema = Yup.object({\r\n  userName: Yup.string().required(\"User Name is mandatory\"),\r\n\r\n});\r\n\r\nexport const UserSchema = Yup.object({\r\n  empID: Yup.string().required(\"Employee ID is required\"),\r\n  password: Yup.string().required(\"Temporary Password is required\"),\r\n  selectType: Yup.string().required(\"Please select a type\"),\r\n  officialEmail: Yup.string().required(\"OfficialEmail is required\"),\r\n  userID: Yup.string().required(\"User ID is mandatory\"),\r\n  name: Yup.string().required(\"Name is mandatory\"),\r\n  contactNo: Yup.string().required(\"Contact number is mandatory\"),\r\n  position: Yup.string().required(\"Position is mandatory\"),\r\n  department: Yup.string().required(\"Department is mandatory\"),\r\n});\r\n\r\nexport const ChangePasswordSchema = Yup.object({\r\n  userID: Yup.string().required(\"User ID is mandatory\"),\r\n  currentPassword: Yup.string().required(\"Current Password is mandatory\"),\r\n  password: Yup.string()\r\n    .min(8, \"Password must be at least 8 characters\")\r\n    .max(15, \"Password cannot exceed 15 characters\")\r\n    .matches(\r\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])/,\r\n      \"Password must contain at least one lowercase letter, one uppercase letter, one number, and one special character\"\r\n    )\r\n    .required(\"Password is required\"),\r\n\r\n  confirmPassword: Yup.string()\r\n    .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\")\r\n    .required(\"Confirm password is required\"),\r\n});\r\n\r\nexport const ApplicantSchema = Yup.object().shape({\r\n  profilePhoto: Yup.mixed()\r\n    .required(\"Upload Photo is mandatory\")\r\n    .test(\"fileType\", \"Profile photo must be a JPG or PNG file\", (value) =>\r\n      value ? /\\.(jpg|jpeg|png)$/.test(value.name) : false\r\n    ),\r\n  agent: Yup.string().notRequired(),\r\n  position: Yup.string().required(\"Position is mandatory\"),\r\n  contractType: Yup.string().required(\"Contract Type mandatory\"),\r\n  empType: Yup.string().required(\"Employee Type mandatory\"),\r\n  name: Yup.string()\r\n    .min(3, \"Name must be at least 3 characters\")\r\n    .required(\"Name is mandatory\"),\r\n  chinese: Yup.string().notRequired(),\r\n  gender: Yup.string().required(\"Gender is mandatory\"),\r\n  // age: Yup.string().required(\"age is mandatory\"),\r\n  dob: Yup.string().required(\"Date of Birth is mandatory\"),\r\n  age: Yup.number()\r\n    .min(20, \"Age must be at least 20\")\r\n    .max(99, \"Age cannot exceed 99\")\r\n    .required(\"Age is required\"),\r\n  email: Yup.string()\r\n    .email(\"Please enter a valid email\")\r\n    .required(\"Email is required\"),\r\n  cob: Yup.string().required(\"Country of Birth is mandatory\"),\r\n  nationality: Yup.string().required(\"Nationality is mandatory\"),\r\n  otherNation: Yup.string().when(\"nationality\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"other\",\r\n    then: () => Yup.string().required(\"Other Nationality is required\"),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n  marital: Yup.string().required(\"Marital status is mandatory\"),\r\n  race: Yup.string().required(\"Race is mandatory\"),\r\n  otherRace: Yup.string().when(\"race\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"other\",\r\n    then: () => Yup.string().required(\"Other Race is required\"),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n  religion: Yup.string().required(\"Religion is mandatory\"),\r\n  otherReligion: Yup.string().when(\"religion\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"other\",\r\n    then: () => Yup.string().required(\"Other religion is required\"),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n});\r\n\r\nexport const PersonalSchema = (nationality) => {\r\n  console.log(nationality);\r\n  const isBruneian =\r\n    nationality &&\r\n    (nationality.trim().toLowerCase() === \"bruneian\" ||\r\n      nationality.trim().toLowerCase() === \"brunei pr\");\r\n  console.log(isBruneian);\r\n\r\n  return Yup.object({\r\n    bwnIcNo: isBruneian\r\n      ? Yup.string()\r\n          .matches(\r\n            /^\\d{2}-\\d{6}$/,\r\n            \"I/C Number must be in the format XX-XXXXXX, where X is a digit\"\r\n          )\r\n          .required(\"I/C Number is mandatory for Bruneians\")\r\n      : Yup.string().notRequired(),\r\n\r\n    bwnIcColour: isBruneian\r\n      ? Yup.string().required(\"I/C Colour is mandatory for Bruneians\")\r\n      : Yup.string().notRequired(),\r\n\r\n    bwnIcExpiry: isBruneian\r\n      ? Yup.string().required(\"I/C Expiry is mandatory for Bruneians\")\r\n      : Yup.string().notRequired(),\r\n    ppNo: isBruneian\r\n      ? Yup.string().notRequired()\r\n      : Yup.string().required(\"Passport Number is mandatory\"),\r\n\r\n    ppIssued: isBruneian\r\n      ? Yup.string().notRequired()\r\n      : Yup.string().required(\"Passport issued is mandatory\"),\r\n    ppExpiry: isBruneian\r\n      ? Yup.string().notRequired()\r\n      : Yup.string().required(\"Passport Expiry is mandatory\"),\r\n    ppDestinate: isBruneian\r\n      ? Yup.string().notRequired()\r\n      : Yup.string().required(\"Passport destination is mandatory\"),\r\n\r\n    alternateNo: Yup.string().notRequired(),\r\n    contactNo: Yup.string().required(\"Contact Number is mandatory\"),\r\n    presentAddress: Yup.string().required(\"Present Address is mandatory\"),\r\n    permanentAddress: Yup.string().required(\"Permanent Address is mandatory\"),\r\n    driveLic: Yup.string().notRequired(),\r\n    lang: Yup.string().required(\"Language is mandatory\"),\r\n    familyDetails: Yup.array()\r\n      .of(\r\n        Yup.object().shape({\r\n          name: Yup.string().notRequired(),\r\n          relationship: Yup.string().notRequired(),\r\n          age: Yup.string().notRequired(),\r\n          occupation: Yup.string().notRequired(),\r\n          place: Yup.string().notRequired(),\r\n        })\r\n      )\r\n      .notRequired(),\r\n    eduDetails: Yup.array()\r\n      .of(\r\n        Yup.object().shape({\r\n          university: Yup.string().required(\"University Name is mandatory \"),\r\n          fromDate: Yup.string().required(\"From Date is mandatory\"),\r\n          toDate: Yup.string().required(\"To Date is mandatory\"),\r\n          degree: Yup.string().required(\"Degree is mandatory\"),\r\n        })\r\n      )\r\n      .required(\"At least one education detail is mandatory\"),\r\n    workExperience: Yup.array().of(\r\n      Yup.object().shape({\r\n        fromDate: Yup.string().notRequired(),\r\n        toDate: Yup.string().notRequired(),\r\n        companyAndAddress: Yup.string().notRequired(),\r\n        position: Yup.string().notRequired(),\r\n        salary: Yup.string().notRequired(),\r\n        reasonLeaving: Yup.string().notRequired(),\r\n      })\r\n    ),\r\n  });\r\n};\r\n\r\nexport const EducationSchema = Yup.object({\r\n  referees: Yup.array()\r\n    .of(\r\n      Yup.object().shape({\r\n        name: Yup.string().notRequired(),\r\n        address: Yup.string().notRequired(),\r\n        phoneNumber: Yup.string().notRequired(),\r\n        profession: Yup.string().notRequired(),\r\n      })\r\n    )\r\n    .notRequired(),\r\n  relatives: Yup.array()\r\n    .of(\r\n      Yup.object().shape({\r\n        name: Yup.string().notRequired(),\r\n        position: Yup.string().notRequired(),\r\n        relationship: Yup.string().notRequired(),\r\n      })\r\n    )\r\n    .notRequired(),\r\n  description: Yup.string().notRequired(),\r\n  emgDetails: Yup.array()\r\n    .of(\r\n      Yup.object().shape({\r\n        name: Yup.string().required(\"Name is mandatory\"),\r\n        relationship: Yup.string().required(\"Relationship is mandatory\"),\r\n        address: Yup.string().required(\"Address is mandatory\"),\r\n        phoneNumber: Yup.string().required(\"Phone Number is mandatory\"),\r\n        bloodGroup: Yup.string().notRequired(),\r\n      })\r\n    )\r\n    .required(\"At least one emergency contact is mandatory\"),\r\n  disease: Yup.string().notRequired(),\r\n  liquor: Yup.string().notRequired(),\r\n  crime: Yup.string().notRequired(),\r\n  diseaseDesc: Yup.string().when(\"disease\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"yes\",\r\n    then: () => Yup.string().notRequired(),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n  liquorDesc: Yup.string().when(\"liquor\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"yes\",\r\n    then: () => Yup.string().notRequired(),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n  crimeDesc: Yup.string().when(\"crime\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"yes\",\r\n    then: () => Yup.string().notRequired(),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n});\r\n\r\nexport const CandidatesSchema = Yup.object().shape({\r\n  salaryExpectation: Yup.string().notRequired(),\r\n  noExperience: Yup.string().required(\"Experience is required\"),\r\n  noticePeriod: Yup.string().required(\"Notice period is required\"),\r\n  empStatement: Yup.string().required(\"Employee Statement is required\"),\r\n  perIS: Yup.string().required(\"Interview status is required\"),\r\n  perID: Yup.string().when(\"perInterviewStatus\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"yes\",\r\n    then: () => Yup.string().notRequired(),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n  supportInfo: Yup.string(),\r\n\r\n  // File validation for resume (e.g., PDF, Word, Excel, or images)\r\n  uploadResume: Yup.mixed()\r\n    .required(\"Resume is required\")\r\n    .test(\r\n      \"fileType\",\r\n      \"Only PDF, Word, Excel, or image formats (JPEG, JPG, PNG, SVG) are allowed\",\r\n      (value) => {\r\n        return (\r\n          value &&\r\n          [\r\n            \"application/pdf\", // PDF\r\n            \"application/msword\", // Word .doc\r\n            \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\", // Word .docx\r\n            \"application/vnd.ms-excel\", // Excel .xls\r\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", // Excel .xlsx\r\n            \"image/jpeg\",\r\n            \"image/jpg\",\r\n            \"image/png\",\r\n            \"image/svg+xml\", // Images\r\n          ].includes(value.type)\r\n        );\r\n      }\r\n    ),\r\n\r\n  // File validation for certificate (e.g., PDF, Word, Excel, or images)\r\n  uploadCertificate: Yup.mixed()\r\n    .required(\"Certificate is required\")\r\n    .test(\r\n      \"fileType\",\r\n      \"Only PDF, Word, Excel, or image formats (JPEG, JPG, PNG, SVG) are allowed\",\r\n      (value) => {\r\n        return (\r\n          value &&\r\n          [\r\n            \"application/pdf\", // PDF\r\n            \"application/msword\", // Word .doc\r\n            \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\", // Word .docx\r\n            \"application/vnd.ms-excel\", // Excel .xls\r\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", // Excel .xlsx\r\n            \"image/jpeg\",\r\n            \"image/jpg\",\r\n            \"image/png\",\r\n            \"image/svg+xml\", // Images\r\n          ].includes(value.type)\r\n        );\r\n      }\r\n    ),\r\n\r\n  // File validation for passport (e.g., PDF, Word, Excel, or images)\r\n  uploadPp: Yup.mixed()\r\n    .required(\"Passport is required\")\r\n    .test(\r\n      \"fileType\",\r\n      \"Only PDF, Word, Excel, or image formats (JPEG, JPG, PNG, SVG) are allowed\",\r\n      (value) => {\r\n        return (\r\n          value &&\r\n          [\r\n            \"application/pdf\", // PDF\r\n            \"application/msword\", // Word .doc\r\n            \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\", // Word .docx\r\n            \"application/vnd.ms-excel\", // Excel .xls\r\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", // Excel .xlsx\r\n            \"image/jpeg\",\r\n            \"image/jpg\",\r\n            \"image/png\",\r\n            \"image/svg+xml\", // Images\r\n          ].includes(value.type)\r\n        );\r\n      }\r\n    ),\r\n});\r\n\r\n// Define the validation schema using Yup\r\nexport const EmpRequisitionSchema = Yup.object().shape({\r\n  nameReq: Yup.string().notRequired(),\r\n  requestorID: Yup.string().notRequired(),\r\n  approverID: Yup.string().notRequired(),\r\n  department: Yup.string().required(\"Department is required\"),\r\n  project: Yup.string().required(\"Project is required\"),\r\n  position: Yup.string().required(\"Position is required\"),\r\n  quantity: Yup.number()\r\n    .typeError(\"Quantity must be a number\")\r\n    .required(\"Quantity is required\"),\r\n  reasonForReq: Yup.string().required(\"Reason for request is required\"),\r\n  justification: Yup.string().required(\"Justification is required\"),\r\n  replacementFor: Yup.string().notRequired(),\r\n  qualification: Yup.string().required(\"State Qualification is required\"),\r\n  tentativeDate: Yup.date()\r\n    .min(new Date(), \"Tentative date must be in the future\")\r\n    .required(\"Tentative date is required\")\r\n    .typeError(\"Please enter a valid date\"),\r\n  status: Yup.string().notRequired(),\r\n  remarkReq: Yup.string().notRequired(),\r\n});\r\n\r\n\r\nexport const InterviewScheduleSchema = Yup.object().shape({\r\n  interDate: Yup.date()\r\n  .required(\"Date is required\")\r\n  .typeError(\"Date is required\")\r\n  .min(\r\n    new Date(),\r\n    \"The selected date is in the past. Please choose a valid date.\"\r\n  ),\r\n  interTime: Yup.string()\r\n  .required(\"Time is required\")\r\n  .matches(\r\n    /^(0[8-9]|1[0-5]):([0-5]\\d)$/,\r\n    \"Please choose a time between 8:00 AM and 4:00 PM.\"\r\n  ),\r\n  venue: Yup.string().required(\"Venue is required\"),\r\n  interType: Yup.string().notRequired(),\r\n  empBadgeNo: Yup.string().notRequired(\"Badge Number is required\"),\r\n  manager:  Yup.string().notRequired(\"Manager is required\"),\r\n  message: Yup.string().optional(),\r\n});\r\n\r\nexport const hiringJobSchema = Yup.object().shape({\r\n  jobTitle: Yup.string().required(\"Job Title is required\"),\r\n  location: Yup.string().notRequired(),\r\n  jobDesc: Yup.string().notRequired(),\r\n  experience: Yup.string().required(\"Experience is required\"),\r\n  quantity: Yup.string().notRequired(),\r\n  startDate: Yup.date()\r\n    .nullable()\r\n    .transform((value, originalValue) => (originalValue === \"\" ? null : value))\r\n    .notRequired(),\r\n  expiryDate: Yup.date()\r\n    .nullable()\r\n    .transform((value, originalValue) => (originalValue === \"\" ? null : value))\r\n    .notRequired()\r\n    .test(\"is-future-date\", \"Only Future Dates Allowed\", function (value) {\r\n      return !value || new Date(value) > new Date();\r\n    }),\r\n    uploadJobDetails:Yup.string().notRequired()\r\n});\r\n\r\n//WorkPass Tracking Forms Schema - Recruitment \r\nexport const SawpFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  sawpLtrReq: Yup.date().notRequired(),\r\n  sawpLtrRece: Yup.date().notRequired(),\r\n  sawpFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const DoeFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  doeSubmit: Yup.date().notRequired(),\r\n  doeApproval: Yup.date().notRequired(),\r\n  doeValid: Yup.date().notRequired(),\r\n  doeRefNo: Yup.string().notRequired(),\r\n  doeFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const NlmsFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  nlmsSubmit: Yup.date().notRequired(),\r\n  nlmsSubmitRefNo: Yup.string().notRequired(),\r\n  nlmsApproval: Yup.date().notRequired(),\r\n  nlmsValid: Yup.date().notRequired(),\r\n  ldRefNo: Yup.string().notRequired(),\r\n  nlmsFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const BankFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  bgSubmit: Yup.date().notRequired(),\r\n  bgRece: Yup.date().notRequired(),\r\n  bgValid: Yup.date().notRequired(),\r\n  bgRefNo: Yup.string().notRequired(),\r\n  bgAmount: Yup.string().notRequired(),\r\n  bgFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const JitpaFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  jpTbaPurchase: Yup.date().notRequired(),\r\n  jpEndorsement: Yup.date().notRequired(),\r\n  jitpaValid: Yup.date().notRequired(),\r\n  jpAmount: Yup.string().notRequired(),\r\n  jitpaFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const LabourDepFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  labDepReceiptNo: Yup.string().notRequired(),\r\n  labDepAmount: Yup.string().notRequired(),\r\n  labEndrose: Yup.date().notRequired(),\r\n  labDepFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const ImmigrationFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  immbdNo: Yup.string().notRequired(),\r\n  docSubmit: Yup.date().notRequired(),\r\n  visaApproval: Yup.date().notRequired(),\r\n  visaRefNo: Yup.string().notRequired(),\r\n  visaFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const AirTktFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  departure: Yup.date().notRequired(),\r\n  arrival: Yup.date().notRequired(),\r\n  cityName: Yup.string().notRequired(),\r\n  airFare: Yup.string().notRequired(),\r\n  airTktFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const NonLocalMOBFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  mobSignDate: Yup.date().notRequired(),\r\n  agent: Yup.string().notRequired(),\r\n  remarkNLMob: Yup.string().notRequired(),\r\n  mobFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});"],"names":["ForgotEmail","_errors$name","navigate","useNavigate","register","formState","errors","handleSubmit","useForm","resolver","yupResolver","EmailSchema","error","setError","useState","Submit","async","_jsxs","className","children","_jsx","src","emailImage","alt","logo","htmlFor","_objectSpread","type","id","name","message","onClick","Link","to","LoginSchema","Yup","userID","required","password","newPasswordSchema","newPassword","min","rePassword","oneOf","userName","UserSchema","empID","selectType","officialEmail","contactNo","position","department","ApplicantSchema","currentPassword","max","matches","confirmPassword","shape","profilePhoto","test","value","agent","notRequired","contractType","empType","chinese","gender","dob","age","email","cob","nationality","otherNation","when","is","trim","toLowerCase","then","otherwise","marital","race","otherRace","religion","otherReligion","PersonalSchema","console","log","isBruneian","bwnIcNo","bwnIcColour","bwnIcExpiry","ppNo","ppIssued","ppExpiry","ppDestinate","alternateNo","presentAddress","permanentAddress","driveLic","lang","familyDetails","of","relationship","occupation","place","eduDetails","university","fromDate","toDate","degree","workExperience","companyAndAddress","salary","reasonLeaving","EducationSchema","referees","address","phoneNumber","profession","relatives","description","emgDetails","bloodGroup","disease","liquor","crime","diseaseDesc","liquorDesc","crimeDesc","CandidatesSchema","salaryExpectation","noExperience","noticePeriod","empStatement","perIS","perID","supportInfo","uploadResume","includes","uploadCertificate","uploadPp","EmpRequisitionSchema","nameReq","requestorID","approverID","project","quantity","typeError","reasonForReq","justification","replacementFor","qualification","tentativeDate","Date","status","remarkReq","InterviewScheduleSchema","interDate","interTime","venue","interType","empBadgeNo","manager","optional","hiringJobSchema","jobTitle","location","jobDesc","experience","startDate","nullable","transform","originalValue","expiryDate","uploadJobDetails","SawpFormSchema","tempID","sawpLtrReq","sawpLtrRece","sawpFile","DoeFormSchema","doeSubmit","doeApproval","doeValid","doeRefNo","doeFile","NlmsFormSchema","nlmsSubmit","nlmsSubmitRefNo","nlmsApproval","nlmsValid","ldRefNo","nlmsFile","BankFormSchema","bgSubmit","bgRece","bgValid","bgRefNo","bgAmount","bgFile","JitpaFormSchema","jpTbaPurchase","jpEndorsement","jitpaValid","jpAmount","jitpaFile","LabourDepFormSchema","labDepReceiptNo","labDepAmount","labEndrose","labDepFile","ImmigrationFormSchema","immbdNo","docSubmit","visaApproval","visaRefNo","visaFile","AirTktFormSchema","departure","arrival","cityName","airFare","airTktFile","NonLocalMOBFormSchema","mobSignDate","remarkNLMob","mobFile"],"sourceRoot":""}