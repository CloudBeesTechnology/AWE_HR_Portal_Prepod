{"version":3,"file":"static/js/414.3796e46e.chunk.js","mappings":"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","sources":["../node_modules/src/index.tsx","pages/forgotPassword/ForgotOtp.jsx","services/Validation.jsx"],"sourcesContent":["import React from 'react';\n\ntype AllowedInputTypes = 'password' | 'text' | 'number' | 'tel';\n\ntype InputProps = Required<\n  Pick<\n    React.InputHTMLAttributes<HTMLInputElement>,\n    | 'value'\n    | 'onChange'\n    | 'onFocus'\n    | 'onBlur'\n    | 'onKeyDown'\n    | 'onPaste'\n    | 'aria-label'\n    | 'autoComplete'\n    | 'style'\n    | 'inputMode'\n    | 'onInput'\n  > & {\n    ref: React.RefCallback<HTMLInputElement>;\n    placeholder: string | undefined;\n    className: string | undefined;\n    type: AllowedInputTypes;\n  }\n>;\n\ninterface OTPInputProps {\n  /** Value of the OTP input */\n  value?: string;\n  /** Number of OTP inputs to be rendered */\n  numInputs?: number;\n  /** Callback to be called when the OTP value changes */\n  onChange: (otp: string) => void;\n  /** Callback to be called when pasting content into the component */\n  onPaste?: (event: React.ClipboardEvent<HTMLDivElement>) => void;\n  /** Function to render the input */\n  renderInput: (inputProps: InputProps, index: number) => React.ReactNode;\n  /** Whether the first input should be auto focused */\n  shouldAutoFocus?: boolean;\n  /** Placeholder for the inputs */\n  placeholder?: string;\n  /** Function to render the separator */\n  renderSeparator?: ((index: number) => React.ReactNode) | React.ReactNode;\n  /** Style for the container */\n  containerStyle?: React.CSSProperties | string;\n  /** Style for the input */\n  inputStyle?: React.CSSProperties | string;\n  /** The type that will be passed to the input being rendered */\n  inputType?: AllowedInputTypes;\n  /** Do not apply the default styles to the inputs, will be removed in future versions */\n  skipDefaultStyles?: boolean; // TODO: Remove in next major release\n}\n\nconst isStyleObject = (obj: unknown) => typeof obj === 'object' && obj !== null;\n\nconst OTPInput = ({\n  value = '',\n  numInputs = 4,\n  onChange,\n  onPaste,\n  renderInput,\n  shouldAutoFocus = false,\n  inputType = 'text',\n  renderSeparator,\n  placeholder,\n  containerStyle,\n  inputStyle,\n  skipDefaultStyles = false,\n}: OTPInputProps) => {\n  const [activeInput, setActiveInput] = React.useState(0);\n  const inputRefs = React.useRef<Array<HTMLInputElement | null>>([]);\n\n  const getOTPValue = () => (value ? value.toString().split('') : []);\n\n  const isInputNum = inputType === 'number' || inputType === 'tel';\n\n  React.useEffect(() => {\n    inputRefs.current = inputRefs.current.slice(0, numInputs);\n  }, [numInputs]);\n\n  React.useEffect(() => {\n    if (shouldAutoFocus) {\n      inputRefs.current[0]?.focus();\n    }\n  }, [shouldAutoFocus]);\n\n  const getPlaceholderValue = () => {\n    if (typeof placeholder === 'string') {\n      if (placeholder.length === numInputs) {\n        return placeholder;\n      }\n\n      if (placeholder.length > 0) {\n        console.error('Length of the placeholder should be equal to the number of inputs.');\n      }\n    }\n    return undefined;\n  };\n\n  const isInputValueValid = (value: string) => {\n    const isTypeValid = isInputNum ? !isNaN(Number(value)) : typeof value === 'string';\n    return isTypeValid && value.trim().length === 1;\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    if (isInputValueValid(value)) {\n      changeCodeAtFocus(value);\n      focusInput(activeInput + 1);\n    }\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { nativeEvent } = event;\n    const value = event.target.value;\n\n    if (!isInputValueValid(value)) {\n      // Pasting from the native autofill suggestion on a mobile device can pass\n      // the pasted string as one long input to one of the cells. This ensures\n      // that we handle the full input and not just the first character.\n      if (value.length === numInputs) {\n        const hasInvalidInput = value.split('').some((cellInput) => !isInputValueValid(cellInput));\n        if (!hasInvalidInput) {\n          handleOTPChange(value.split(''));\n          focusInput(numInputs - 1);\n        }\n      }\n\n      // @ts-expect-error - This was added previously to handle and edge case\n      // for dealing with keyCode \"229 Unidentified\" on Android. Check if this is\n      // still needed.\n      if (nativeEvent.data === null && nativeEvent.inputType === 'deleteContentBackward') {\n        event.preventDefault();\n        changeCodeAtFocus('');\n        focusInput(activeInput - 1);\n      }\n\n      // Clear the input if it's not valid value because firefox allows\n      // pasting non-numeric characters in a number type input\n      event.target.value = '';\n    }\n  };\n\n  const handleFocus = (event: React.FocusEvent<HTMLInputElement>) => (index: number) => {\n    setActiveInput(index);\n    event.target.select();\n  };\n\n  const handleBlur = () => {\n    setActiveInput(activeInput - 1);\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const otp = getOTPValue();\n    if ([event.code, event.key].includes('Backspace')) {\n      event.preventDefault();\n      changeCodeAtFocus('');\n      focusInput(activeInput - 1);\n    } else if (event.code === 'Delete') {\n      event.preventDefault();\n      changeCodeAtFocus('');\n    } else if (event.code === 'ArrowLeft') {\n      event.preventDefault();\n      focusInput(activeInput - 1);\n    } else if (event.code === 'ArrowRight') {\n      event.preventDefault();\n      focusInput(activeInput + 1);\n    }\n    // React does not trigger onChange when the same value is entered\n    // again. So we need to focus the next input manually in this case.\n    else if (event.key === otp[activeInput]) {\n      event.preventDefault();\n      focusInput(activeInput + 1);\n    } else if (\n      event.code === 'Spacebar' ||\n      event.code === 'Space' ||\n      event.code === 'ArrowUp' ||\n      event.code === 'ArrowDown'\n    ) {\n      event.preventDefault();\n    }\n  };\n\n  const focusInput = (index: number) => {\n    const activeInput = Math.max(Math.min(numInputs - 1, index), 0);\n\n    if (inputRefs.current[activeInput]) {\n      inputRefs.current[activeInput]?.focus();\n      inputRefs.current[activeInput]?.select();\n      setActiveInput(activeInput);\n    }\n  };\n\n  const changeCodeAtFocus = (value: string) => {\n    const otp = getOTPValue();\n    otp[activeInput] = value[0];\n    handleOTPChange(otp);\n  };\n\n  const handleOTPChange = (otp: Array<string>) => {\n    const otpValue = otp.join('');\n    onChange(otpValue);\n  };\n\n  const handlePaste = (event: React.ClipboardEvent<HTMLInputElement>) => {\n    event.preventDefault();\n\n    const otp = getOTPValue();\n    let nextActiveInput = activeInput;\n\n    // Get pastedData in an array of max size (num of inputs - current position)\n    const pastedData = event.clipboardData\n      .getData('text/plain')\n      .slice(0, numInputs - activeInput)\n      .split('');\n\n    // Prevent pasting if the clipboard data contains non-numeric values for number inputs\n    if (isInputNum && pastedData.some((value) => isNaN(Number(value)))) {\n      return;\n    }\n\n    // Paste data from focused input onwards\n    for (let pos = 0; pos < numInputs; ++pos) {\n      if (pos >= activeInput && pastedData.length > 0) {\n        otp[pos] = pastedData.shift() ?? '';\n        nextActiveInput++;\n      }\n    }\n\n    focusInput(nextActiveInput);\n    handleOTPChange(otp);\n  };\n\n  return (\n    <div\n      style={Object.assign({ display: 'flex', alignItems: 'center' }, isStyleObject(containerStyle) && containerStyle)}\n      className={typeof containerStyle === 'string' ? containerStyle : undefined}\n      onPaste={onPaste}\n    >\n      {Array.from({ length: numInputs }, (_, index) => index).map((index) => (\n        <React.Fragment key={index}>\n          {renderInput(\n            {\n              value: getOTPValue()[index] ?? '',\n              placeholder: getPlaceholderValue()?.[index] ?? undefined,\n              ref: (element) => (inputRefs.current[index] = element),\n              onChange: handleChange,\n              onFocus: (event) => handleFocus(event)(index),\n              onBlur: handleBlur,\n              onKeyDown: handleKeyDown,\n              onPaste: handlePaste,\n              autoComplete: 'off',\n              'aria-label': `Please enter OTP character ${index + 1}`,\n              style: Object.assign(\n                !skipDefaultStyles ? ({ width: '1em', textAlign: 'center' } as const) : {},\n                isStyleObject(inputStyle) ? inputStyle : {}\n              ),\n              className: typeof inputStyle === 'string' ? inputStyle : undefined,\n              type: inputType,\n              inputMode: isInputNum ? 'numeric' : 'text',\n              onInput: handleInputChange,\n            },\n            index\n          )}\n          {index < numInputs - 1 && (typeof renderSeparator === 'function' ? renderSeparator(index) : renderSeparator)}\n        </React.Fragment>\n      ))}\n    </div>\n  );\n};\n\nexport type { OTPInputProps, InputProps, AllowedInputTypes };\nexport default OTPInput;\n","import { useState } from \"react\";\r\nimport otpImage from \"../../assets/login/otpImage.jpg\";\r\nimport logo from \"../../assets/logo/logo-with-name.svg\";\r\nimport { EmailSchema } from \"../../services/Validation\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport OtpInput from 'react-otp-input';\r\nimport { generateClient } from \"@aws-amplify/api\";\r\n\r\n\r\nconst ForgotOtp = () => {\r\n  const navigate = useNavigate();\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n    handleSubmit,\r\n  } = useForm({ resolver: yupResolver(EmailSchema) });\r\n  const [error, setError] = useState(\"\");\r\n  const [otp, setOtp] = useState('');\r\n\r\n  const SendOtp = async () => {\r\n    try {\r\n      // Simulate sending OTP to server for verification\r\n      // const storedOtp = sessionStorage.getItem('EmailOtp');\r\n      if (otp) {\r\n        alert('OTP verified, registration complete');\r\n        navigate('/forgotPassword');\r\n      } else {\r\n        setError('OTP is Expired or Invalid');\r\n      }\r\n    } catch (error) {\r\n      setError('Error verifying OTP');\r\n    }\r\n  };\r\n  // const Submit = handleSubmit(async (data) => {\r\n  //  console.log(data);\r\n  //  navigate(\"/forgotOtp\");\r\n  // });\r\n\r\n  return (\r\n    <section className=\"screen-size mx-auto flex h-screen\">\r\n      <div className=\"flex-1 border-r-2  border-[#E9E9E9] center \">\r\n        <img\r\n          className=\"w-full max-w-[500px]\"\r\n          src={otpImage}\r\n          alt=\"Rightside Pic not found\"\r\n        />\r\n      </div>\r\n      <div className=\"flex-1 flex justify-center items-center gap-8 py-20 flex-col w-full px-3\">\r\n        <div>\r\n          {\" \"}\r\n          <img\r\n            className=\"w-full max-w-[450px]\"\r\n            src={logo}\r\n            alt=\"Logo not found\"\r\n          />\r\n        </div>\r\n        <article className=\"text-center space-y-2 mt-10\">\r\n          <h1 className=\"text-dark_grey title\">Welcome Back</h1>\r\n          <p className=\"text-dark_grey text_size_8\">\r\n            Hello again! Dive into your tasks and let's make today productive.\r\n          </p>\r\n        </article>\r\n        {error && <p className=\"text-red\">{error}</p>}\r\n        <section  className=\"space-y-5\">\r\n        <div className=\"mb-4\">\r\n          <OtpInput\r\n            value={otp}\r\n            onChange={setOtp}\r\n            numInputs={6}\r\n            separator={<span>-</span>}\r\n            inputStyle={{\r\n              outline: 'none',\r\n              width: '50px',\r\n              height: '50px',\r\n              margin: '0 5px',\r\n              fontSize: '20px',\r\n              borderRadius: '8px',\r\n              border: '1px solid #ced4da',\r\n            }}\r\n            renderInput={(props) => <input {...props} />}\r\n          /> \r\n        </div>\r\n               \r\n          {/* <div className=\"center \">\r\n            <button className=\"primary_btn text_size_4 my-5\" onClick={Submit}>\r\n            Next\r\n            </button>\r\n          </div> */}\r\n            <div className=\"center \">\r\n            <button className=\"primary_btn text_size_4 my-5\" onClick={SendOtp}>\r\n            Next\r\n            </button>\r\n          </div>\r\n      \r\n        </section>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ForgotOtp;\r\n","import * as Yup from \"yup\";\r\n\r\nexport const LoginSchema = Yup.object({\r\n  userID: Yup.string().required(\"UserID is mandatory\"),\r\n  password: Yup.string().required(\"Password is Required\"),\r\n});\r\nexport const newPasswordSchema = Yup.object({\r\n  newPassword: Yup.string()\r\n  .required(\"New Password is required\")\r\n  .min(8, \"Password must be at least 8 characters\"),\r\nrePassword: Yup.string()\r\n  .required(\"Please confirm your password\")\r\n  .oneOf([Yup.ref(\"newPassword\"), null], \"Passwords must match\"),\r\n});\r\nexport const EmailSchema = Yup.object({\r\n  userName: Yup.string().required(\"User Name is mandatory\"),\r\n\r\n});\r\n\r\nexport const UserSchema = Yup.object({\r\n  empID: Yup.string().required(\"Employee ID is required\"),\r\n  password: Yup.string().required(\"Temporary Password is required\"),\r\n  selectType: Yup.string().required(\"Please select a type\"),\r\n  officialEmail: Yup.string().required(\"OfficialEmail is required\"),\r\n  userID: Yup.string().required(\"User ID is mandatory\"),\r\n  name: Yup.string().required(\"Name is mandatory\"),\r\n  contactNo: Yup.string().required(\"Contact number is mandatory\"),\r\n  position: Yup.string().required(\"Position is mandatory\"),\r\n  department: Yup.string().required(\"Department is mandatory\"),\r\n});\r\n\r\nexport const ChangePasswordSchema = Yup.object({\r\n  userID: Yup.string().required(\"User ID is mandatory\"),\r\n  currentPassword: Yup.string().required(\"Current Password is mandatory\"),\r\n  password: Yup.string()\r\n    .min(8, \"Password must be at least 8 characters\")\r\n    .max(15, \"Password cannot exceed 15 characters\")\r\n    .matches(\r\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])/,\r\n      \"Password must contain at least one lowercase letter, one uppercase letter, one number, and one special character\"\r\n    )\r\n    .required(\"Password is required\"),\r\n\r\n  confirmPassword: Yup.string()\r\n    .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\")\r\n    .required(\"Confirm password is required\"),\r\n});\r\n\r\nexport const ApplicantSchema = Yup.object().shape({\r\n  profilePhoto: Yup.mixed()\r\n    .required(\"Upload Photo is mandatory\")\r\n    .test(\"fileType\", \"Profile photo must be a JPG or PNG file\", (value) =>\r\n      value ? /\\.(jpg|jpeg|png)$/.test(value.name) : false\r\n    ),\r\n  agent: Yup.string().notRequired(),\r\n  position: Yup.string().required(\"Position is mandatory\"),\r\n  contractType: Yup.string().required(\"Contract Type mandatory\"),\r\n  empType: Yup.string().required(\"Employee Type mandatory\"),\r\n  name: Yup.string()\r\n    .min(3, \"Name must be at least 3 characters\")\r\n    .required(\"Name is mandatory\"),\r\n  chinese: Yup.string().notRequired(),\r\n  gender: Yup.string().required(\"Gender is mandatory\"),\r\n  // age: Yup.string().required(\"age is mandatory\"),\r\n  dob: Yup.string().required(\"Date of Birth is mandatory\"),\r\n  age: Yup.number()\r\n    .min(20, \"Age must be at least 20\")\r\n    .max(99, \"Age cannot exceed 99\")\r\n    .required(\"Age is required\"),\r\n  email: Yup.string()\r\n    .email(\"Please enter a valid email\")\r\n    .required(\"Email is required\"),\r\n  cob: Yup.string().required(\"Country of Birth is mandatory\"),\r\n  nationality: Yup.string().required(\"Nationality is mandatory\"),\r\n  otherNation: Yup.string().when(\"nationality\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"other\",\r\n    then: () => Yup.string().required(\"Other Nationality is required\"),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n  marital: Yup.string().required(\"Marital status is mandatory\"),\r\n  race: Yup.string().required(\"Race is mandatory\"),\r\n  otherRace: Yup.string().when(\"race\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"other\",\r\n    then: () => Yup.string().required(\"Other Race is required\"),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n  religion: Yup.string().required(\"Religion is mandatory\"),\r\n  otherReligion: Yup.string().when(\"religion\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"other\",\r\n    then: () => Yup.string().required(\"Other religion is required\"),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n});\r\n\r\nexport const PersonalSchema = (nationality) => {\r\n  console.log(nationality);\r\n  const isBruneian =\r\n    nationality &&\r\n    (nationality.trim().toLowerCase() === \"bruneian\" ||\r\n      nationality.trim().toLowerCase() === \"brunei pr\");\r\n  console.log(isBruneian);\r\n\r\n  return Yup.object({\r\n    bwnIcNo: isBruneian\r\n      ? Yup.string()\r\n          .matches(\r\n            /^\\d{2}-\\d{6}$/,\r\n            \"I/C Number must be in the format XX-XXXXXX, where X is a digit\"\r\n          )\r\n          .required(\"I/C Number is mandatory for Bruneians\")\r\n      : Yup.string().notRequired(),\r\n\r\n    bwnIcColour: isBruneian\r\n      ? Yup.string().required(\"I/C Colour is mandatory for Bruneians\")\r\n      : Yup.string().notRequired(),\r\n\r\n    bwnIcExpiry: isBruneian\r\n      ? Yup.string().required(\"I/C Expiry is mandatory for Bruneians\")\r\n      : Yup.string().notRequired(),\r\n    ppNo: isBruneian\r\n      ? Yup.string().notRequired()\r\n      : Yup.string().required(\"Passport Number is mandatory\"),\r\n\r\n    ppIssued: isBruneian\r\n      ? Yup.string().notRequired()\r\n      : Yup.string().required(\"Passport issued is mandatory\"),\r\n    ppExpiry: isBruneian\r\n      ? Yup.string().notRequired()\r\n      : Yup.string().required(\"Passport Expiry is mandatory\"),\r\n    ppDestinate: isBruneian\r\n      ? Yup.string().notRequired()\r\n      : Yup.string().required(\"Passport destination is mandatory\"),\r\n\r\n    alternateNo: Yup.string().notRequired(),\r\n    contactNo: Yup.string().required(\"Contact Number is mandatory\"),\r\n    presentAddress: Yup.string().required(\"Present Address is mandatory\"),\r\n    permanentAddress: Yup.string().required(\"Permanent Address is mandatory\"),\r\n    driveLic: Yup.string().notRequired(),\r\n    lang: Yup.string().required(\"Language is mandatory\"),\r\n    familyDetails: Yup.array()\r\n      .of(\r\n        Yup.object().shape({\r\n          name: Yup.string().notRequired(),\r\n          relationship: Yup.string().notRequired(),\r\n          age: Yup.string().notRequired(),\r\n          occupation: Yup.string().notRequired(),\r\n          place: Yup.string().notRequired(),\r\n        })\r\n      )\r\n      .notRequired(),\r\n    eduDetails: Yup.array()\r\n      .of(\r\n        Yup.object().shape({\r\n          university: Yup.string().required(\"University Name is mandatory \"),\r\n          fromDate: Yup.string().required(\"From Date is mandatory\"),\r\n          toDate: Yup.string().required(\"To Date is mandatory\"),\r\n          degree: Yup.string().required(\"Degree is mandatory\"),\r\n        })\r\n      )\r\n      .required(\"At least one education detail is mandatory\"),\r\n    workExperience: Yup.array().of(\r\n      Yup.object().shape({\r\n        fromDate: Yup.string().notRequired(),\r\n        toDate: Yup.string().notRequired(),\r\n        companyAndAddress: Yup.string().notRequired(),\r\n        position: Yup.string().notRequired(),\r\n        salary: Yup.string().notRequired(),\r\n        reasonLeaving: Yup.string().notRequired(),\r\n      })\r\n    ),\r\n  });\r\n};\r\n\r\nexport const EducationSchema = Yup.object({\r\n  referees: Yup.array()\r\n    .of(\r\n      Yup.object().shape({\r\n        name: Yup.string().notRequired(),\r\n        address: Yup.string().notRequired(),\r\n        phoneNumber: Yup.string().notRequired(),\r\n        profession: Yup.string().notRequired(),\r\n      })\r\n    )\r\n    .notRequired(),\r\n  relatives: Yup.array()\r\n    .of(\r\n      Yup.object().shape({\r\n        name: Yup.string().notRequired(),\r\n        position: Yup.string().notRequired(),\r\n        relationship: Yup.string().notRequired(),\r\n      })\r\n    )\r\n    .notRequired(),\r\n  description: Yup.string().notRequired(),\r\n  emgDetails: Yup.array()\r\n    .of(\r\n      Yup.object().shape({\r\n        name: Yup.string().required(\"Name is mandatory\"),\r\n        relationship: Yup.string().required(\"Relationship is mandatory\"),\r\n        address: Yup.string().required(\"Address is mandatory\"),\r\n        phoneNumber: Yup.string().required(\"Phone Number is mandatory\"),\r\n        bloodGroup: Yup.string().notRequired(),\r\n      })\r\n    )\r\n    .required(\"At least one emergency contact is mandatory\"),\r\n  disease: Yup.string().notRequired(),\r\n  liquor: Yup.string().notRequired(),\r\n  crime: Yup.string().notRequired(),\r\n  diseaseDesc: Yup.string().when(\"disease\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"yes\",\r\n    then: () => Yup.string().notRequired(),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n  liquorDesc: Yup.string().when(\"liquor\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"yes\",\r\n    then: () => Yup.string().notRequired(),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n  crimeDesc: Yup.string().when(\"crime\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"yes\",\r\n    then: () => Yup.string().notRequired(),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n});\r\n\r\nexport const CandidatesSchema = Yup.object().shape({\r\n  salaryExpectation: Yup.string().notRequired(),\r\n  noExperience: Yup.string().required(\"Experience is required\"),\r\n  noticePeriod: Yup.string().required(\"Notice period is required\"),\r\n  empStatement: Yup.string().required(\"Employee Statement is required\"),\r\n  perIS: Yup.string().required(\"Interview status is required\"),\r\n  perID: Yup.string().when(\"perInterviewStatus\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"yes\",\r\n    then: () => Yup.string().notRequired(),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n  supportInfo: Yup.string(),\r\n\r\n  // File validation for resume (e.g., PDF, Word, Excel, or images)\r\n  uploadResume: Yup.mixed()\r\n    .required(\"Resume is required\")\r\n    .test(\r\n      \"fileType\",\r\n      \"Only PDF, Word, Excel, or image formats (JPEG, JPG, PNG, SVG) are allowed\",\r\n      (value) => {\r\n        return (\r\n          value &&\r\n          [\r\n            \"application/pdf\", // PDF\r\n            \"application/msword\", // Word .doc\r\n            \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\", // Word .docx\r\n            \"application/vnd.ms-excel\", // Excel .xls\r\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", // Excel .xlsx\r\n            \"image/jpeg\",\r\n            \"image/jpg\",\r\n            \"image/png\",\r\n            \"image/svg+xml\", // Images\r\n          ].includes(value.type)\r\n        );\r\n      }\r\n    ),\r\n\r\n  // File validation for certificate (e.g., PDF, Word, Excel, or images)\r\n  uploadCertificate: Yup.mixed()\r\n    .required(\"Certificate is required\")\r\n    .test(\r\n      \"fileType\",\r\n      \"Only PDF, Word, Excel, or image formats (JPEG, JPG, PNG, SVG) are allowed\",\r\n      (value) => {\r\n        return (\r\n          value &&\r\n          [\r\n            \"application/pdf\", // PDF\r\n            \"application/msword\", // Word .doc\r\n            \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\", // Word .docx\r\n            \"application/vnd.ms-excel\", // Excel .xls\r\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", // Excel .xlsx\r\n            \"image/jpeg\",\r\n            \"image/jpg\",\r\n            \"image/png\",\r\n            \"image/svg+xml\", // Images\r\n          ].includes(value.type)\r\n        );\r\n      }\r\n    ),\r\n\r\n  // File validation for passport (e.g., PDF, Word, Excel, or images)\r\n  uploadPp: Yup.mixed()\r\n    .required(\"Passport is required\")\r\n    .test(\r\n      \"fileType\",\r\n      \"Only PDF, Word, Excel, or image formats (JPEG, JPG, PNG, SVG) are allowed\",\r\n      (value) => {\r\n        return (\r\n          value &&\r\n          [\r\n            \"application/pdf\", // PDF\r\n            \"application/msword\", // Word .doc\r\n            \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\", // Word .docx\r\n            \"application/vnd.ms-excel\", // Excel .xls\r\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", // Excel .xlsx\r\n            \"image/jpeg\",\r\n            \"image/jpg\",\r\n            \"image/png\",\r\n            \"image/svg+xml\", // Images\r\n          ].includes(value.type)\r\n        );\r\n      }\r\n    ),\r\n});\r\n\r\n// Define the validation schema using Yup\r\nexport const EmpRequisitionSchema = Yup.object().shape({\r\n  nameReq: Yup.string().notRequired(),\r\n  requestorID: Yup.string().notRequired(),\r\n  approverID: Yup.string().notRequired(),\r\n  department: Yup.string().required(\"Department is required\"),\r\n  project: Yup.string().required(\"Project is required\"),\r\n  position: Yup.string().required(\"Position is required\"),\r\n  quantity: Yup.number()\r\n    .typeError(\"Quantity must be a number\")\r\n    .required(\"Quantity is required\"),\r\n  reasonForReq: Yup.string().required(\"Reason for request is required\"),\r\n  justification: Yup.string().required(\"Justification is required\"),\r\n  replacementFor: Yup.string().notRequired(),\r\n  qualification: Yup.string().required(\"State Qualification is required\"),\r\n  tentativeDate: Yup.date()\r\n    .min(new Date(), \"Tentative date must be in the future\")\r\n    .required(\"Tentative date is required\")\r\n    .typeError(\"Please enter a valid date\"),\r\n  status: Yup.string().notRequired(),\r\n  remarkReq: Yup.string().notRequired(),\r\n});\r\n\r\n\r\nexport const InterviewScheduleSchema = Yup.object().shape({\r\n  interDate: Yup.date()\r\n  .required(\"Date is required\")\r\n  .typeError(\"Date is required\")\r\n  .min(\r\n    new Date(),\r\n    \"The selected date is in the past. Please choose a valid date.\"\r\n  ),\r\n  interTime: Yup.string()\r\n  .required(\"Time is required\")\r\n  .matches(\r\n    /^(0[8-9]|1[0-5]):([0-5]\\d)$/,\r\n    \"Please choose a time between 8:00 AM and 4:00 PM.\"\r\n  ),\r\n  venue: Yup.string().required(\"Venue is required\"),\r\n  interType: Yup.string().notRequired(),\r\n  empBadgeNo: Yup.string().notRequired(\"Badge Number is required\"),\r\n  manager:  Yup.string().notRequired(\"Manager is required\"),\r\n  message: Yup.string().optional(),\r\n});\r\n\r\nexport const hiringJobSchema = Yup.object().shape({\r\n  jobTitle: Yup.string().required(\"Job Title is required\"),\r\n  location: Yup.string().notRequired(),\r\n  jobDesc: Yup.string().notRequired(),\r\n  experience: Yup.string().required(\"Experience is required\"),\r\n  quantity: Yup.string().notRequired(),\r\n  startDate: Yup.date()\r\n    .nullable()\r\n    .transform((value, originalValue) => (originalValue === \"\" ? null : value))\r\n    .notRequired(),\r\n  expiryDate: Yup.date()\r\n    .nullable()\r\n    .transform((value, originalValue) => (originalValue === \"\" ? null : value))\r\n    .notRequired()\r\n    .test(\"is-future-date\", \"Only Future Dates Allowed\", function (value) {\r\n      return !value || new Date(value) > new Date();\r\n    }),\r\n    uploadJobDetails:Yup.string().notRequired()\r\n});\r\n\r\n//WorkPass Tracking Forms Schema - Recruitment \r\nexport const SawpFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  sawpLtrReq: Yup.date().notRequired(),\r\n  sawpLtrRece: Yup.date().notRequired(),\r\n  sawpFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const DoeFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  doeSubmit: Yup.date().notRequired(),\r\n  doeApproval: Yup.date().notRequired(),\r\n  doeValid: Yup.date().notRequired(),\r\n  doeRefNo: Yup.string().notRequired(),\r\n  doeFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const NlmsFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  nlmsSubmit: Yup.date().notRequired(),\r\n  nlmsSubmitRefNo: Yup.string().notRequired(),\r\n  nlmsApproval: Yup.date().notRequired(),\r\n  nlmsValid: Yup.date().notRequired(),\r\n  ldRefNo: Yup.string().notRequired(),\r\n  nlmsFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const BankFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  bgSubmit: Yup.date().notRequired(),\r\n  bgRece: Yup.date().notRequired(),\r\n  bgValid: Yup.date().notRequired(),\r\n  bgRefNo: Yup.string().notRequired(),\r\n  bgAmount: Yup.string().notRequired(),\r\n  bgFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const JitpaFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  jpTbaPurchase: Yup.date().notRequired(),\r\n  jpEndorsement: Yup.date().notRequired(),\r\n  jitpaValid: Yup.date().notRequired(),\r\n  jpAmount: Yup.string().notRequired(),\r\n  jitpaFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const LabourDepFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  labDepReceiptNo: Yup.string().notRequired(),\r\n  labDepAmount: Yup.string().notRequired(),\r\n  labEndrose: Yup.date().notRequired(),\r\n  labDepFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const ImmigrationFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  immbdNo: Yup.string().notRequired(),\r\n  docSubmit: Yup.date().notRequired(),\r\n  visaApproval: Yup.date().notRequired(),\r\n  visaRefNo: Yup.string().notRequired(),\r\n  visaFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const AirTktFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  departure: Yup.date().notRequired(),\r\n  arrival: Yup.date().notRequired(),\r\n  cityName: Yup.string().notRequired(),\r\n  airFare: Yup.string().notRequired(),\r\n  airTktFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const NonLocalMOBFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  mobSignDate: Yup.date().notRequired(),\r\n  agent: Yup.string().notRequired(),\r\n  remarkNLMob: Yup.string().notRequired(),\r\n  mobFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});"],"names":["isStyleObject","obj","OTPInput","_a","_b","value","_c","numInputs","onChange","onPaste","renderInput","_d","shouldAutoFocus","_e","inputType","renderSeparator","placeholder","containerStyle","inputStyle","_f","skipDefaultStyles","_g","React","activeInput","setActiveInput","inputRefs","getOTPValue","toString","split","isInputNum","current","slice","focus","getPlaceholderValue","length","console","error","isInputValueValid","isNaN","Number","trim","handleChange","event","target","changeCodeAtFocus","focusInput","handleInputChange","nativeEvent","some","cellInput","handleOTPChange","data","preventDefault","handleBlur","handleKeyDown","otp","code","key","includes","index","Math","max","min","select","otpValue","join","handlePaste","nextActiveInput","pastedData","clipboardData","getData","pos","shift","style","Object","assign","display","alignItems","className","undefined","Array","from","_","map","ref","element","onFocus","handleFocus","onBlur","onKeyDown","autoComplete","concat","width","textAlign","type","inputMode","onInput","ForgotOtp","navigate","useNavigate","register","formState","errors","handleSubmit","useForm","resolver","yupResolver","EmailSchema","setError","useState","setOtp","_jsxs","children","_jsx","src","otpImage","alt","logo","OtpInput","separator","outline","height","margin","fontSize","borderRadius","border","props","_objectSpread","onClick","async","alert","LoginSchema","Yup","userID","required","password","newPasswordSchema","newPassword","rePassword","oneOf","userName","UserSchema","empID","selectType","officialEmail","name","contactNo","position","department","ApplicantSchema","currentPassword","matches","confirmPassword","shape","profilePhoto","test","agent","notRequired","contractType","empType","chinese","gender","dob","age","email","cob","nationality","otherNation","when","is","toLowerCase","then","otherwise","marital","race","otherRace","religion","otherReligion","PersonalSchema","log","isBruneian","bwnIcNo","bwnIcColour","bwnIcExpiry","ppNo","ppIssued","ppExpiry","ppDestinate","alternateNo","presentAddress","permanentAddress","driveLic","lang","familyDetails","of","relationship","occupation","place","eduDetails","university","fromDate","toDate","degree","workExperience","companyAndAddress","salary","reasonLeaving","EducationSchema","referees","address","phoneNumber","profession","relatives","description","emgDetails","bloodGroup","disease","liquor","crime","diseaseDesc","liquorDesc","crimeDesc","CandidatesSchema","salaryExpectation","noExperience","noticePeriod","empStatement","perIS","perID","supportInfo","uploadResume","uploadCertificate","uploadPp","EmpRequisitionSchema","nameReq","requestorID","approverID","project","quantity","typeError","reasonForReq","justification","replacementFor","qualification","tentativeDate","Date","status","remarkReq","InterviewScheduleSchema","interDate","interTime","venue","interType","empBadgeNo","manager","message","optional","hiringJobSchema","jobTitle","location","jobDesc","experience","startDate","nullable","transform","originalValue","expiryDate","uploadJobDetails","SawpFormSchema","tempID","sawpLtrReq","sawpLtrRece","sawpFile","DoeFormSchema","doeSubmit","doeApproval","doeValid","doeRefNo","doeFile","NlmsFormSchema","nlmsSubmit","nlmsSubmitRefNo","nlmsApproval","nlmsValid","ldRefNo","nlmsFile","BankFormSchema","bgSubmit","bgRece","bgValid","bgRefNo","bgAmount","bgFile","JitpaFormSchema","jpTbaPurchase","jpEndorsement","jitpaValid","jpAmount","jitpaFile","LabourDepFormSchema","labDepReceiptNo","labDepAmount","labEndrose","labDepFile","ImmigrationFormSchema","immbdNo","docSubmit","visaApproval","visaRefNo","visaFile","AirTktFormSchema","departure","arrival","cityName","airFare","airTktFile","NonLocalMOBFormSchema","mobSignDate","remarkNLMob","mobFile"],"sourceRoot":""}