{"version":3,"file":"static/js/600.3a0a6faa.chunk.js","mappings":"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","sources":["../node_modules/@aws-amplify/auth/src/providers/cognito/apis/confirmResetPassword.ts","../node_modules/@aws-amplify/auth/src/foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmForgotPasswordClient.ts","pages/forgotPassword/ForgotPassword.jsx","services/Validation.jsx","../node_modules/@aws-amplify/auth/src/foundation/factories/serviceClients/cognitoIdentityProvider/createForgotPasswordClient.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/apis/resetPassword.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { getUserContextData } from '../utils/userContextData';\nimport { createConfirmForgotPasswordClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\n/**\n * Confirms the new password and verification code to reset the password.\n *\n * @param input -  The ConfirmResetPasswordInput object.\n * @throws -{@link ConfirmForgotPasswordException }\n * Thrown due to an invalid confirmation code or password.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty confirmation code, password or username.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function confirmResetPassword(input) {\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolClientId, userPoolId, userPoolEndpoint } = authConfig;\n    const { username, newPassword } = input;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptyConfirmResetPasswordUsername);\n    assertValidationError(!!newPassword, AuthValidationErrorCode.EmptyConfirmResetPasswordNewPassword);\n    const code = input.confirmationCode;\n    assertValidationError(!!code, AuthValidationErrorCode.EmptyConfirmResetPasswordConfirmationCode);\n    const metadata = input.options?.clientMetadata;\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const confirmForgotPassword = createConfirmForgotPasswordClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    await confirmForgotPassword({\n        region: getRegionFromUserPoolId(authConfig.userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmResetPassword),\n    }, {\n        Username: username,\n        ConfirmationCode: code,\n        Password: newPassword,\n        ClientMetadata: metadata,\n        ClientId: authConfig.userPoolClientId,\n        UserContextData,\n    });\n}\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler';\nimport { createUserPoolDeserializer, createUserPoolSerializer, } from './shared/serde';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants';\nexport const createConfirmForgotPasswordClient = (config) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('ConfirmForgotPassword'), createUserPoolDeserializer(), {\n    ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n    ...config,\n});\n","import { useState, useEffect } from \"react\";\r\nimport resetImage from \"../../assets/login/resetImage.jpg\";\r\nimport logo from \"../../assets/logo/logo-with-name.svg\";\r\nimport { newPasswordSchema } from \"../../services/Validation\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { IoEyeOffOutline, IoEyeOutline } from \"react-icons/io5\";\r\nimport { resetPassword, confirmResetPassword } from \"aws-amplify/auth\";\r\n\r\nconst ForgotPassword = () => {\r\n  const [isNewPasswordVisible, setIsNewPasswordVisible] = useState(false);\r\n  const [isRePasswordVisible, setIsRePasswordVisible] = useState(false);\r\n  const [otpTimer, setOtpTimer] = useState(60);\r\n  const [isResendDisabled, setIsResendDisabled] = useState(true);\r\n  const [isOtpExpired, setIsOtpExpired] = useState(false);\r\n  const [newPassword, setNewPassword] = useState(\"\");\r\n  const [otp, setOtp] = useState(null);\r\n\r\n  // Correctly passing resolver with validation schema\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(newPasswordSchema),\r\n  });\r\n\r\n  const [error, setError] = useState(\"\");\r\n  const username = localStorage.getItem(\"username\");\r\n  // console.log(username);\r\n\r\n  useEffect(() => {\r\n    if (otpTimer > 0) {\r\n      const timerInterval = setInterval(() => {\r\n        setOtpTimer((prev) => prev - 1);\r\n      }, 1000);\r\n\r\n      return () => clearInterval(timerInterval);\r\n    } else {\r\n      setIsResendDisabled(false);\r\n      setIsOtpExpired(true);\r\n    }\r\n  }, [otpTimer]);\r\n\r\n  const handleResendOtp = async (otp) => {\r\n    try {\r\n      await resetPassword({ username: username });\r\n      alert(\"OTP has been resent to your email.\");\r\n      setOtpTimer(60);\r\n      setIsResendDisabled(true);\r\n      setIsOtpExpired(false);\r\n    } catch (err) {\r\n      // console.log(username);\r\n\r\n      setError(err.message || err);\r\n    }\r\n  };\r\n\r\n  const handleOtpSubmit = async (data) => {\r\n    const { otp, newPassword } = data;\r\n\r\n    try {\r\n      await confirmResetPassword({\r\n        username,\r\n        confirmationCode: otp,\r\n        newPassword,\r\n      });\r\n      localStorage.removeItem(\"username\");\r\n      localStorage.removeItem(\"FPSWD\");\r\n      alert(\"Password reset successful. Please log in.\");\r\n      window.location.href = \"/login\";\r\n    } catch (err) {\r\n      setError(err.message || err);\r\n    }\r\n  };\r\n\r\n  // console.log(\"USERNAME\",username);\r\n\r\n  return (\r\n    <section className=\"screen-size mx-auto flex h-full\">\r\n      <div className=\"flex-1 border-r-2 border-[#E9E9E9] center\">\r\n        <img\r\n          className=\"w-full max-w-[450px]\"\r\n          src={resetImage}\r\n          alt=\"Rightside Pic not found\"\r\n        />\r\n      </div>\r\n      <div className=\"flex-1 flex items-center gap-8 py-14 flex-col w-full px-3\">\r\n        <div>\r\n          <img\r\n            className=\"w-full max-w-[450px]\"\r\n            src={logo}\r\n            alt=\"Logo not found\"\r\n          />\r\n        </div>\r\n        <article className=\"space-y-2 mt-5\">\r\n          <h1 className=\"text-dark_grey title\">Reset Password</h1>\r\n        </article>\r\n        {error && <p className=\"text-red\">{error}</p>}\r\n        <form className=\"space-y-4\" onSubmit={handleSubmit(handleOtpSubmit)}>\r\n          {/* OTP Field */}\r\n          {/* OTP Field */}\r\n          <div className=\"w-[400px] space-y-1\">\r\n            <label htmlFor=\"otp\" className=\"text-dark_grey text_size_8\">\r\n              Enter OTP\r\n            </label>\r\n            <div className=\"shadow-md shadow-[#00000040] border border-[#D3D3D3] overflow-hidden rounded-lg py-1 pl-3 pr-4 w-full center\">\r\n              <input\r\n                type=\"number\"\r\n                className=\"outline-none py-2 w-full\"\r\n                placeholder=\"Enter OTP\"\r\n                value={otp} // Use otp state here\r\n                {...register(\"otp\")}\r\n                // disabled={isOtpExpired}\r\n                onChange={(e) => setOtp(e.target.value)} // Update otp state on change\r\n              />\r\n            </div>\r\n            {isOtpExpired && !otp && (\r\n              <p className=\"text-red text-xs\">\r\n                OTP has been expired, Please resend OTP.\r\n              </p>\r\n            )}\r\n            <p className=\"text-[red] text-xs\">{errors.otp?.message}</p>\r\n          </div>\r\n\r\n          <div className=\"flex justify-end\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"text-blue text-sm font font-semibold\"\r\n              onClick={handleResendOtp}\r\n              disabled={isResendDisabled}\r\n            >\r\n              {isResendDisabled ? `Resend OTP in ${otpTimer}s` : \"Resend OTP\"}\r\n            </button>\r\n          </div>\r\n\r\n          {/* New Password Field */}\r\n          <div className=\"w-[400px] space-y-1\">\r\n            <label htmlFor=\"newPassword\" className=\"text-dark_grey text_size_8\">\r\n              New Password\r\n            </label>\r\n            <div className=\"shadow-md shadow-[#00000040] border border-[#D3D3D3] overflow-hidden rounded-lg py-1 pl-3 pr-4 w-full center\">\r\n              <input\r\n                type={isNewPasswordVisible ? \"text\" : \"password\"}\r\n                className=\"outline-none py-2 w-full\"\r\n                placeholder=\"Enter new password\"\r\n                {...register(\"newPassword\")}\r\n                onChange={(e) => setNewPassword(e.target.value)}\r\n              />\r\n              {isNewPasswordVisible ? (\r\n                <IoEyeOutline\r\n                  className=\"text-2xl text-[#837E7E]\"\r\n                  onClick={() => setIsNewPasswordVisible(!isNewPasswordVisible)}\r\n                />\r\n              ) : (\r\n                <IoEyeOffOutline\r\n                  className=\"text-2xl text-[#837E7E]\"\r\n                  onClick={() => setIsNewPasswordVisible(!isNewPasswordVisible)}\r\n                />\r\n              )}\r\n            </div>\r\n            <p className=\"text-[red] text-xs my-2\">\r\n              {errors.newPassword?.message}\r\n            </p>\r\n          </div>\r\n\r\n          {/* Re-enter Password Field */}\r\n          <div className=\"w-[400px] space-y-1\">\r\n            <label htmlFor=\"rePassword\" className=\"text-dark_grey text_size_8\">\r\n              Re-enter Password\r\n            </label>\r\n            <div className=\"shadow-md shadow-[#00000040] border border-[#D3D3D3] overflow-hidden rounded-lg py-1 pl-3 pr-4 w-full center\">\r\n              <input\r\n                type={isRePasswordVisible ? \"text\" : \"password\"}\r\n                className=\"outline-none py-2 w-full\"\r\n                placeholder=\"Re-enter your password\"\r\n                id=\"rePassword\"\r\n                {...register(\"rePassword\")}\r\n              />\r\n              {isRePasswordVisible ? (\r\n                <IoEyeOutline\r\n                  className=\"text-2xl text-[#837E7E]\"\r\n                  onClick={() => setIsRePasswordVisible(!isRePasswordVisible)}\r\n                />\r\n              ) : (\r\n                <IoEyeOffOutline\r\n                  className=\"text-2xl text-[#837E7E]\"\r\n                  onClick={() => setIsRePasswordVisible(!isRePasswordVisible)}\r\n                />\r\n              )}\r\n            </div>\r\n            <p className=\"text-[red] text-xs my-2\">\r\n              {errors.rePassword?.message}\r\n            </p>\r\n          </div>\r\n\r\n          {/* Submit Button */}\r\n          <div className=\"center\">\r\n            <button type=\"submit\" className=\"primary_btn text_size_4 my-3\">\r\n              Submit\r\n            </button>\r\n          </div>\r\n          <hr className=\"border-[1.5px] text-[#B3B3B3] w-[100%]\" />\r\n          <div\r\n            className=\"center\"\r\n            onClick={() => {\r\n              localStorage.removeItem(\"FPSWD\");\r\n              window.location.href = \"/login\";\r\n            }}\r\n          >\r\n            <button className=\"\">\r\n              Back to {\"\"}\r\n              <span className=\"text-blue\">Login</span>\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ForgotPassword;\r\n","import * as Yup from \"yup\";\r\n\r\nexport const LoginSchema = Yup.object({\r\n  userID: Yup.string().required(\"UserID is mandatory\"),\r\n  password: Yup.string().required(\"Password is Required\"),\r\n});\r\nexport const newPasswordSchema = Yup.object({\r\n  newPassword: Yup.string()\r\n  .required(\"New Password is required\")\r\n  .min(8, \"Password must be at least 8 characters\"),\r\nrePassword: Yup.string()\r\n  .required(\"Please confirm your password\")\r\n  .oneOf([Yup.ref(\"newPassword\"), null], \"Passwords must match\"),\r\n});\r\n\r\n\r\nexport const EmailSchema = Yup.object({\r\n  userName: Yup.string().required(\"User Name is mandatory\"),\r\n\r\n});\r\n\r\nexport const UserSchema = Yup.object({\r\n  empID: Yup.string().required(\"Employee ID is required\"),\r\n  password: Yup.string().required(\"Temporary Password is required\"),\r\n  selectType: Yup.string().required(\"Please select a type\"),\r\n  officialEmail: Yup.string().required(\"OfficialEmail is required\"),\r\n  userID: Yup.string().required(\"User ID is mandatory\"),\r\n  name: Yup.string().required(\"Name is mandatory\"),\r\n  contactNo: Yup.string().required(\"Contact number is mandatory\"),\r\n  position: Yup.string().required(\"Position is mandatory\"),\r\n  department: Yup.string().required(\"Department is mandatory\"),\r\n});\r\n\r\nexport const ChangePasswordSchema = Yup.object({\r\n  userID: Yup.string().required(\"User ID is mandatory\"),\r\n  currentPassword: Yup.string().required(\"Current Password is mandatory\"),\r\n  password: Yup.string()\r\n    .min(8, \"Password must be at least 8 characters\")\r\n    .max(15, \"Password cannot exceed 15 characters\")\r\n    .matches(\r\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])/,\r\n      \"Password must contain at least one lowercase letter, one uppercase letter, one number, and one special character\"\r\n    )\r\n    .required(\"Password is required\"),\r\n\r\n  confirmPassword: Yup.string()\r\n    .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\")\r\n    .required(\"Confirm password is required\"),\r\n});\r\n\r\nexport const ApplicantSchema = Yup.object().shape({\r\n  profilePhoto: Yup.string().required(\"Profile Photo is mandatory\"),\r\n  agent: Yup.string().notRequired(),\r\n  position: Yup.string().required(\"Position is mandatory\"),\r\n  contractType: Yup.string().notRequired(),\r\n  empType: Yup.string().notRequired(),\r\n  name: Yup.string()\r\n    .min(3, \"Name must be at least 3 characters\")\r\n    .required(\"Name is mandatory\"),\r\n  chinese: Yup.string().notRequired(),\r\n  gender: Yup.string().required(\"Gender is mandatory\"),\r\n  // age: Yup.string().required(\"age is mandatory\"),\r\n  dob: Yup.string().required(\"Date of Birth is mandatory\"),\r\n  age: Yup.number()\r\n    .min(20, \"Age must be at least 20\")\r\n    .max(99, \"Age cannot exceed 99\")\r\n    .required(\"Age is required\"),\r\n  email: Yup.string()\r\n    .email(\"Please enter a valid email\")\r\n    .required(\"Email is required\"),\r\n  cob: Yup.string().required(\"Country of Birth is mandatory\"),\r\n  nationality: Yup.string().required(\"Nationality is mandatory\"),\r\n  otherNation: Yup.string().when(\"nationality\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"other\",\r\n    then: () => Yup.string().required(\"Other Nationality is required\"),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n  marital: Yup.string().required(\"Marital status is mandatory\"),\r\n  race: Yup.string().required(\"Race is mandatory\"),\r\n  otherRace: Yup.string().when(\"race\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"other\",\r\n    then: () => Yup.string().required(\"Other Race is required\"),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n  religion: Yup.string().required(\"Religion is mandatory\"),\r\n  otherReligion: Yup.string().when(\"religion\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"other\",\r\n    then: () => Yup.string().required(\"Other religion is required\"),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n});\r\n\r\nexport const PersonalSchema = (nationality) => {\r\n  // const isBruneian =\r\n  //   nationality &&\r\n  //   (nationality.trim().toLowerCase() === \"bruneian\" ||\r\n  //     nationality.trim().toLowerCase() === \"brunei pr\");\r\n\r\n  return Yup.object({\r\n    bwnIcNo: Yup.string().notRequired(),\r\n\r\n    bwnIcColour: Yup.string().notRequired(),\r\n\r\n    bwnIcExpiry: Yup.string().notRequired(),\r\n    ppNo: \r\n    // isBruneian\r\n    //   ? \r\n      Yup.string().notRequired(),\r\n      // : Yup.string().required(\"Passport Number is mandatory\"),\r\n\r\n    ppIssued: Yup.string().notRequired(),\r\n    ppExpiry: Yup.string().notRequired(),\r\n      \r\n    ppDestinate: Yup.string().notRequired(),\r\n\r\n    alternateNo: Yup.string().notRequired(),\r\n    contactNo: Yup.string().required(\"Contact Number is mandatory\"),\r\n    presentAddress: Yup.string().required(\"Present Address is mandatory\"),\r\n    permanentAddress: Yup.string().notRequired(),\r\n    driveLic: Yup.string().notRequired(),\r\n    // lang: Yup.string().required(\"Language is mandatory\"),\r\n    OtherLang: Yup.string().notRequired(),\r\n    familyDetails: Yup.array()\r\n      .of(\r\n        Yup.object().shape({\r\n          name: Yup.string().notRequired(),\r\n          relationship: Yup.string().notRequired(),\r\n          age: Yup.string().notRequired(),\r\n          occupation: Yup.string().notRequired(),\r\n          place: Yup.string().notRequired(),\r\n        })\r\n      )\r\n      .notRequired(),\r\n    eduDetails: Yup.array()\r\n      .of(\r\n        Yup.object().shape({\r\n          university: Yup.string().notRequired(),\r\n          fromDate: Yup.string().notRequired(),\r\n          toDate: Yup.string().notRequired(),\r\n          degree: Yup.string().notRequired(),\r\n        })\r\n      ),\r\n      workExperience: Yup.array().of(\r\n      Yup.object().shape({\r\n        fromDate: Yup.string().notRequired(),\r\n        toDate: Yup.string().notRequired(),\r\n        companyAndAddress: Yup.string().notRequired(),\r\n        position: Yup.string().notRequired(),\r\n        salary: Yup.string().notRequired(),\r\n        reasonLeaving: Yup.string().notRequired(),\r\n      })\r\n    ),\r\n  });\r\n};\r\n\r\nexport const EducationSchema = Yup.object({\r\n  referees: Yup.array()\r\n    .of(\r\n      Yup.object().shape({\r\n        name: Yup.string().notRequired(),\r\n        address: Yup.string().notRequired(),\r\n        phoneNumber: Yup.string().notRequired(),\r\n        profession: Yup.string().notRequired(),\r\n      })\r\n    )\r\n    .notRequired(),\r\n  relatives: Yup.array()\r\n    .of(\r\n      Yup.object().shape({\r\n        name: Yup.string().notRequired(),\r\n        position: Yup.string().notRequired(),\r\n        relationship: Yup.string().notRequired(),\r\n      })\r\n    )\r\n    .notRequired(),\r\n  description: Yup.string().notRequired(),\r\n  emgDetails: Yup.array()\r\n    .of(\r\n      Yup.object().shape({\r\n        name: Yup.string().notRequired(),\r\n        relationship: Yup.string().notRequired(),\r\n        address: Yup.string().notRequired(),\r\n        phoneNumber: Yup.string().notRequired(),\r\n        bloodGroup: Yup.string().notRequired(),\r\n      })\r\n    )\r\n    .required(\"At least one emergency contact is mandatory\"),\r\n  disease: Yup.string().notRequired(),\r\n  liquor: Yup.string().notRequired(),\r\n  crime: Yup.string().notRequired(),\r\n  diseaseDesc: Yup.string().when(\"disease\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"yes\",\r\n    then: () => Yup.string().notRequired(),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n  liquorDesc: Yup.string().when(\"liquor\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"yes\",\r\n    then: () => Yup.string().notRequired(),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n  crimeDesc: Yup.string().when(\"crime\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"yes\",\r\n    then: () => Yup.string().notRequired(),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n});\r\n\r\nexport const CandidatesSchema = Yup.object().shape({\r\n  salaryExpectation: Yup.string().notRequired(),\r\n  noExperience: Yup.string().notRequired(),\r\n  noticePeriod: Yup.string().notRequired(),\r\n  empStatement: Yup.string().notRequired(),\r\n  perIS: Yup.string().required(\"Interview status is required\"),\r\n  perID: Yup.string().when(\"perInterviewStatus\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"yes\",\r\n    then: () => Yup.string().notRequired(),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n  supportInfo: Yup.string(),\r\n\r\n  // // File validation for resume (e.g., PDF, Word, Excel, or images)\r\n  // uploadResume: Yup.mixed()\r\n  //   .required(\"Resume is required\")\r\n  //   .test(\r\n  //     \"fileType\",\r\n  //     \"Only PDF, Word, Excel, or image formats (JPEG, JPG, PNG, SVG) are allowed\",\r\n  //     (value) => {\r\n  //       return (\r\n  //         value &&\r\n  //         [\r\n  //           \"application/pdf\", // PDF\r\n  //           \"application/msword\", // Word .doc\r\n  //           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\", // Word .docx\r\n  //           \"application/vnd.ms-excel\", // Excel .xls\r\n  //           \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", // Excel .xlsx\r\n  //           \"image/jpeg\",\r\n  //           \"image/jpg\",\r\n  //           \"image/png\",\r\n  //           \"image/svg+xml\", // Images\r\n  //         ].includes(value.type)\r\n  //       );\r\n  //     }\r\n  //   ),\r\n\r\n  // // File validation for certificate (e.g., PDF, Word, Excel, or images)\r\n  // uploadCertificate: Yup.mixed()\r\n  //   .required(\"Certificate is required\")\r\n  //   .test(\r\n  //     \"fileType\",\r\n  //     \"Only PDF, Word, Excel, or image formats (JPEG, JPG, PNG, SVG) are allowed\",\r\n  //     (value) => {\r\n  //       return (\r\n  //         value &&\r\n  //         [\r\n  //           \"application/pdf\", // PDF\r\n  //           \"application/msword\", // Word .doc\r\n  //           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\", // Word .docx\r\n  //           \"application/vnd.ms-excel\", // Excel .xls\r\n  //           \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", // Excel .xlsx\r\n  //           \"image/jpeg\",\r\n  //           \"image/jpg\",\r\n  //           \"image/png\",\r\n  //           \"image/svg+xml\", // Images\r\n  //         ].includes(value.type)\r\n  //       );\r\n  //     }\r\n  //   ),\r\n\r\n  // // File validation for passport (e.g., PDF, Word, Excel, or images)\r\n  // uploadPp: Yup.mixed()\r\n  //   .required(\"Passport is required\")\r\n  //   .test(\r\n  //     \"fileType\",\r\n  //     \"Only PDF, Word, Excel, or image formats (JPEG, JPG, PNG, SVG) are allowed\",\r\n  //     (value) => {\r\n  //       return (\r\n  //         value &&\r\n  //         [\r\n  //           \"application/pdf\", // PDF\r\n  //           \"application/msword\", // Word .doc\r\n  //           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\", // Word .docx\r\n  //           \"application/vnd.ms-excel\", // Excel .xls\r\n  //           \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", // Excel .xlsx\r\n  //           \"image/jpeg\",\r\n  //           \"image/jpg\",\r\n  //           \"image/png\",\r\n  //           \"image/svg+xml\", // Images\r\n  //         ].includes(value.type)\r\n  //       );\r\n  //     }\r\n  //   ),\r\n});\r\n\r\n// Define the validation schema using Yup\r\nexport const EmpRequisitionSchema = Yup.object().shape({\r\n  nameReq: Yup.string().notRequired(),\r\n  requestorID: Yup.string().notRequired(),\r\n  approverID: Yup.string().notRequired(),\r\n  department: Yup.string().required(\"Department is required\"),\r\n  project: Yup.string().required(\"Project is required\"),\r\n  position: Yup.string().required(\"Position is required\"),\r\n  quantity: Yup.number()\r\n    .typeError(\"Quantity must be a number\")\r\n    .required(\"Quantity is required\"),\r\n  reasonForReq: Yup.string().required(\"Reason for request is required\"),\r\n  justification: Yup.string().required(\"Justification is required\"),\r\n  replacementFor: Yup.string().notRequired(),\r\n  qualification: Yup.string().required(\"State Qualification is required\"),\r\n  tentativeDate: Yup.date()\r\n    .min(new Date(), \"Tentative date must be in the future\")\r\n    .required(\"Tentative date is required\")\r\n    .typeError(\"Please enter a valid date\"),\r\n  status: Yup.string().notRequired(),\r\n  remarkReq: Yup.string().notRequired(),\r\n});\r\n\r\n\r\nexport const InterviewScheduleSchema = Yup.object().shape({\r\n  interDate: Yup.date()\r\n  .required(\"Date is required\")\r\n  .typeError(\"Date is required\")\r\n  .min(\r\n    new Date(),\r\n    \"The selected date is in the past. Please choose a valid date.\"\r\n  ),\r\n  interTime: Yup.string()\r\n  .required(\"Time is required\")\r\n  .matches(\r\n    /^(0[8-9]|1[0-5]):([0-5]\\d)$/,\r\n    \"Please choose a time between 8:00 AM and 4:00 PM.\"\r\n  ),\r\n  venue: Yup.string().required(\"Venue is required\"),\r\n  interType: Yup.string().notRequired(),\r\n  empBadgeNo: Yup.string().notRequired(\"Badge Number is required\"),\r\n  manager:  Yup.string().notRequired(\"Manager is required\"),\r\n  message: Yup.string().optional(),\r\n});\r\n\r\nexport const hiringJobSchema = Yup.object().shape({\r\n  jobTitle: Yup.string().required(\"Job Title is required\"),\r\n  location: Yup.string().notRequired(),\r\n  jobDesc: Yup.string().notRequired(),\r\n  experience: Yup.string().required(\"Experience is required\"),\r\n  quantity: Yup.string().notRequired(),\r\n  startDate: Yup.date()\r\n    .nullable()\r\n    .transform((value, originalValue) => (originalValue === \"\" ? null : value))\r\n    .notRequired(),\r\n  expiryDate: Yup.date()\r\n    .nullable()\r\n    .transform((value, originalValue) => (originalValue === \"\" ? null : value))\r\n    .notRequired()\r\n    .test(\"is-future-date\", \"Only Future Dates Allowed\", function (value) {\r\n      return !value || new Date(value) > new Date();\r\n    }),\r\n    uploadJobDetails:Yup.string().notRequired()\r\n});\r\n\r\n//WorkPass Tracking Forms Schema - Recruitment \r\nexport const SawpFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  sawpLtrReq: Yup.date().notRequired(),\r\n  sawpLtrRece: Yup.date().notRequired(),\r\n  sawpFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    \r\n});\r\nexport const DoeFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  doeSubmit: Yup.date().notRequired(),\r\n  doeApproval: Yup.date().notRequired(),\r\n  doeValid: Yup.date().notRequired(),\r\n  doeRefNo: Yup.string().notRequired(),\r\n  doeFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    \r\n});\r\nexport const NlmsFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  nlmsSubmit: Yup.date().notRequired(),\r\n  nlmsSubmitRefNo: Yup.string().notRequired(),\r\n  nlmsApproval: Yup.date().notRequired(),\r\n  nlmsValid: Yup.date().notRequired(),\r\n  ldRefNo: Yup.string().notRequired(),\r\n  nlmsFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    \r\n});\r\nexport const BankFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  bgSubmit: Yup.date().notRequired(),\r\n  bgRece: Yup.date().notRequired(),\r\n  bgValid: Yup.date().notRequired(),\r\n  bgRefNo: Yup.string().notRequired(),\r\n  bgAmount: Yup.string().notRequired(),\r\n  bgFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    \r\n});\r\nexport const JitpaFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  jpTbaPurchase: Yup.date().notRequired(),\r\n  jpEndorsement: Yup.date().notRequired(),\r\n  jitpaValid: Yup.date().notRequired(),\r\n  jpAmount: Yup.string().notRequired(),\r\n  jitpaFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    \r\n});\r\nexport const LabourDepFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  labDepReceiptNo: Yup.string().notRequired(),\r\n  labDepAmount: Yup.string().notRequired(),\r\n  labEndrose: Yup.date().notRequired(),\r\n  labDepFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    \r\n});\r\nexport const ImmigrationFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  immbdNo: Yup.string().notRequired(),\r\n  docSubmit: Yup.date().notRequired(),\r\n  visaApproval: Yup.date().notRequired(),\r\n  visaRefNo: Yup.string().notRequired(),\r\n  visaFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    \r\n});\r\nexport const AirTktFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  departure: Yup.date().notRequired(),\r\n  arrival: Yup.date().notRequired(),\r\n  cityName: Yup.string().notRequired(),\r\n  airFare: Yup.string().notRequired(),\r\n  airTktFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    \r\n});\r\nexport const NonLocalMOBFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  mobSignDate: Yup.date().notRequired(),\r\n  agent: Yup.string().notRequired(),\r\n  remarkNLMob: Yup.string().notRequired(),\r\n  mobFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    \r\n});","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler';\nimport { createUserPoolDeserializer, createUserPoolSerializer, } from './shared/serde';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants';\nexport const createForgotPasswordClient = (config) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('ForgotPassword'), createUserPoolDeserializer(), {\n    ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n    ...config,\n});\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { getUserContextData } from '../utils/userContextData';\nimport { createForgotPasswordClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\n/**\n * Resets a user's password.\n *\n * @param input -  The ResetPasswordInput object.\n * @returns ResetPasswordOutput\n * @throws -{@link ForgotPasswordException }\n * Thrown due to an invalid confirmation code or password.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty username.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n **/\nexport async function resetPassword(input) {\n    const { username } = input;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptyResetPasswordUsername);\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolClientId, userPoolId, userPoolEndpoint } = authConfig;\n    const clientMetadata = input.options?.clientMetadata;\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const forgotPassword = createForgotPasswordClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const res = await forgotPassword({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ResetPassword),\n    }, {\n        Username: username,\n        ClientMetadata: clientMetadata,\n        ClientId: userPoolClientId,\n        UserContextData,\n    });\n    const codeDeliveryDetails = res.CodeDeliveryDetails;\n    return {\n        isPasswordReset: false,\n        nextStep: {\n            resetPasswordStep: 'CONFIRM_RESET_PASSWORD_WITH_CODE',\n            codeDeliveryDetails: {\n                deliveryMedium: codeDeliveryDetails?.DeliveryMedium,\n                destination: codeDeliveryDetails?.Destination,\n                attributeName: codeDeliveryDetails?.AttributeName,\n            },\n        },\n    };\n}\n"],"names":["async","confirmResetPassword","input","_Amplify$getConfig$Au","_input$options","authConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","userPoolClientId","userPoolId","userPoolEndpoint","username","newPassword","assertValidationError","AuthValidationErrorCode","EmptyConfirmResetPasswordUsername","EmptyConfirmResetPasswordNewPassword","code","confirmationCode","EmptyConfirmResetPasswordConfirmationCode","metadata","options","clientMetadata","UserContextData","getUserContextData","confirmForgotPassword","config","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","composeServiceApi","cognitoUserPoolTransferHandler","createUserPoolSerializer","createUserPoolDeserializer","_objectSpread","DEFAULT_SERVICE_CLIENT_API_CONFIG","region","getRegionFromUserPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","ConfirmResetPassword","Username","ConfirmationCode","Password","ClientMetadata","ClientId","ForgotPassword","_errors$otp","_errors$newPassword","_errors$rePassword","isNewPasswordVisible","setIsNewPasswordVisible","useState","isRePasswordVisible","setIsRePasswordVisible","otpTimer","setOtpTimer","isResendDisabled","setIsResendDisabled","isOtpExpired","setIsOtpExpired","setNewPassword","otp","setOtp","register","handleSubmit","formState","errors","useForm","resolver","yupResolver","newPasswordSchema","error","setError","localStorage","getItem","useEffect","timerInterval","setInterval","prev","clearInterval","_jsxs","className","children","_jsx","src","resetImage","alt","logo","onSubmit","data","removeItem","alert","window","location","href","err","message","htmlFor","type","placeholder","value","onChange","e","target","onClick","resetPassword","disabled","concat","IoEyeOutline","IoEyeOffOutline","id","rePassword","LoginSchema","Yup","userID","required","password","min","oneOf","EmailSchema","userName","UserSchema","empID","selectType","officialEmail","name","contactNo","position","department","ChangePasswordSchema","currentPassword","max","matches","confirmPassword","ApplicantSchema","shape","profilePhoto","agent","notRequired","contractType","empType","chinese","gender","dob","age","email","cob","nationality","otherNation","when","is","trim","toLowerCase","then","otherwise","marital","race","otherRace","religion","otherReligion","PersonalSchema","bwnIcNo","bwnIcColour","bwnIcExpiry","ppNo","ppIssued","ppExpiry","ppDestinate","alternateNo","presentAddress","permanentAddress","driveLic","OtherLang","familyDetails","of","relationship","occupation","place","eduDetails","university","fromDate","toDate","degree","workExperience","companyAndAddress","salary","reasonLeaving","EducationSchema","referees","address","phoneNumber","profession","relatives","description","emgDetails","bloodGroup","disease","liquor","crime","diseaseDesc","liquorDesc","crimeDesc","CandidatesSchema","salaryExpectation","noExperience","noticePeriod","empStatement","perIS","perID","supportInfo","EmpRequisitionSchema","nameReq","requestorID","approverID","project","quantity","typeError","reasonForReq","justification","replacementFor","qualification","tentativeDate","Date","status","remarkReq","InterviewScheduleSchema","interDate","interTime","venue","interType","empBadgeNo","manager","optional","hiringJobSchema","jobTitle","jobDesc","experience","startDate","nullable","transform","originalValue","expiryDate","test","uploadJobDetails","SawpFormSchema","tempID","sawpLtrReq","sawpLtrRece","sawpFile","DoeFormSchema","doeSubmit","doeApproval","doeValid","doeRefNo","doeFile","NlmsFormSchema","nlmsSubmit","nlmsSubmitRefNo","nlmsApproval","nlmsValid","ldRefNo","nlmsFile","BankFormSchema","bgSubmit","bgRece","bgValid","bgRefNo","bgAmount","bgFile","JitpaFormSchema","jpTbaPurchase","jpEndorsement","jitpaValid","jpAmount","jitpaFile","LabourDepFormSchema","labDepReceiptNo","labDepAmount","labEndrose","labDepFile","ImmigrationFormSchema","immbdNo","docSubmit","visaApproval","visaRefNo","visaFile","AirTktFormSchema","departure","arrival","cityName","airFare","airTktFile","NonLocalMOBFormSchema","mobSignDate","remarkNLMob","mobFile","createForgotPasswordClient","EmptyResetPasswordUsername","forgotPassword","codeDeliveryDetails","ResetPassword","CodeDeliveryDetails","isPasswordReset","nextStep","resetPasswordStep","deliveryMedium","DeliveryMedium","destination","Destination","attributeName","AttributeName"],"sourceRoot":""}