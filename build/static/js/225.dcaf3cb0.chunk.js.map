{"version":3,"file":"static/js/225.dcaf3cb0.chunk.js","mappings":"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","sources":["services/Validation.jsx","../node_modules/@aws-amplify/auth/src/foundation/factories/serviceClients/cognitoIdentityProvider/createForgotPasswordClient.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/apis/resetPassword.ts"],"sourcesContent":["import * as Yup from \"yup\";\r\n\r\nexport const LoginSchema = Yup.object({\r\n  userID: Yup.string().required(\"UserID is mandatory\"),\r\n  password: Yup.string().required(\"Password is Required\"),\r\n});\r\nexport const newPasswordSchema = Yup.object({\r\n  newPassword: Yup.string()\r\n  .required(\"New Password is required\")\r\n  .min(8, \"Password must be at least 8 characters\"),\r\nrePassword: Yup.string()\r\n  .required(\"Please confirm your password\")\r\n  .oneOf([Yup.ref(\"newPassword\"), null], \"Passwords must match\"),\r\n});\r\n\r\n\r\nexport const EmailSchema = Yup.object({\r\n  userName: Yup.string().required(\"User Name is mandatory\"),\r\n\r\n});\r\n\r\nexport const UserSchema = Yup.object({\r\n  empID: Yup.string().required(\"Employee ID is required\"),\r\n  password: Yup.string().required(\"Temporary Password is required\"),\r\n  selectType: Yup.string().required(\"Please select a type\"),\r\n  officialEmail: Yup.string().required(\"OfficialEmail is required\"),\r\n  userID: Yup.string().required(\"User ID is mandatory\"),\r\n  name: Yup.string().required(\"Name is mandatory\"),\r\n  contactNo: Yup.string().required(\"Contact number is mandatory\"),\r\n  position: Yup.string().required(\"Position is mandatory\"),\r\n  department: Yup.string().required(\"Department is mandatory\"),\r\n});\r\n\r\nexport const ChangePasswordSchema = Yup.object({\r\n  userID: Yup.string().required(\"User ID is mandatory\"),\r\n  currentPassword: Yup.string().required(\"Current Password is mandatory\"),\r\n  password: Yup.string()\r\n    .min(8, \"Password must be at least 8 characters\")\r\n    .max(15, \"Password cannot exceed 15 characters\")\r\n    .matches(\r\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])/,\r\n      \"Password must contain at least one lowercase letter, one uppercase letter, one number, and one special character\"\r\n    )\r\n    .required(\"Password is required\"),\r\n\r\n  confirmPassword: Yup.string()\r\n    .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\")\r\n    .required(\"Confirm password is required\"),\r\n});\r\n\r\nexport const ApplicantSchema = Yup.object().shape({\r\n  profilePhoto: Yup.mixed()\r\n  .notRequired(\"Upload Photo is mandatory\"),\r\n  agent: Yup.string().notRequired(),\r\n  position: Yup.string().required(\"Position is mandatory\"),\r\n  contractType: Yup.string().required(\"Contract Type mandatory\"),\r\n  empType: Yup.string().required(\"Employee Type mandatory\"),\r\n  name: Yup.string()\r\n    .min(3, \"Name must be at least 3 characters\")\r\n    .required(\"Name is mandatory\"),\r\n  chinese: Yup.string().notRequired(),\r\n  gender: Yup.string().required(\"Gender is mandatory\"),\r\n  // age: Yup.string().required(\"age is mandatory\"),\r\n  dob: Yup.string().required(\"Date of Birth is mandatory\"),\r\n  age: Yup.number()\r\n    .min(20, \"Age must be at least 20\")\r\n    .max(99, \"Age cannot exceed 99\")\r\n    .required(\"Age is required\"),\r\n  email: Yup.string()\r\n    .email(\"Please enter a valid email\")\r\n    .required(\"Email is required\"),\r\n  cob: Yup.string().required(\"Country of Birth is mandatory\"),\r\n  nationality: Yup.string().required(\"Nationality is mandatory\"),\r\n  otherNation: Yup.string().when(\"nationality\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"other\",\r\n    then: () => Yup.string().required(\"Other Nationality is required\"),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n  marital: Yup.string().required(\"Marital status is mandatory\"),\r\n  race: Yup.string().required(\"Race is mandatory\"),\r\n  otherRace: Yup.string().when(\"race\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"other\",\r\n    then: () => Yup.string().required(\"Other Race is required\"),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n  religion: Yup.string().required(\"Religion is mandatory\"),\r\n  otherReligion: Yup.string().when(\"religion\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"other\",\r\n    then: () => Yup.string().required(\"Other religion is required\"),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n});\r\n\r\nexport const PersonalSchema = (nationality) => {\r\n  console.log(nationality);\r\n  const isBruneian =\r\n    nationality &&\r\n    (nationality.trim().toLowerCase() === \"bruneian\" ||\r\n      nationality.trim().toLowerCase() === \"brunei pr\");\r\n  console.log(isBruneian);\r\n\r\n  return Yup.object({\r\n    bwnIcNo: isBruneian\r\n      ? Yup.string()\r\n          .matches(\r\n            /^\\d{2}-\\d{6}$/,\r\n            \"I/C Number must be in the format XX-XXXXXX, where X is a digit\"\r\n          )\r\n          .required(\"I/C Number is mandatory for Bruneians\")\r\n      : Yup.string().notRequired(),\r\n\r\n    bwnIcColour: isBruneian\r\n      ? Yup.string().required(\"I/C Colour is mandatory for Bruneians\")\r\n      : Yup.string().notRequired(),\r\n\r\n    bwnIcExpiry: isBruneian\r\n      ? Yup.string().required(\"I/C Expiry is mandatory for Bruneians\")\r\n      : Yup.string().notRequired(),\r\n    ppNo: isBruneian\r\n      ? Yup.string().notRequired()\r\n      : Yup.string().required(\"Passport Number is mandatory\"),\r\n\r\n    ppIssued: isBruneian\r\n      ? Yup.string().notRequired()\r\n      : Yup.string().required(\"Passport issued is mandatory\"),\r\n    ppExpiry: isBruneian\r\n      ? Yup.string().notRequired()\r\n      : Yup.string().required(\"Passport Expiry is mandatory\"),\r\n    ppDestinate: isBruneian\r\n      ? Yup.string().notRequired()\r\n      : Yup.string().required(\"Passport destination is mandatory\"),\r\n\r\n    alternateNo: Yup.string().notRequired(),\r\n    contactNo: Yup.string().required(\"Contact Number is mandatory\"),\r\n    presentAddress: Yup.string().required(\"Present Address is mandatory\"),\r\n    permanentAddress: Yup.string().required(\"Permanent Address is mandatory\"),\r\n    driveLic: Yup.string().notRequired(),\r\n    lang: Yup.string().required(\"Language is mandatory\"),\r\n    familyDetails: Yup.array()\r\n      .of(\r\n        Yup.object().shape({\r\n          name: Yup.string().notRequired(),\r\n          relationship: Yup.string().notRequired(),\r\n          age: Yup.string().notRequired(),\r\n          occupation: Yup.string().notRequired(),\r\n          place: Yup.string().notRequired(),\r\n        })\r\n      )\r\n      .notRequired(),\r\n    eduDetails: Yup.array()\r\n      .of(\r\n        Yup.object().shape({\r\n          university: Yup.string().required(\"University Name is mandatory \"),\r\n          fromDate: Yup.string().required(\"From Date is mandatory\"),\r\n          toDate: Yup.string().required(\"To Date is mandatory\"),\r\n          degree: Yup.string().required(\"Degree is mandatory\"),\r\n        })\r\n      )\r\n      .required(\"At least one education detail is mandatory\"),\r\n    workExperience: Yup.array().of(\r\n      Yup.object().shape({\r\n        fromDate: Yup.string().notRequired(),\r\n        toDate: Yup.string().notRequired(),\r\n        companyAndAddress: Yup.string().notRequired(),\r\n        position: Yup.string().notRequired(),\r\n        salary: Yup.string().notRequired(),\r\n        reasonLeaving: Yup.string().notRequired(),\r\n      })\r\n    ),\r\n  });\r\n};\r\n\r\nexport const EducationSchema = Yup.object({\r\n  referees: Yup.array()\r\n    .of(\r\n      Yup.object().shape({\r\n        name: Yup.string().notRequired(),\r\n        address: Yup.string().notRequired(),\r\n        phoneNumber: Yup.string().notRequired(),\r\n        profession: Yup.string().notRequired(),\r\n      })\r\n    )\r\n    .notRequired(),\r\n  relatives: Yup.array()\r\n    .of(\r\n      Yup.object().shape({\r\n        name: Yup.string().notRequired(),\r\n        position: Yup.string().notRequired(),\r\n        relationship: Yup.string().notRequired(),\r\n      })\r\n    )\r\n    .notRequired(),\r\n  description: Yup.string().notRequired(),\r\n  emgDetails: Yup.array()\r\n    .of(\r\n      Yup.object().shape({\r\n        name: Yup.string().required(\"Name is mandatory\"),\r\n        relationship: Yup.string().required(\"Relationship is mandatory\"),\r\n        address: Yup.string().required(\"Address is mandatory\"),\r\n        phoneNumber: Yup.string().required(\"Phone Number is mandatory\"),\r\n        bloodGroup: Yup.string().notRequired(),\r\n      })\r\n    )\r\n    .required(\"At least one emergency contact is mandatory\"),\r\n  disease: Yup.string().notRequired(),\r\n  liquor: Yup.string().notRequired(),\r\n  crime: Yup.string().notRequired(),\r\n  diseaseDesc: Yup.string().when(\"disease\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"yes\",\r\n    then: () => Yup.string().notRequired(),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n  liquorDesc: Yup.string().when(\"liquor\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"yes\",\r\n    then: () => Yup.string().notRequired(),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n  crimeDesc: Yup.string().when(\"crime\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"yes\",\r\n    then: () => Yup.string().notRequired(),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n});\r\n\r\nexport const CandidatesSchema = Yup.object().shape({\r\n  salaryExpectation: Yup.string().notRequired(),\r\n  noExperience: Yup.string().required(\"Experience is required\"),\r\n  noticePeriod: Yup.string().required(\"Notice period is required\"),\r\n  empStatement: Yup.string().required(\"Employee Statement is required\"),\r\n  perIS: Yup.string().required(\"Interview status is required\"),\r\n  perID: Yup.string().when(\"perInterviewStatus\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"yes\",\r\n    then: () => Yup.string().notRequired(),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n  supportInfo: Yup.string(),\r\n\r\n  // // File validation for resume (e.g., PDF, Word, Excel, or images)\r\n  // uploadResume: Yup.mixed()\r\n  //   .required(\"Resume is required\")\r\n  //   .test(\r\n  //     \"fileType\",\r\n  //     \"Only PDF, Word, Excel, or image formats (JPEG, JPG, PNG, SVG) are allowed\",\r\n  //     (value) => {\r\n  //       return (\r\n  //         value &&\r\n  //         [\r\n  //           \"application/pdf\", // PDF\r\n  //           \"application/msword\", // Word .doc\r\n  //           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\", // Word .docx\r\n  //           \"application/vnd.ms-excel\", // Excel .xls\r\n  //           \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", // Excel .xlsx\r\n  //           \"image/jpeg\",\r\n  //           \"image/jpg\",\r\n  //           \"image/png\",\r\n  //           \"image/svg+xml\", // Images\r\n  //         ].includes(value.type)\r\n  //       );\r\n  //     }\r\n  //   ),\r\n\r\n  // // File validation for certificate (e.g., PDF, Word, Excel, or images)\r\n  // uploadCertificate: Yup.mixed()\r\n  //   .required(\"Certificate is required\")\r\n  //   .test(\r\n  //     \"fileType\",\r\n  //     \"Only PDF, Word, Excel, or image formats (JPEG, JPG, PNG, SVG) are allowed\",\r\n  //     (value) => {\r\n  //       return (\r\n  //         value &&\r\n  //         [\r\n  //           \"application/pdf\", // PDF\r\n  //           \"application/msword\", // Word .doc\r\n  //           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\", // Word .docx\r\n  //           \"application/vnd.ms-excel\", // Excel .xls\r\n  //           \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", // Excel .xlsx\r\n  //           \"image/jpeg\",\r\n  //           \"image/jpg\",\r\n  //           \"image/png\",\r\n  //           \"image/svg+xml\", // Images\r\n  //         ].includes(value.type)\r\n  //       );\r\n  //     }\r\n  //   ),\r\n\r\n  // // File validation for passport (e.g., PDF, Word, Excel, or images)\r\n  // uploadPp: Yup.mixed()\r\n  //   .required(\"Passport is required\")\r\n  //   .test(\r\n  //     \"fileType\",\r\n  //     \"Only PDF, Word, Excel, or image formats (JPEG, JPG, PNG, SVG) are allowed\",\r\n  //     (value) => {\r\n  //       return (\r\n  //         value &&\r\n  //         [\r\n  //           \"application/pdf\", // PDF\r\n  //           \"application/msword\", // Word .doc\r\n  //           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\", // Word .docx\r\n  //           \"application/vnd.ms-excel\", // Excel .xls\r\n  //           \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", // Excel .xlsx\r\n  //           \"image/jpeg\",\r\n  //           \"image/jpg\",\r\n  //           \"image/png\",\r\n  //           \"image/svg+xml\", // Images\r\n  //         ].includes(value.type)\r\n  //       );\r\n  //     }\r\n  //   ),\r\n});\r\n\r\n// Define the validation schema using Yup\r\nexport const EmpRequisitionSchema = Yup.object().shape({\r\n  nameReq: Yup.string().notRequired(),\r\n  requestorID: Yup.string().notRequired(),\r\n  approverID: Yup.string().notRequired(),\r\n  department: Yup.string().required(\"Department is required\"),\r\n  project: Yup.string().required(\"Project is required\"),\r\n  position: Yup.string().required(\"Position is required\"),\r\n  quantity: Yup.number()\r\n    .typeError(\"Quantity must be a number\")\r\n    .required(\"Quantity is required\"),\r\n  reasonForReq: Yup.string().required(\"Reason for request is required\"),\r\n  justification: Yup.string().required(\"Justification is required\"),\r\n  replacementFor: Yup.string().notRequired(),\r\n  qualification: Yup.string().required(\"State Qualification is required\"),\r\n  tentativeDate: Yup.date()\r\n    .min(new Date(), \"Tentative date must be in the future\")\r\n    .required(\"Tentative date is required\")\r\n    .typeError(\"Please enter a valid date\"),\r\n  status: Yup.string().notRequired(),\r\n  remarkReq: Yup.string().notRequired(),\r\n});\r\n\r\n\r\nexport const InterviewScheduleSchema = Yup.object().shape({\r\n  interDate: Yup.date()\r\n  .required(\"Date is required\")\r\n  .typeError(\"Date is required\")\r\n  .min(\r\n    new Date(),\r\n    \"The selected date is in the past. Please choose a valid date.\"\r\n  ),\r\n  interTime: Yup.string()\r\n  .required(\"Time is required\")\r\n  .matches(\r\n    /^(0[8-9]|1[0-5]):([0-5]\\d)$/,\r\n    \"Please choose a time between 8:00 AM and 4:00 PM.\"\r\n  ),\r\n  venue: Yup.string().required(\"Venue is required\"),\r\n  interType: Yup.string().notRequired(),\r\n  empBadgeNo: Yup.string().notRequired(\"Badge Number is required\"),\r\n  manager:  Yup.string().notRequired(\"Manager is required\"),\r\n  message: Yup.string().optional(),\r\n});\r\n\r\nexport const hiringJobSchema = Yup.object().shape({\r\n  jobTitle: Yup.string().required(\"Job Title is required\"),\r\n  location: Yup.string().notRequired(),\r\n  jobDesc: Yup.string().notRequired(),\r\n  experience: Yup.string().required(\"Experience is required\"),\r\n  quantity: Yup.string().notRequired(),\r\n  startDate: Yup.date()\r\n    .nullable()\r\n    .transform((value, originalValue) => (originalValue === \"\" ? null : value))\r\n    .notRequired(),\r\n  expiryDate: Yup.date()\r\n    .nullable()\r\n    .transform((value, originalValue) => (originalValue === \"\" ? null : value))\r\n    .notRequired()\r\n    .test(\"is-future-date\", \"Only Future Dates Allowed\", function (value) {\r\n      return !value || new Date(value) > new Date();\r\n    }),\r\n    uploadJobDetails:Yup.string().notRequired()\r\n});\r\n\r\n//WorkPass Tracking Forms Schema - Recruitment \r\nexport const SawpFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  sawpLtrReq: Yup.date().notRequired(),\r\n  sawpLtrRece: Yup.date().notRequired(),\r\n  sawpFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const DoeFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  doeSubmit: Yup.date().notRequired(),\r\n  doeApproval: Yup.date().notRequired(),\r\n  doeValid: Yup.date().notRequired(),\r\n  doeRefNo: Yup.string().notRequired(),\r\n  doeFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const NlmsFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  nlmsSubmit: Yup.date().notRequired(),\r\n  nlmsSubmitRefNo: Yup.string().notRequired(),\r\n  nlmsApproval: Yup.date().notRequired(),\r\n  nlmsValid: Yup.date().notRequired(),\r\n  ldRefNo: Yup.string().notRequired(),\r\n  nlmsFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const BankFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  bgSubmit: Yup.date().notRequired(),\r\n  bgRece: Yup.date().notRequired(),\r\n  bgValid: Yup.date().notRequired(),\r\n  bgRefNo: Yup.string().notRequired(),\r\n  bgAmount: Yup.string().notRequired(),\r\n  bgFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const JitpaFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  jpTbaPurchase: Yup.date().notRequired(),\r\n  jpEndorsement: Yup.date().notRequired(),\r\n  jitpaValid: Yup.date().notRequired(),\r\n  jpAmount: Yup.string().notRequired(),\r\n  jitpaFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const LabourDepFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  labDepReceiptNo: Yup.string().notRequired(),\r\n  labDepAmount: Yup.string().notRequired(),\r\n  labEndrose: Yup.date().notRequired(),\r\n  labDepFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const ImmigrationFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  immbdNo: Yup.string().notRequired(),\r\n  docSubmit: Yup.date().notRequired(),\r\n  visaApproval: Yup.date().notRequired(),\r\n  visaRefNo: Yup.string().notRequired(),\r\n  visaFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const AirTktFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  departure: Yup.date().notRequired(),\r\n  arrival: Yup.date().notRequired(),\r\n  cityName: Yup.string().notRequired(),\r\n  airFare: Yup.string().notRequired(),\r\n  airTktFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const NonLocalMOBFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  mobSignDate: Yup.date().notRequired(),\r\n  agent: Yup.string().notRequired(),\r\n  remarkNLMob: Yup.string().notRequired(),\r\n  mobFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler';\nimport { createUserPoolDeserializer, createUserPoolSerializer, } from './shared/serde';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants';\nexport const createForgotPasswordClient = (config) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('ForgotPassword'), createUserPoolDeserializer(), {\n    ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n    ...config,\n});\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { getUserContextData } from '../utils/userContextData';\nimport { createForgotPasswordClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\n/**\n * Resets a user's password.\n *\n * @param input -  The ResetPasswordInput object.\n * @returns ResetPasswordOutput\n * @throws -{@link ForgotPasswordException }\n * Thrown due to an invalid confirmation code or password.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty username.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n **/\nexport async function resetPassword(input) {\n    const { username } = input;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptyResetPasswordUsername);\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolClientId, userPoolId, userPoolEndpoint } = authConfig;\n    const clientMetadata = input.options?.clientMetadata;\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const forgotPassword = createForgotPasswordClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const res = await forgotPassword({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ResetPassword),\n    }, {\n        Username: username,\n        ClientMetadata: clientMetadata,\n        ClientId: userPoolClientId,\n        UserContextData,\n    });\n    const codeDeliveryDetails = res.CodeDeliveryDetails;\n    return {\n        isPasswordReset: false,\n        nextStep: {\n            resetPasswordStep: 'CONFIRM_RESET_PASSWORD_WITH_CODE',\n            codeDeliveryDetails: {\n                deliveryMedium: codeDeliveryDetails?.DeliveryMedium,\n                destination: codeDeliveryDetails?.Destination,\n                attributeName: codeDeliveryDetails?.AttributeName,\n            },\n        },\n    };\n}\n"],"names":["LoginSchema","Yup","userID","required","password","newPasswordSchema","newPassword","min","rePassword","oneOf","EmailSchema","userName","UserSchema","empID","selectType","officialEmail","name","contactNo","position","department","ChangePasswordSchema","currentPassword","max","matches","confirmPassword","ApplicantSchema","shape","profilePhoto","notRequired","agent","contractType","empType","chinese","gender","dob","age","email","cob","nationality","otherNation","when","is","value","trim","toLowerCase","then","otherwise","marital","race","otherRace","religion","otherReligion","PersonalSchema","console","log","isBruneian","bwnIcNo","bwnIcColour","bwnIcExpiry","ppNo","ppIssued","ppExpiry","ppDestinate","alternateNo","presentAddress","permanentAddress","driveLic","lang","familyDetails","of","relationship","occupation","place","eduDetails","university","fromDate","toDate","degree","workExperience","companyAndAddress","salary","reasonLeaving","EducationSchema","referees","address","phoneNumber","profession","relatives","description","emgDetails","bloodGroup","disease","liquor","crime","diseaseDesc","liquorDesc","crimeDesc","CandidatesSchema","salaryExpectation","noExperience","noticePeriod","empStatement","perIS","perID","supportInfo","EmpRequisitionSchema","nameReq","requestorID","approverID","project","quantity","typeError","reasonForReq","justification","replacementFor","qualification","tentativeDate","Date","status","remarkReq","InterviewScheduleSchema","interDate","interTime","venue","interType","empBadgeNo","manager","message","optional","hiringJobSchema","jobTitle","location","jobDesc","experience","startDate","nullable","transform","originalValue","expiryDate","test","uploadJobDetails","SawpFormSchema","tempID","sawpLtrReq","sawpLtrRece","sawpFile","type","DoeFormSchema","doeSubmit","doeApproval","doeValid","doeRefNo","doeFile","NlmsFormSchema","nlmsSubmit","nlmsSubmitRefNo","nlmsApproval","nlmsValid","ldRefNo","nlmsFile","BankFormSchema","bgSubmit","bgRece","bgValid","bgRefNo","bgAmount","bgFile","JitpaFormSchema","jpTbaPurchase","jpEndorsement","jitpaValid","jpAmount","jitpaFile","LabourDepFormSchema","labDepReceiptNo","labDepAmount","labEndrose","labDepFile","ImmigrationFormSchema","immbdNo","docSubmit","visaApproval","visaRefNo","visaFile","AirTktFormSchema","departure","arrival","cityName","airFare","airTktFile","NonLocalMOBFormSchema","mobSignDate","remarkNLMob","mobFile","createForgotPasswordClient","config","composeServiceApi","cognitoUserPoolTransferHandler","createUserPoolSerializer","createUserPoolDeserializer","_objectSpread","DEFAULT_SERVICE_CLIENT_API_CONFIG","async","resetPassword","input","_Amplify$getConfig$Au","_input$options","username","assertValidationError","AuthValidationErrorCode","EmptyResetPasswordUsername","authConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","userPoolClientId","userPoolId","userPoolEndpoint","clientMetadata","options","UserContextData","getUserContextData","forgotPassword","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","codeDeliveryDetails","region","getRegionFromUserPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","ResetPassword","Username","ClientMetadata","ClientId","CodeDeliveryDetails","isPasswordReset","nextStep","resetPasswordStep","deliveryMedium","DeliveryMedium","destination","Destination","attributeName","AttributeName"],"sourceRoot":""}