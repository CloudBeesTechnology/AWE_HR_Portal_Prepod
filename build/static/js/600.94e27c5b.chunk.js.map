{"version":3,"file":"static/js/600.94e27c5b.chunk.js","mappings":"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","sources":["../node_modules/@aws-amplify/auth/src/providers/cognito/apis/confirmResetPassword.ts","../node_modules/@aws-amplify/auth/src/foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmForgotPasswordClient.ts","pages/forgotPassword/ForgotPassword.jsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { getUserContextData } from '../utils/userContextData';\nimport { createConfirmForgotPasswordClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\n/**\n * Confirms the new password and verification code to reset the password.\n *\n * @param input -  The ConfirmResetPasswordInput object.\n * @throws -{@link ConfirmForgotPasswordException }\n * Thrown due to an invalid confirmation code or password.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty confirmation code, password or username.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function confirmResetPassword(input) {\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolClientId, userPoolId, userPoolEndpoint } = authConfig;\n    const { username, newPassword } = input;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptyConfirmResetPasswordUsername);\n    assertValidationError(!!newPassword, AuthValidationErrorCode.EmptyConfirmResetPasswordNewPassword);\n    const code = input.confirmationCode;\n    assertValidationError(!!code, AuthValidationErrorCode.EmptyConfirmResetPasswordConfirmationCode);\n    const metadata = input.options?.clientMetadata;\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const confirmForgotPassword = createConfirmForgotPasswordClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    await confirmForgotPassword({\n        region: getRegionFromUserPoolId(authConfig.userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmResetPassword),\n    }, {\n        Username: username,\n        ConfirmationCode: code,\n        Password: newPassword,\n        ClientMetadata: metadata,\n        ClientId: authConfig.userPoolClientId,\n        UserContextData,\n    });\n}\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler';\nimport { createUserPoolDeserializer, createUserPoolSerializer, } from './shared/serde';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants';\nexport const createConfirmForgotPasswordClient = (config) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('ConfirmForgotPassword'), createUserPoolDeserializer(), {\n    ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n    ...config,\n});\n","import { useState, useEffect } from \"react\";\r\nimport resetImage from \"../../assets/login/resetImage.jpg\";\r\nimport logo from \"../../assets/logo/logo-with-name.svg\";\r\nimport { newPasswordSchema } from \"../../services/Validation\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { IoEyeOffOutline, IoEyeOutline } from \"react-icons/io5\";\r\nimport { resetPassword, confirmResetPassword } from \"aws-amplify/auth\";\r\n\r\nconst ForgotPassword = () => {\r\n  const [isNewPasswordVisible, setIsNewPasswordVisible] = useState(false);\r\n  const [isRePasswordVisible, setIsRePasswordVisible] = useState(false);\r\n  const [otpTimer, setOtpTimer] = useState(60);\r\n  const [isResendDisabled, setIsResendDisabled] = useState(true);\r\n  const [isOtpExpired, setIsOtpExpired] = useState(false);\r\n  const [newPassword, setNewPassword] = useState(\"\");\r\n  const [otp, setOtp] = useState(null);\r\n\r\n  // Correctly passing resolver with validation schema\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(newPasswordSchema),\r\n  });\r\n\r\n  const [error, setError] = useState(\"\");\r\n  const username = localStorage.getItem(\"username\");\r\n  // console.log(username);\r\n\r\n  useEffect(() => {\r\n    if (otpTimer > 0) {\r\n      const timerInterval = setInterval(() => {\r\n        setOtpTimer((prev) => prev - 1);\r\n      }, 1000);\r\n\r\n      return () => clearInterval(timerInterval);\r\n    } else {\r\n      setIsResendDisabled(false);\r\n      setIsOtpExpired(true);\r\n    }\r\n  }, [otpTimer]);\r\n\r\n  const handleResendOtp = async (otp) => {\r\n    try {\r\n      await resetPassword({ username: username });\r\n      alert(\"OTP has been resent to your email.\");\r\n      setOtpTimer(60);\r\n      setIsResendDisabled(true);\r\n      setIsOtpExpired(false);\r\n    } catch (err) {\r\n      // console.log(username);\r\n\r\n      setError(err.message || err);\r\n    }\r\n  };\r\n\r\n  const handleOtpSubmit = async (data) => {\r\n    const { otp, newPassword } = data;\r\n\r\n    try {\r\n      await confirmResetPassword({\r\n        username,\r\n        confirmationCode: otp,\r\n        newPassword,\r\n      });\r\n      localStorage.removeItem(\"username\");\r\n      localStorage.removeItem(\"FPSWD\");\r\n      alert(\"Password reset successful. Please log in.\");\r\n      window.location.href = \"/login\";\r\n    } catch (err) {\r\n      setError(err.message || err);\r\n    }\r\n  };\r\n\r\n  // console.log(\"USERNAME\",username);\r\n\r\n  return (\r\n    <section className=\"screen-size mx-auto flex h-full\">\r\n      <div className=\"flex-1 border-r-2 border-[#E9E9E9] center\">\r\n        <img\r\n          className=\"w-full max-w-[450px]\"\r\n          src={resetImage}\r\n          alt=\"Rightside Pic not found\"\r\n        />\r\n      </div>\r\n      <div className=\"flex-1 flex items-center gap-8 py-14 flex-col w-full px-3\">\r\n        <div>\r\n          <img\r\n            className=\"w-full max-w-[450px]\"\r\n            src={logo}\r\n            alt=\"Logo not found\"\r\n          />\r\n        </div>\r\n        <article className=\"space-y-2 mt-5\">\r\n          <h1 className=\"text-dark_grey title\">Reset Password</h1>\r\n        </article>\r\n        {error && <p className=\"text-red\">{error}</p>}\r\n        <form className=\"space-y-4\" onSubmit={handleSubmit(handleOtpSubmit)}>\r\n          {/* OTP Field */}\r\n          {/* OTP Field */}\r\n          <div className=\"w-[400px] space-y-1\">\r\n            <label htmlFor=\"otp\" className=\"text-dark_grey text_size_8\">\r\n              Enter OTP\r\n            </label>\r\n            <div className=\"shadow-md shadow-[#00000040] border border-[#D3D3D3] overflow-hidden rounded-lg py-1 pl-3 pr-4 w-full center\">\r\n              <input\r\n                type=\"number\"\r\n                className=\"outline-none py-2 w-full\"\r\n                placeholder=\"Enter OTP\"\r\n                value={otp} // Use otp state here\r\n                {...register(\"otp\")}\r\n                // disabled={isOtpExpired}\r\n                onChange={(e) => setOtp(e.target.value)} // Update otp state on change\r\n              />\r\n            </div>\r\n            {isOtpExpired && !otp && (\r\n              <p className=\"text-red text-xs\">\r\n                OTP has been expired, Please resend OTP.\r\n              </p>\r\n            )}\r\n            <p className=\"text-[red] text-xs\">{errors.otp?.message}</p>\r\n          </div>\r\n\r\n          <div className=\"flex justify-end\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"text-blue text-sm font font-semibold\"\r\n              onClick={handleResendOtp}\r\n              disabled={isResendDisabled}\r\n            >\r\n              {isResendDisabled ? `Resend OTP in ${otpTimer}s` : \"Resend OTP\"}\r\n            </button>\r\n          </div>\r\n\r\n          {/* New Password Field */}\r\n          <div className=\"w-[400px] space-y-1\">\r\n            <label htmlFor=\"newPassword\" className=\"text-dark_grey text_size_8\">\r\n              New Password\r\n            </label>\r\n            <div className=\"shadow-md shadow-[#00000040] border border-[#D3D3D3] overflow-hidden rounded-lg py-1 pl-3 pr-4 w-full center\">\r\n              <input\r\n                type={isNewPasswordVisible ? \"text\" : \"password\"}\r\n                className=\"outline-none py-2 w-full\"\r\n                placeholder=\"Enter new password\"\r\n                {...register(\"newPassword\")}\r\n                onChange={(e) => setNewPassword(e.target.value)}\r\n              />\r\n              {isNewPasswordVisible ? (\r\n                <IoEyeOutline\r\n                  className=\"text-2xl text-[#837E7E]\"\r\n                  onClick={() => setIsNewPasswordVisible(!isNewPasswordVisible)}\r\n                />\r\n              ) : (\r\n                <IoEyeOffOutline\r\n                  className=\"text-2xl text-[#837E7E]\"\r\n                  onClick={() => setIsNewPasswordVisible(!isNewPasswordVisible)}\r\n                />\r\n              )}\r\n            </div>\r\n            <p className=\"text-[red] text-xs my-2\">\r\n              {errors.newPassword?.message}\r\n            </p>\r\n          </div>\r\n\r\n          {/* Re-enter Password Field */}\r\n          <div className=\"w-[400px] space-y-1\">\r\n            <label htmlFor=\"rePassword\" className=\"text-dark_grey text_size_8\">\r\n              Re-enter Password\r\n            </label>\r\n            <div className=\"shadow-md shadow-[#00000040] border border-[#D3D3D3] overflow-hidden rounded-lg py-1 pl-3 pr-4 w-full center\">\r\n              <input\r\n                type={isRePasswordVisible ? \"text\" : \"password\"}\r\n                className=\"outline-none py-2 w-full\"\r\n                placeholder=\"Re-enter your password\"\r\n                id=\"rePassword\"\r\n                {...register(\"rePassword\")}\r\n              />\r\n              {isRePasswordVisible ? (\r\n                <IoEyeOutline\r\n                  className=\"text-2xl text-[#837E7E]\"\r\n                  onClick={() => setIsRePasswordVisible(!isRePasswordVisible)}\r\n                />\r\n              ) : (\r\n                <IoEyeOffOutline\r\n                  className=\"text-2xl text-[#837E7E]\"\r\n                  onClick={() => setIsRePasswordVisible(!isRePasswordVisible)}\r\n                />\r\n              )}\r\n            </div>\r\n            <p className=\"text-[red] text-xs my-2\">\r\n              {errors.rePassword?.message}\r\n            </p>\r\n          </div>\r\n\r\n          {/* Submit Button */}\r\n          <div className=\"center\">\r\n            <button type=\"submit\" className=\"primary_btn text_size_4 my-3\">\r\n              Submit\r\n            </button>\r\n          </div>\r\n          <hr className=\"border-[1.5px] text-[#B3B3B3] w-[100%]\" />\r\n          <div\r\n            className=\"center\"\r\n            onClick={() => {\r\n              localStorage.removeItem(\"FPSWD\");\r\n              window.location.href = \"/login\";\r\n            }}\r\n          >\r\n            <button className=\"\">\r\n              Back to {\"\"}\r\n              <span className=\"text-blue\">Login</span>\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ForgotPassword;\r\n"],"names":["async","confirmResetPassword","input","_Amplify$getConfig$Au","_input$options","authConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","userPoolClientId","userPoolId","userPoolEndpoint","username","newPassword","assertValidationError","AuthValidationErrorCode","EmptyConfirmResetPasswordUsername","EmptyConfirmResetPasswordNewPassword","code","confirmationCode","EmptyConfirmResetPasswordConfirmationCode","metadata","options","clientMetadata","UserContextData","getUserContextData","confirmForgotPassword","config","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","composeServiceApi","cognitoUserPoolTransferHandler","createUserPoolSerializer","createUserPoolDeserializer","_objectSpread","DEFAULT_SERVICE_CLIENT_API_CONFIG","region","getRegionFromUserPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","ConfirmResetPassword","Username","ConfirmationCode","Password","ClientMetadata","ClientId","ForgotPassword","_errors$otp","_errors$newPassword","_errors$rePassword","isNewPasswordVisible","setIsNewPasswordVisible","useState","isRePasswordVisible","setIsRePasswordVisible","otpTimer","setOtpTimer","isResendDisabled","setIsResendDisabled","isOtpExpired","setIsOtpExpired","setNewPassword","otp","setOtp","register","handleSubmit","formState","errors","useForm","resolver","yupResolver","newPasswordSchema","error","setError","localStorage","getItem","useEffect","timerInterval","setInterval","prev","clearInterval","_jsxs","className","children","_jsx","src","resetImage","alt","logo","onSubmit","data","removeItem","alert","window","location","href","err","message","htmlFor","type","placeholder","value","onChange","e","target","onClick","resetPassword","disabled","concat","IoEyeOutline","IoEyeOffOutline","id","rePassword"],"sourceRoot":""}