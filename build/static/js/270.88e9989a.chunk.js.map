{"version":3,"file":"static/js/270.88e9989a.chunk.js","mappings":"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","sources":["../node_modules/@aws-amplify/auth/src/providers/cognito/apis/resetPassword.ts","../node_modules/@aws-amplify/auth/src/foundation/factories/serviceClients/cognitoIdentityProvider/createForgotPasswordClient.ts","pages/forgotPassword/ForgotEmail.jsx","services/Validation.jsx","../node_modules/@aws-amplify/auth/src/common/AuthErrorStrings.ts","../node_modules/@aws-amplify/auth/src/errors/types/validation.ts","../node_modules/@aws-amplify/auth/src/errors/utils/assertValidationError.ts","../node_modules/@aws-amplify/auth/src/utils/getAuthUserAgentValue.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { getUserContextData } from '../utils/userContextData';\nimport { createForgotPasswordClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\n/**\n * Resets a user's password.\n *\n * @param input -  The ResetPasswordInput object.\n * @returns ResetPasswordOutput\n * @throws -{@link ForgotPasswordException }\n * Thrown due to an invalid confirmation code or password.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty username.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n **/\nexport async function resetPassword(input) {\n    const { username } = input;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptyResetPasswordUsername);\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolClientId, userPoolId, userPoolEndpoint } = authConfig;\n    const clientMetadata = input.options?.clientMetadata;\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const forgotPassword = createForgotPasswordClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const res = await forgotPassword({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ResetPassword),\n    }, {\n        Username: username,\n        ClientMetadata: clientMetadata,\n        ClientId: userPoolClientId,\n        UserContextData,\n    });\n    const codeDeliveryDetails = res.CodeDeliveryDetails;\n    return {\n        isPasswordReset: false,\n        nextStep: {\n            resetPasswordStep: 'CONFIRM_RESET_PASSWORD_WITH_CODE',\n            codeDeliveryDetails: {\n                deliveryMedium: codeDeliveryDetails?.DeliveryMedium,\n                destination: codeDeliveryDetails?.Destination,\n                attributeName: codeDeliveryDetails?.AttributeName,\n            },\n        },\n    };\n}\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler';\nimport { createUserPoolDeserializer, createUserPoolSerializer, } from './shared/serde';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants';\nexport const createForgotPasswordClient = (config) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('ForgotPassword'), createUserPoolDeserializer(), {\n    ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n    ...config,\n});\n","import { useState } from \"react\";\r\nimport emailImage from \"../../assets/login/emailImage.jpg\";\r\nimport logo from \"../../assets/logo/logo-with-name.svg\";\r\nimport { EmailSchema } from \"../../services/Validation\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { resetPassword } from \"@aws-amplify/auth\";\r\n\r\nconst ForgotEmail = () => {\r\n  \r\n  const navigate = useNavigate();\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n    handleSubmit,\r\n  } = useForm({ resolver: yupResolver(EmailSchema) });\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const onSubmit = handleSubmit(async (data) => {\r\n    const { userName } = data;\r\n    console.log(\"Form data submitted:\", data); // Log form data\r\n    console.log(\"Username from form data:\", userName); // Log the userName\r\n\r\n    if (!userName) {\r\n      setError(\"Username is required to reset password.\");\r\n      console.log(\"Error: Username is empty\");\r\n      return;\r\n    }\r\n    setIsLoading(true);\r\n    try {\r\n      // Log the userName before making the API call\r\n      console.log(\"Attempting to call resetPassword with username:\", userName);\r\n      const output = await resetPassword({\r\n        username: userName,\r\n      });\r\n\r\n      const { nextStep } = output;\r\n      switch (nextStep.resetPasswordStep) {\r\n        case \"CONFIRM_RESET_PASSWORD_WITH_CODE\":\r\n          const codeDeliveryDetails = nextStep.codeDeliveryDetails;\r\n          console.log(`\r\n            Confirmation code was sent to ${codeDeliveryDetails.deliveryMedium}\r\n          `);\r\n          // Collect the confirmation code from the user and pass to confirmResetPassword.\r\n          break;\r\n        case \"DONE\":\r\n          console.log(\"Successfully reset password.\");\r\n          break;\r\n      }\r\n\r\n      console.log(\"Password reset initiated successfully.\");\r\n      navigate(\"/forgotOtp\"); // Navigate to OTP verification page\r\n    } catch (err) {\r\n      console.error(\"Error calling resetPassword:\", err); // Log the error\r\n      if (err.code === \"UserNotFoundException\") {\r\n        setError(\"User not found. Please check your username/email.\");\r\n      } else if (err.code === \"NotAuthorizedException\") {\r\n        setError(\"User is not authorized. Please try again later.\");\r\n      } else if (err.code === \"LimitExceededException\") {\r\n        setError(\"Too many requests. Please try again later.\");\r\n      } else {\r\n        setError(\"An unexpected error occurred. Please try again.\");\r\n      }\r\n    }finally {\r\n      setIsLoading(false);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <section className=\"screen-size mx-auto flex h-screen\">\r\n      <div className=\"flex-1 border-r-2 border-[#E9E9E9] center\">\r\n        <img\r\n          className=\"w-full max-w-[500px]\"\r\n          src={emailImage}\r\n          alt=\"Rightside Pic not found\"\r\n        />\r\n      </div>\r\n      <div className=\"flex-1 justify-center flex items-center gap-8 py-20 flex-col w-full px-3\">\r\n        <div>\r\n          <img\r\n            className=\"w-full max-w-[450px]\"\r\n            src={logo}\r\n            alt=\"Logo not found\"\r\n          />\r\n        </div>\r\n        <article className=\"space-y-2 mt-10 text-center\">\r\n        <h1 className=\"text-dark_grey title\">Welcome Back</h1>\r\n          <p className=\"text-dark_grey text_size_8\">\r\n            Hello again! Dive into your tasks and let's make today productive.\r\n          </p>\r\n        </article>\r\n\r\n        {error && <p className=\"text-red-500\">{error}</p>}\r\n\r\n        <form className=\"space-y-5 w-[400px]\" onSubmit={onSubmit}>\r\n          <div className=\"space-y-1\">\r\n            <label htmlFor=\"userName\" className=\"text-dark_grey text_size_8\">\r\n              User ID\r\n            </label>\r\n            <div className=\"shadow-md shadow-[#00000040] border border-[#D3D3D3] overflow-hidden rounded-lg py-1 px-3 w-full\">\r\n              <input\r\n                className=\"outline-none py-2 w-full\"\r\n                type=\"text\"\r\n                id=\"userName\"\r\n                name=\"userName\"\r\n                placeholder=\"Enter your User ID\"\r\n                {...register(\"userName\")}\r\n              />\r\n            </div>\r\n            <p className=\"text-red-500 text-sm my-3 ml-5\">\r\n              {errors.userName?.message}\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"center\">\r\n<button\r\n  type=\"submit\"\r\n  className=\"primary_btn text_size_4 mt-5\"\r\n  disabled={isLoading}\r\n>\r\n  {isLoading ? \"Sending...\" : \"Next\"}\r\n</button>\r\n</div> \r\n        </form>\r\n\r\n        <hr className=\"border-[1.5px] text-[#B3B3B3]\" />\r\n                 <p className=\"text-grey center gap-2\">Back to \r\n         <Link to=\"/login\" className=\"center \">\r\n            <span className=\"text-blue text_size_4\" >\r\n            Login\r\n            </span>\r\n          </Link>\r\n         </p>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ForgotEmail;","import * as Yup from \"yup\";\r\n\r\nexport const LoginSchema = Yup.object({\r\n  userID: Yup.string().required(\"UserID is mandatory\"),\r\n  password: Yup.string().required(\"Password is Required\"),\r\n});\r\nexport const newPasswordSchema = Yup.object({\r\n  newPassword: Yup.string()\r\n  .required(\"New Password is required\")\r\n  .min(8, \"Password must be at least 8 characters\"),\r\nrePassword: Yup.string()\r\n  .required(\"Please confirm your password\")\r\n  .oneOf([Yup.ref(\"newPassword\"), null], \"Passwords must match\"),\r\n});\r\nexport const EmailSchema = Yup.object({\r\n  userName: Yup.string().required(\"User Name is mandatory\"),\r\n\r\n});\r\n\r\nexport const UserSchema = Yup.object({\r\n  empID: Yup.string().required(\"Employee ID is required\"),\r\n  password: Yup.string().required(\"Temporary Password is required\"),\r\n  selectType: Yup.string().required(\"Please select a type\"),\r\n  officialEmail: Yup.string().required(\"OfficialEmail is required\"),\r\n  userID: Yup.string().required(\"User ID is mandatory\"),\r\n  name: Yup.string().required(\"Name is mandatory\"),\r\n  contactNo: Yup.string().required(\"Contact number is mandatory\"),\r\n  position: Yup.string().required(\"Position is mandatory\"),\r\n  department: Yup.string().required(\"Department is mandatory\"),\r\n});\r\n\r\nexport const ChangePasswordSchema = Yup.object({\r\n  userID: Yup.string().required(\"User ID is mandatory\"),\r\n  currentPassword: Yup.string().required(\"Current Password is mandatory\"),\r\n  password: Yup.string()\r\n    .min(8, \"Password must be at least 8 characters\")\r\n    .max(15, \"Password cannot exceed 15 characters\")\r\n    .matches(\r\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])/,\r\n      \"Password must contain at least one lowercase letter, one uppercase letter, one number, and one special character\"\r\n    )\r\n    .required(\"Password is required\"),\r\n\r\n  confirmPassword: Yup.string()\r\n    .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\")\r\n    .required(\"Confirm password is required\"),\r\n});\r\n\r\nexport const ApplicantSchema = Yup.object().shape({\r\n  profilePhoto: Yup.mixed()\r\n    .required(\"Upload Photo is mandatory\")\r\n    .test(\"fileType\", \"Profile photo must be a JPG or PNG file\", (value) =>\r\n      value ? /\\.(jpg|jpeg|png)$/.test(value.name) : false\r\n    ),\r\n  agent: Yup.string().notRequired(),\r\n  position: Yup.string().required(\"Position is mandatory\"),\r\n  contractType: Yup.string().required(\"Contract Type mandatory\"),\r\n  empType: Yup.string().required(\"Employee Type mandatory\"),\r\n  name: Yup.string()\r\n    .min(3, \"Name must be at least 3 characters\")\r\n    .required(\"Name is mandatory\"),\r\n  chinese: Yup.string().notRequired(),\r\n  gender: Yup.string().required(\"Gender is mandatory\"),\r\n  // age: Yup.string().required(\"age is mandatory\"),\r\n  dob: Yup.string().required(\"Date of Birth is mandatory\"),\r\n  age: Yup.number()\r\n    .min(20, \"Age must be at least 20\")\r\n    .max(99, \"Age cannot exceed 99\")\r\n    .required(\"Age is required\"),\r\n  email: Yup.string()\r\n    .email(\"Please enter a valid email\")\r\n    .required(\"Email is required\"),\r\n  cob: Yup.string().required(\"Country of Birth is mandatory\"),\r\n  nationality: Yup.string().required(\"Nationality is mandatory\"),\r\n  otherNation: Yup.string().when(\"nationality\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"other\",\r\n    then: () => Yup.string().required(\"Other Nationality is required\"),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n  marital: Yup.string().required(\"Marital status is mandatory\"),\r\n  race: Yup.string().required(\"Race is mandatory\"),\r\n  otherRace: Yup.string().when(\"race\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"other\",\r\n    then: () => Yup.string().required(\"Other Race is required\"),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n  religion: Yup.string().required(\"Religion is mandatory\"),\r\n  otherReligion: Yup.string().when(\"religion\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"other\",\r\n    then: () => Yup.string().required(\"Other religion is required\"),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n});\r\n\r\nexport const PersonalSchema = (nationality) => {\r\n  console.log(nationality);\r\n  const isBruneian =\r\n    nationality &&\r\n    (nationality.trim().toLowerCase() === \"bruneian\" ||\r\n      nationality.trim().toLowerCase() === \"brunei pr\");\r\n  console.log(isBruneian);\r\n\r\n  return Yup.object({\r\n    bwnIcNo: isBruneian\r\n      ? Yup.string()\r\n          .matches(\r\n            /^\\d{2}-\\d{6}$/,\r\n            \"I/C Number must be in the format XX-XXXXXX, where X is a digit\"\r\n          )\r\n          .required(\"I/C Number is mandatory for Bruneians\")\r\n      : Yup.string().notRequired(),\r\n\r\n    bwnIcColour: isBruneian\r\n      ? Yup.string().required(\"I/C Colour is mandatory for Bruneians\")\r\n      : Yup.string().notRequired(),\r\n\r\n    bwnIcExpiry: isBruneian\r\n      ? Yup.string().required(\"I/C Expiry is mandatory for Bruneians\")\r\n      : Yup.string().notRequired(),\r\n    ppNo: isBruneian\r\n      ? Yup.string().notRequired()\r\n      : Yup.string().required(\"Passport Number is mandatory\"),\r\n\r\n    ppIssued: isBruneian\r\n      ? Yup.string().notRequired()\r\n      : Yup.string().required(\"Passport issued is mandatory\"),\r\n    ppExpiry: isBruneian\r\n      ? Yup.string().notRequired()\r\n      : Yup.string().required(\"Passport Expiry is mandatory\"),\r\n    ppDestinate: isBruneian\r\n      ? Yup.string().notRequired()\r\n      : Yup.string().required(\"Passport destination is mandatory\"),\r\n\r\n    alternateNo: Yup.string().notRequired(),\r\n    contactNo: Yup.string().required(\"Contact Number is mandatory\"),\r\n    presentAddress: Yup.string().required(\"Present Address is mandatory\"),\r\n    permanentAddress: Yup.string().required(\"Permanent Address is mandatory\"),\r\n    driveLic: Yup.string().notRequired(),\r\n    lang: Yup.string().required(\"Language is mandatory\"),\r\n    familyDetails: Yup.array()\r\n      .of(\r\n        Yup.object().shape({\r\n          name: Yup.string().notRequired(),\r\n          relationship: Yup.string().notRequired(),\r\n          age: Yup.string().notRequired(),\r\n          occupation: Yup.string().notRequired(),\r\n          place: Yup.string().notRequired(),\r\n        })\r\n      )\r\n      .notRequired(),\r\n    eduDetails: Yup.array()\r\n      .of(\r\n        Yup.object().shape({\r\n          university: Yup.string().required(\"University Name is mandatory \"),\r\n          fromDate: Yup.string().required(\"From Date is mandatory\"),\r\n          toDate: Yup.string().required(\"To Date is mandatory\"),\r\n          degree: Yup.string().required(\"Degree is mandatory\"),\r\n        })\r\n      )\r\n      .required(\"At least one education detail is mandatory\"),\r\n    workExperience: Yup.array().of(\r\n      Yup.object().shape({\r\n        fromDate: Yup.string().notRequired(),\r\n        toDate: Yup.string().notRequired(),\r\n        companyAndAddress: Yup.string().notRequired(),\r\n        position: Yup.string().notRequired(),\r\n        salary: Yup.string().notRequired(),\r\n        reasonLeaving: Yup.string().notRequired(),\r\n      })\r\n    ),\r\n  });\r\n};\r\n\r\nexport const EducationSchema = Yup.object({\r\n  referees: Yup.array()\r\n    .of(\r\n      Yup.object().shape({\r\n        name: Yup.string().notRequired(),\r\n        address: Yup.string().notRequired(),\r\n        phoneNumber: Yup.string().notRequired(),\r\n        profession: Yup.string().notRequired(),\r\n      })\r\n    )\r\n    .notRequired(),\r\n  relatives: Yup.array()\r\n    .of(\r\n      Yup.object().shape({\r\n        name: Yup.string().notRequired(),\r\n        position: Yup.string().notRequired(),\r\n        relationship: Yup.string().notRequired(),\r\n      })\r\n    )\r\n    .notRequired(),\r\n  description: Yup.string().notRequired(),\r\n  emgDetails: Yup.array()\r\n    .of(\r\n      Yup.object().shape({\r\n        name: Yup.string().required(\"Name is mandatory\"),\r\n        relationship: Yup.string().required(\"Relationship is mandatory\"),\r\n        address: Yup.string().required(\"Address is mandatory\"),\r\n        phoneNumber: Yup.string().required(\"Phone Number is mandatory\"),\r\n        bloodGroup: Yup.string().notRequired(),\r\n      })\r\n    )\r\n    .required(\"At least one emergency contact is mandatory\"),\r\n  disease: Yup.string().notRequired(),\r\n  liquor: Yup.string().notRequired(),\r\n  crime: Yup.string().notRequired(),\r\n  diseaseDesc: Yup.string().when(\"disease\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"yes\",\r\n    then: () => Yup.string().notRequired(),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n  liquorDesc: Yup.string().when(\"liquor\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"yes\",\r\n    then: () => Yup.string().notRequired(),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n  crimeDesc: Yup.string().when(\"crime\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"yes\",\r\n    then: () => Yup.string().notRequired(),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n});\r\n\r\nexport const CandidatesSchema = Yup.object().shape({\r\n  salaryExpectation: Yup.string().notRequired(),\r\n  noExperience: Yup.string().required(\"Experience is required\"),\r\n  noticePeriod: Yup.string().required(\"Notice period is required\"),\r\n  empStatement: Yup.string().required(\"Employee Statement is required\"),\r\n  perIS: Yup.string().required(\"Interview status is required\"),\r\n  perID: Yup.string().when(\"perInterviewStatus\", {\r\n    is: (value) => value && value.trim().toLowerCase() === \"yes\",\r\n    then: () => Yup.string().notRequired(),\r\n    otherwise: () => Yup.string(),\r\n  }),\r\n  supportInfo: Yup.string(),\r\n\r\n  // File validation for resume (e.g., PDF, Word, Excel, or images)\r\n  uploadResume: Yup.mixed()\r\n    .required(\"Resume is required\")\r\n    .test(\r\n      \"fileType\",\r\n      \"Only PDF, Word, Excel, or image formats (JPEG, JPG, PNG, SVG) are allowed\",\r\n      (value) => {\r\n        return (\r\n          value &&\r\n          [\r\n            \"application/pdf\", // PDF\r\n            \"application/msword\", // Word .doc\r\n            \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\", // Word .docx\r\n            \"application/vnd.ms-excel\", // Excel .xls\r\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", // Excel .xlsx\r\n            \"image/jpeg\",\r\n            \"image/jpg\",\r\n            \"image/png\",\r\n            \"image/svg+xml\", // Images\r\n          ].includes(value.type)\r\n        );\r\n      }\r\n    ),\r\n\r\n  // File validation for certificate (e.g., PDF, Word, Excel, or images)\r\n  uploadCertificate: Yup.mixed()\r\n    .required(\"Certificate is required\")\r\n    .test(\r\n      \"fileType\",\r\n      \"Only PDF, Word, Excel, or image formats (JPEG, JPG, PNG, SVG) are allowed\",\r\n      (value) => {\r\n        return (\r\n          value &&\r\n          [\r\n            \"application/pdf\", // PDF\r\n            \"application/msword\", // Word .doc\r\n            \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\", // Word .docx\r\n            \"application/vnd.ms-excel\", // Excel .xls\r\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", // Excel .xlsx\r\n            \"image/jpeg\",\r\n            \"image/jpg\",\r\n            \"image/png\",\r\n            \"image/svg+xml\", // Images\r\n          ].includes(value.type)\r\n        );\r\n      }\r\n    ),\r\n\r\n  // File validation for passport (e.g., PDF, Word, Excel, or images)\r\n  uploadPp: Yup.mixed()\r\n    .required(\"Passport is required\")\r\n    .test(\r\n      \"fileType\",\r\n      \"Only PDF, Word, Excel, or image formats (JPEG, JPG, PNG, SVG) are allowed\",\r\n      (value) => {\r\n        return (\r\n          value &&\r\n          [\r\n            \"application/pdf\", // PDF\r\n            \"application/msword\", // Word .doc\r\n            \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\", // Word .docx\r\n            \"application/vnd.ms-excel\", // Excel .xls\r\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", // Excel .xlsx\r\n            \"image/jpeg\",\r\n            \"image/jpg\",\r\n            \"image/png\",\r\n            \"image/svg+xml\", // Images\r\n          ].includes(value.type)\r\n        );\r\n      }\r\n    ),\r\n});\r\n\r\n// Define the validation schema using Yup\r\nexport const EmpRequisitionSchema = Yup.object().shape({\r\n  nameReq: Yup.string().notRequired(),\r\n  requestorID: Yup.string().notRequired(),\r\n  approverID: Yup.string().notRequired(),\r\n  department: Yup.string().required(\"Department is required\"),\r\n  project: Yup.string().required(\"Project is required\"),\r\n  position: Yup.string().required(\"Position is required\"),\r\n  quantity: Yup.number()\r\n    .typeError(\"Quantity must be a number\")\r\n    .required(\"Quantity is required\"),\r\n  reasonForReq: Yup.string().required(\"Reason for request is required\"),\r\n  justification: Yup.string().required(\"Justification is required\"),\r\n  replacementFor: Yup.string().notRequired(),\r\n  qualification: Yup.string().required(\"State Qualification is required\"),\r\n  tentativeDate: Yup.date()\r\n    .min(new Date(), \"Tentative date must be in the future\")\r\n    .required(\"Tentative date is required\")\r\n    .typeError(\"Please enter a valid date\"),\r\n  status: Yup.string().notRequired(),\r\n  remarkReq: Yup.string().notRequired(),\r\n});\r\n\r\n\r\nexport const InterviewScheduleSchema = Yup.object().shape({\r\n  interDate: Yup.date()\r\n  .required(\"Date is required\")\r\n  .typeError(\"Date is required\")\r\n  .min(\r\n    new Date(),\r\n    \"The selected date is in the past. Please choose a valid date.\"\r\n  ),\r\n  interTime: Yup.string()\r\n  .required(\"Time is required\")\r\n  .matches(\r\n    /^(0[8-9]|1[0-5]):([0-5]\\d)$/,\r\n    \"Please choose a time between 8:00 AM and 4:00 PM.\"\r\n  ),\r\n  venue: Yup.string().required(\"Venue is required\"),\r\n  interType: Yup.string().notRequired(),\r\n  empBadgeNo: Yup.string().notRequired(\"Badge Number is required\"),\r\n  manager:  Yup.string().notRequired(\"Manager is required\"),\r\n  message: Yup.string().optional(),\r\n});\r\n\r\nexport const hiringJobSchema = Yup.object().shape({\r\n  jobTitle: Yup.string().required(\"Job Title is required\"),\r\n  location: Yup.string().notRequired(),\r\n  jobDesc: Yup.string().notRequired(),\r\n  experience: Yup.string().required(\"Experience is required\"),\r\n  quantity: Yup.string().notRequired(),\r\n  startDate: Yup.date()\r\n    .nullable()\r\n    .transform((value, originalValue) => (originalValue === \"\" ? null : value))\r\n    .notRequired(),\r\n  expiryDate: Yup.date()\r\n    .nullable()\r\n    .transform((value, originalValue) => (originalValue === \"\" ? null : value))\r\n    .notRequired()\r\n    .test(\"is-future-date\", \"Only Future Dates Allowed\", function (value) {\r\n      return !value || new Date(value) > new Date();\r\n    }),\r\n    uploadJobDetails:Yup.string().notRequired()\r\n});\r\n\r\n//WorkPass Tracking Forms Schema - Recruitment \r\nexport const SawpFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  sawpLtrReq: Yup.date().notRequired(),\r\n  sawpLtrRece: Yup.date().notRequired(),\r\n  sawpFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const DoeFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  doeSubmit: Yup.date().notRequired(),\r\n  doeApproval: Yup.date().notRequired(),\r\n  doeValid: Yup.date().notRequired(),\r\n  doeRefNo: Yup.string().notRequired(),\r\n  doeFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const NlmsFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  nlmsSubmit: Yup.date().notRequired(),\r\n  nlmsSubmitRefNo: Yup.string().notRequired(),\r\n  nlmsApproval: Yup.date().notRequired(),\r\n  nlmsValid: Yup.date().notRequired(),\r\n  ldRefNo: Yup.string().notRequired(),\r\n  nlmsFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const BankFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  bgSubmit: Yup.date().notRequired(),\r\n  bgRece: Yup.date().notRequired(),\r\n  bgValid: Yup.date().notRequired(),\r\n  bgRefNo: Yup.string().notRequired(),\r\n  bgAmount: Yup.string().notRequired(),\r\n  bgFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const JitpaFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  jpTbaPurchase: Yup.date().notRequired(),\r\n  jpEndorsement: Yup.date().notRequired(),\r\n  jitpaValid: Yup.date().notRequired(),\r\n  jpAmount: Yup.string().notRequired(),\r\n  jitpaFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const LabourDepFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  labDepReceiptNo: Yup.string().notRequired(),\r\n  labDepAmount: Yup.string().notRequired(),\r\n  labEndrose: Yup.date().notRequired(),\r\n  labDepFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const ImmigrationFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  immbdNo: Yup.string().notRequired(),\r\n  docSubmit: Yup.date().notRequired(),\r\n  visaApproval: Yup.date().notRequired(),\r\n  visaRefNo: Yup.string().notRequired(),\r\n  visaFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const AirTktFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  departure: Yup.date().notRequired(),\r\n  arrival: Yup.date().notRequired(),\r\n  cityName: Yup.string().notRequired(),\r\n  airFare: Yup.string().notRequired(),\r\n  airTktFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});\r\nexport const NonLocalMOBFormSchema = Yup.object().shape({\r\n  tempID: Yup.string().required(\"Temporary ID is Required\"),\r\n  mobSignDate: Yup.date().notRequired(),\r\n  agent: Yup.string().notRequired(),\r\n  remarkNLMob: Yup.string().notRequired(),\r\n  mobFile: Yup.mixed()\r\n    .nullable()\r\n    .notRequired()\r\n    .test(\"fileType\", \"Only PDF files are allowed\", (value) =>\r\n      value ? value.type === \"application/pdf\" : false\r\n    ),\r\n});","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AuthValidationErrorCode } from '../errors/types/validation';\nexport const validationErrorMap = {\n    [AuthValidationErrorCode.EmptyChallengeResponse]: {\n        message: 'challengeResponse is required to confirmSignIn',\n    },\n    [AuthValidationErrorCode.EmptyConfirmResetPasswordUsername]: {\n        message: 'username is required to confirmResetPassword',\n    },\n    [AuthValidationErrorCode.EmptyConfirmSignUpCode]: {\n        message: 'code is required to confirmSignUp',\n    },\n    [AuthValidationErrorCode.EmptyConfirmSignUpUsername]: {\n        message: 'username is required to confirmSignUp',\n    },\n    [AuthValidationErrorCode.EmptyConfirmResetPasswordConfirmationCode]: {\n        message: 'confirmationCode is required to confirmResetPassword',\n    },\n    [AuthValidationErrorCode.EmptyConfirmResetPasswordNewPassword]: {\n        message: 'newPassword is required to confirmResetPassword',\n    },\n    [AuthValidationErrorCode.EmptyResendSignUpCodeUsername]: {\n        message: 'username is required to confirmSignUp',\n    },\n    [AuthValidationErrorCode.EmptyResetPasswordUsername]: {\n        message: 'username is required to resetPassword',\n    },\n    [AuthValidationErrorCode.EmptySignInPassword]: {\n        message: 'password is required to signIn',\n    },\n    [AuthValidationErrorCode.EmptySignInUsername]: {\n        message: 'username is required to signIn',\n    },\n    [AuthValidationErrorCode.EmptySignUpPassword]: {\n        message: 'password is required to signUp',\n    },\n    [AuthValidationErrorCode.EmptySignUpUsername]: {\n        message: 'username is required to signUp',\n    },\n    [AuthValidationErrorCode.CustomAuthSignInPassword]: {\n        message: 'A password is not needed when signing in with CUSTOM_WITHOUT_SRP',\n        recoverySuggestion: 'Do not include a password in your signIn call.',\n    },\n    [AuthValidationErrorCode.IncorrectMFAMethod]: {\n        message: 'Incorrect MFA method was chosen. It should be either SMS, TOTP, or EMAIL',\n        recoverySuggestion: 'Try to pass SMS, TOTP, or EMAIL as the challengeResponse',\n    },\n    [AuthValidationErrorCode.EmptyVerifyTOTPSetupCode]: {\n        message: 'code is required to verifyTotpSetup',\n    },\n    [AuthValidationErrorCode.EmptyUpdatePassword]: {\n        message: 'oldPassword and newPassword are required to changePassword',\n    },\n    [AuthValidationErrorCode.EmptyConfirmUserAttributeCode]: {\n        message: 'confirmation code is required to confirmUserAttribute',\n    },\n};\n// TODO: delete this code when the Auth class is removed.\nexport var AuthErrorStrings;\n(function (AuthErrorStrings) {\n    AuthErrorStrings[\"DEFAULT_MSG\"] = \"Authentication Error\";\n    AuthErrorStrings[\"EMPTY_EMAIL\"] = \"Email cannot be empty\";\n    AuthErrorStrings[\"EMPTY_PHONE\"] = \"Phone number cannot be empty\";\n    AuthErrorStrings[\"EMPTY_USERNAME\"] = \"Username cannot be empty\";\n    AuthErrorStrings[\"INVALID_USERNAME\"] = \"The username should either be a string or one of the sign in types\";\n    AuthErrorStrings[\"EMPTY_PASSWORD\"] = \"Password cannot be empty\";\n    AuthErrorStrings[\"EMPTY_CODE\"] = \"Confirmation code cannot be empty\";\n    AuthErrorStrings[\"SIGN_UP_ERROR\"] = \"Error creating account\";\n    AuthErrorStrings[\"NO_MFA\"] = \"No valid MFA method provided\";\n    AuthErrorStrings[\"INVALID_MFA\"] = \"Invalid MFA type\";\n    AuthErrorStrings[\"EMPTY_CHALLENGE\"] = \"Challenge response cannot be empty\";\n    AuthErrorStrings[\"NO_USER_SESSION\"] = \"Failed to get the session because the user is empty\";\n    AuthErrorStrings[\"NETWORK_ERROR\"] = \"Network Error\";\n    AuthErrorStrings[\"DEVICE_CONFIG\"] = \"Device tracking has not been configured in this User Pool\";\n    AuthErrorStrings[\"AUTOSIGNIN_ERROR\"] = \"Please use your credentials to sign in\";\n    AuthErrorStrings[\"OAUTH_ERROR\"] = \"Couldn't finish OAuth flow, check your User Pool HostedUI settings\";\n})(AuthErrorStrings || (AuthErrorStrings = {}));\nexport var AuthErrorCodes;\n(function (AuthErrorCodes) {\n    AuthErrorCodes[\"SignInException\"] = \"SignInException\";\n    AuthErrorCodes[\"OAuthSignInError\"] = \"OAuthSignInException\";\n})(AuthErrorCodes || (AuthErrorCodes = {}));\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport var AuthValidationErrorCode;\n(function (AuthValidationErrorCode) {\n    AuthValidationErrorCode[\"EmptySignInUsername\"] = \"EmptySignInUsername\";\n    AuthValidationErrorCode[\"EmptySignInPassword\"] = \"EmptySignInPassword\";\n    AuthValidationErrorCode[\"CustomAuthSignInPassword\"] = \"CustomAuthSignInPassword\";\n    AuthValidationErrorCode[\"EmptySignUpUsername\"] = \"EmptySignUpUsername\";\n    AuthValidationErrorCode[\"EmptySignUpPassword\"] = \"EmptySignUpPassword\";\n    AuthValidationErrorCode[\"EmptyConfirmSignUpUsername\"] = \"EmptyConfirmSignUpUsername\";\n    AuthValidationErrorCode[\"EmptyConfirmSignUpCode\"] = \"EmptyConfirmSignUpCode\";\n    AuthValidationErrorCode[\"EmptyResendSignUpCodeUsername\"] = \"EmptyresendSignUpCodeUsername\";\n    AuthValidationErrorCode[\"EmptyChallengeResponse\"] = \"EmptyChallengeResponse\";\n    AuthValidationErrorCode[\"EmptyConfirmResetPasswordUsername\"] = \"EmptyConfirmResetPasswordUsername\";\n    AuthValidationErrorCode[\"EmptyConfirmResetPasswordNewPassword\"] = \"EmptyConfirmResetPasswordNewPassword\";\n    AuthValidationErrorCode[\"EmptyConfirmResetPasswordConfirmationCode\"] = \"EmptyConfirmResetPasswordConfirmationCode\";\n    AuthValidationErrorCode[\"EmptyResetPasswordUsername\"] = \"EmptyResetPasswordUsername\";\n    AuthValidationErrorCode[\"EmptyVerifyTOTPSetupCode\"] = \"EmptyVerifyTOTPSetupCode\";\n    AuthValidationErrorCode[\"EmptyConfirmUserAttributeCode\"] = \"EmptyConfirmUserAttributeCode\";\n    AuthValidationErrorCode[\"IncorrectMFAMethod\"] = \"IncorrectMFAMethod\";\n    AuthValidationErrorCode[\"EmptyUpdatePassword\"] = \"EmptyUpdatePassword\";\n})(AuthValidationErrorCode || (AuthValidationErrorCode = {}));\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { validationErrorMap } from '../../common/AuthErrorStrings';\nimport { AuthError } from '../AuthError';\nexport function assertValidationError(assertion, name) {\n    const { message, recoverySuggestion } = validationErrorMap[name];\n    if (!assertion) {\n        throw new AuthError({ name, message, recoverySuggestion });\n    }\n}\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Category, getAmplifyUserAgent, } from '@aws-amplify/core/internals/utils';\nexport const getAuthUserAgentValue = (action, customUserAgentDetails) => getAmplifyUserAgent({\n    category: Category.Auth,\n    action,\n    ...customUserAgentDetails,\n});\n"],"names":["async","resetPassword","input","_Amplify$getConfig$Au","_input$options","username","assertValidationError","AuthValidationErrorCode","EmptyResetPasswordUsername","authConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","userPoolClientId","userPoolId","userPoolEndpoint","clientMetadata","options","UserContextData","getUserContextData","forgotPassword","config","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","composeServiceApi","cognitoUserPoolTransferHandler","createUserPoolSerializer","createUserPoolDeserializer","_objectSpread","DEFAULT_SERVICE_CLIENT_API_CONFIG","codeDeliveryDetails","region","getRegionFromUserPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","ResetPassword","Username","ClientMetadata","ClientId","CodeDeliveryDetails","isPasswordReset","nextStep","resetPasswordStep","deliveryMedium","DeliveryMedium","destination","Destination","attributeName","AttributeName","ForgotEmail","_errors$userName","navigate","useNavigate","register","formState","errors","handleSubmit","useForm","resolver","yupResolver","EmailSchema","isLoading","setIsLoading","useState","error","setError","onSubmit","userName","data","console","log","output","concat","err","code","_jsxs","className","children","_jsx","src","emailImage","alt","logo","htmlFor","type","id","name","placeholder","message","disabled","Link","to","LoginSchema","Yup","userID","required","password","newPasswordSchema","newPassword","min","rePassword","oneOf","UserSchema","empID","selectType","officialEmail","contactNo","position","department","ApplicantSchema","currentPassword","max","matches","confirmPassword","shape","profilePhoto","test","value","agent","notRequired","contractType","empType","chinese","gender","dob","age","email","cob","nationality","otherNation","when","is","trim","toLowerCase","then","otherwise","marital","race","otherRace","religion","otherReligion","PersonalSchema","isBruneian","bwnIcNo","bwnIcColour","bwnIcExpiry","ppNo","ppIssued","ppExpiry","ppDestinate","alternateNo","presentAddress","permanentAddress","driveLic","lang","familyDetails","of","relationship","occupation","place","eduDetails","university","fromDate","toDate","degree","workExperience","companyAndAddress","salary","reasonLeaving","EducationSchema","referees","address","phoneNumber","profession","relatives","description","emgDetails","bloodGroup","disease","liquor","crime","diseaseDesc","liquorDesc","crimeDesc","CandidatesSchema","salaryExpectation","noExperience","noticePeriod","empStatement","perIS","perID","supportInfo","uploadResume","includes","uploadCertificate","uploadPp","EmpRequisitionSchema","nameReq","requestorID","approverID","project","quantity","typeError","reasonForReq","justification","replacementFor","qualification","tentativeDate","Date","status","remarkReq","InterviewScheduleSchema","interDate","interTime","venue","interType","empBadgeNo","manager","optional","hiringJobSchema","jobTitle","location","jobDesc","experience","startDate","nullable","transform","originalValue","expiryDate","uploadJobDetails","SawpFormSchema","tempID","sawpLtrReq","sawpLtrRece","sawpFile","DoeFormSchema","doeSubmit","doeApproval","doeValid","doeRefNo","doeFile","NlmsFormSchema","nlmsSubmit","nlmsSubmitRefNo","nlmsApproval","nlmsValid","ldRefNo","nlmsFile","BankFormSchema","bgSubmit","bgRece","bgValid","bgRefNo","bgAmount","bgFile","JitpaFormSchema","jpTbaPurchase","jpEndorsement","jitpaValid","jpAmount","jitpaFile","LabourDepFormSchema","labDepReceiptNo","labDepAmount","labEndrose","labDepFile","ImmigrationFormSchema","immbdNo","docSubmit","visaApproval","visaRefNo","visaFile","AirTktFormSchema","departure","arrival","cityName","airFare","airTktFile","NonLocalMOBFormSchema","mobSignDate","remarkNLMob","mobFile","validationErrorMap","EmptyChallengeResponse","EmptyConfirmResetPasswordUsername","EmptyConfirmSignUpCode","EmptyConfirmSignUpUsername","EmptyConfirmResetPasswordConfirmationCode","EmptyConfirmResetPasswordNewPassword","EmptyResendSignUpCodeUsername","EmptySignInPassword","EmptySignInUsername","EmptySignUpPassword","EmptySignUpUsername","CustomAuthSignInPassword","recoverySuggestion","IncorrectMFAMethod","EmptyVerifyTOTPSetupCode","EmptyUpdatePassword","EmptyConfirmUserAttributeCode","AuthErrorStrings","AuthErrorCodes","assertion","AuthError","action","customUserAgentDetails","getAmplifyUserAgent","category","Category"],"sourceRoot":""}