{"version":3,"file":"static/js/333.b02c1187.chunk.js","mappings":"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","sources":["../node_modules/@aws-amplify/storage/src/providers/s3/utils/client/s3data/deleteObject.ts","../node_modules/@aws-amplify/storage/src/providers/s3/apis/remove.ts","../node_modules/@aws-amplify/storage/src/providers/s3/apis/internal/remove.ts","pages/profile/PPPopUp.jsx","services/uploadDocsS3/UploadProfile.jsx","services/uploadDocsS3/DeleteDocs.jsx","pages/profile/Profile.jsx","components/Navbar.jsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseMetadata, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { assignStringVariables, buildStorageServiceError, deserializeBoolean, map, s3TransferHandler, serializePathnameObjectKey, validateS3RequiredParameter, } from '../utils';\nimport { validateObjectUrl } from '../../validateObjectUrl';\nimport { defaultConfig, parseXmlError } from './base';\nconst deleteObjectSerializer = (input, endpoint) => {\n    const url = new AmplifyUrl(endpoint.url.toString());\n    validateS3RequiredParameter(!!input.Key, 'Key');\n    url.pathname = serializePathnameObjectKey(url, input.Key);\n    validateObjectUrl({\n        bucketName: input.Bucket,\n        key: input.Key,\n        objectURL: url,\n    });\n    const headers = assignStringVariables({\n        'x-amz-expected-bucket-owner': input.ExpectedBucketOwner,\n    });\n    return {\n        method: 'DELETE',\n        headers,\n        url,\n    };\n};\nconst deleteObjectDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        // error is always set when statusCode >= 300\n        const error = (await parseXmlError(response));\n        throw buildStorageServiceError(error, response.statusCode);\n    }\n    else {\n        const content = map(response.headers, {\n            DeleteMarker: ['x-amz-delete-marker', deserializeBoolean],\n            VersionId: 'x-amz-version-id',\n            RequestCharged: 'x-amz-request-charged',\n        });\n        return {\n            ...content,\n            $metadata: parseMetadata(response),\n        };\n    }\n};\nexport const deleteObject = composeServiceApi(s3TransferHandler, deleteObjectSerializer, deleteObjectDeserializer, { ...defaultConfig, responseType: 'text' });\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { remove as removeInternal } from './internal/remove';\nexport function remove(input) {\n    return removeInternal(Amplify, input);\n}\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { StorageAction } from '@aws-amplify/core/internals/utils';\nimport { resolveS3ConfigAndInput, validateBucketOwnerID, validateStorageOperationInput, } from '../../utils';\nimport { deleteObject } from '../../utils/client/s3data';\nimport { getStorageUserAgentValue } from '../../utils/userAgent';\nimport { logger } from '../../../../utils';\nimport { STORAGE_INPUT_KEY } from '../../utils/constants';\nexport const remove = async (amplify, input) => {\n    const { s3Config, keyPrefix, bucket, identityId } = await resolveS3ConfigAndInput(amplify, input);\n    const { inputType, objectKey } = validateStorageOperationInput(input, identityId);\n    validateBucketOwnerID(input.options?.expectedBucketOwner);\n    let finalKey;\n    if (inputType === STORAGE_INPUT_KEY) {\n        finalKey = `${keyPrefix}${objectKey}`;\n        logger.debug(`remove \"${objectKey}\" from \"${finalKey}\".`);\n    }\n    else {\n        finalKey = objectKey;\n        logger.debug(`removing object in path \"${finalKey}\"`);\n    }\n    await deleteObject({\n        ...s3Config,\n        userAgentValue: getStorageUserAgentValue(StorageAction.Remove),\n    }, {\n        Bucket: bucket,\n        Key: finalKey,\n        ExpectedBucketOwner: input.options?.expectedBucketOwner,\n    });\n    return inputType === STORAGE_INPUT_KEY\n        ? {\n            key: objectKey,\n        }\n        : {\n            path: objectKey,\n        };\n};\n","import React, { useEffect, useState } from \"react\";\r\nimport avatar from \"../../assets/navabar/avatar.jpeg\";\r\nimport { getUrl } from \"@aws-amplify/storage\";\r\nimport { MdOutlineCancel } from \"react-icons/md\";\r\nimport { handleDeleteFile } from \"../../services/uploadDocsS3/DeleteDocs\";\r\nimport { listEmpPersonalInfos } from \"../../graphql/queries\";\r\nimport { generateClient } from \"@aws-amplify/api\";\r\nimport { updateEmpPersonalInfo } from \"../../graphql/mutations\";\r\nimport { UploadProfile } from \"../../services/uploadDocsS3/UploadProfile\";\r\n\r\nexport const PPPopUp = ({\r\n  handleProfile,\r\n  profilePhoto,\r\n  getPPhotoString,\r\n  setPersonalInfo,\r\n}) => {\r\n\r\n  const client = generateClient();\r\n  const [changeProfilePhoto, setChangeProfilePhoto] = useState(\"\");\r\n  const [PPLastUP, setPPLastUP] = useState(null);\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [isButtonVisible, setIsButtonVisible] = useState(false);\r\n  const [isRemoveButtonVisible, setIsRemoveButtonVisible] = useState(false);\r\n  const watchedEmpID = localStorage.getItem(\"userID\").toString().toUpperCase();\r\n\r\n  const handleFileUpload = async (e, type) => {\r\n    if (!watchedEmpID) {\r\n      return;\r\n    }\r\n\r\n    const file = e.target.files[0];\r\n\r\n    if (!file) return;\r\n\r\n    // Allowed file types\r\n    const allowedTypes = [\r\n      \"application/pdf\",\r\n      \"image/jpeg\",\r\n      \"image/png\",\r\n      \"image/jpg\",\r\n    ];\r\n    if (!allowedTypes.includes(file.type)) {\r\n      alert(\"Upload must be a PDF file or an image (JPG, JPEG, PNG)\");\r\n      return;\r\n    }\r\n\r\n    setSelectedFile(file.name);\r\n    await UploadProfile(file, type, setChangeProfilePhoto, watchedEmpID);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (changeProfilePhoto?.profilePhoto) {\r\n      const lastUploadProf = changeProfilePhoto.profilePhoto;\r\n      const linkToStorageFile = async (url) => {\r\n        const result = await getUrl({ path: url });\r\n        setPPLastUP(result?.url?.toString());\r\n\r\n        setIsButtonVisible(false);\r\n        setIsRemoveButtonVisible(true);\r\n      };\r\n      linkToStorageFile(lastUploadProf);\r\n    }\r\n  }, [changeProfilePhoto]);\r\n\r\n  useEffect(() => {\r\n    if (getPPhotoString) {\r\n      const fileName = getPPhotoString.split(\"/\").pop();\r\n\r\n      if (String(fileName) === String(null)) {\r\n        setIsButtonVisible(true);\r\n        setIsRemoveButtonVisible(false);\r\n      } else {\r\n        setIsRemoveButtonVisible(true);\r\n      }\r\n      setSelectedFile(fileName);\r\n      // setPPLastUP(null);\r\n      // setChangeProfilePhoto(\"\");\r\n      // // profilePhoto=null\r\n    }\r\n  }, [getPPhotoString]);\r\n  const deleteFile = async () => {\r\n    if (!selectedFile) return;\r\n\r\n    try {\r\n      await handleDeleteFile(\"profilePhoto\", selectedFile, watchedEmpID);\r\n      setPPLastUP(null);\r\n      setChangeProfilePhoto(\"\");\r\n      setSelectedFile(null);\r\n\r\n      setPersonalInfo(({ profilePhoto, ...rest }) => ({\r\n        ...rest,\r\n        profilePhoto: null,\r\n      }));\r\n      setIsButtonVisible(true);\r\n      setIsRemoveButtonVisible(false);\r\n    } catch (error) {\r\n      console.error(\"Error deleting file:\", error);\r\n    }\r\n  };\r\n\r\n  // id:,profilePhoto || null - updatemethod\r\n\r\n  const onSubmit = () => {\r\n    async function fetchAllData(queryName) {\r\n      let allData = [];\r\n      let nextToken = null;\r\n      const filter = {\r\n        and: [\r\n          {\r\n            empID: { eq: watchedEmpID || null },\r\n          },\r\n        ],\r\n      };\r\n      do {\r\n        const response = await client.graphql({\r\n          query: queryName,\r\n          variables: { filter: filter, nextToken },\r\n        });\r\n\r\n        const items = response.data[Object.keys(response.data)[0]].items;\r\n        allData = [...allData, ...items];\r\n        nextToken = response.data[Object.keys(response.data)[0]].nextToken;\r\n      } while (nextToken);\r\n\r\n      return allData;\r\n    }\r\n\r\n    async function updateProfile(data) {\r\n      try {\r\n        for (const input of data) {\r\n          const { __typename, createdAt, updatedAt, ...validTimeSheet } = input;\r\n          const response = await client.graphql({\r\n            query: updateEmpPersonalInfo,\r\n            variables: { input: validTimeSheet },\r\n          });\r\n\r\n          const empDetails = response.data.updateEmpPersonalInfo;\r\n\r\n          window.location.reload();\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching employee data: \", error);\r\n      }\r\n    }\r\n\r\n    async function fetchEmployeeData() {\r\n      const empDetails = await fetchAllData(listEmpPersonalInfos);\r\n\r\n      const fileKey = `public/${\"profilePhoto\"}/${watchedEmpID}/${selectedFile}`;\r\n      const updatedData = empDetails.map((val) => {\r\n        return {\r\n          ...val,\r\n          profilePhoto: fileKey || null,\r\n        };\r\n      });\r\n      updateProfile(updatedData);\r\n    }\r\n\r\n    fetchEmployeeData();\r\n  };\r\n  return (\r\n    <section className=\"fixed top-0 left-0 center w-full h-full z-50 bg-grey bg-opacity-15 inset-0\">\r\n      <div className=\"bg-white max-w-md w-full max-h-72 h-full rounded-md center flex-col shadow-xl p-5 gap-5\">\r\n        <button className=\"absolute top-4 right-5\" onClick={handleProfile}>\r\n          <MdOutlineCancel size={30} className=\"text-dark_grey\" />\r\n        </button>\r\n        <div className=\"center\">\r\n          <div className=\"py-2 center flex-col max-w-[160px]\">\r\n            <input\r\n              type=\"file\"\r\n              id=\"fileInput\"\r\n              name=\"profilePhoto\"\r\n              accept=\".jpg,.jpeg,.png\"\r\n              onChange={(e) => handleFileUpload(e, \"profilePhoto\")}\r\n              className=\"hidden\"\r\n            />\r\n            <div className=\"h-[180px] w-[180px] border border-grey rounded-full center\">\r\n              <div className=\"h-[150px] w-[150px] rounded-full overflow-hidden bg-lite_skyBlue\">\r\n                <img\r\n                  src={\r\n                    PPLastUP\r\n                      ? PPLastUP\r\n                      : changeProfilePhoto || profilePhoto || avatar\r\n                  }\r\n                  id=\"previewImg\"\r\n                  alt=\"profile\"\r\n                  className=\"object-cover w-full h-full\"\r\n                  onError={(e) => (e.target.src = avatar)}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"flex justify-evenly items-center w-full\">\r\n          {isButtonVisible && (\r\n            <button\r\n              className=\"border-2 border-primary bg-[#FFFCD7] rounded-md px-5 py-2\"\r\n              onClick={() => document.getElementById(\"fileInput\").click()}\r\n            >\r\n              Change\r\n            </button>\r\n          )}\r\n          <button\r\n            className=\"border-2 border-primary bg-[#FFFCD7] rounded-md px-5 py-2\"\r\n            onClick={() => {\r\n              onSubmit();\r\n            }}\r\n          >\r\n            Save\r\n          </button>\r\n\r\n          {isRemoveButtonVisible && (\r\n            <button\r\n              className=\"border-2 border-primary rounded-md px-5 py-2\"\r\n              onClick={deleteFile}\r\n            >\r\n              Remove\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n","import { getCurrentUser } from \"@aws-amplify/auth\";\r\nimport { uploadData, remove } from \"@aws-amplify/storage\";\r\n\r\nexport const UploadProfile = async (\r\n  file,\r\n  fileType,\r\n  setUploadedDocs,\r\n  empID,\r\n  index\r\n) => {\r\n  try {\r\n    const currentUser = await getCurrentUser();\r\n\r\n    if (currentUser) {\r\n      const result = await uploadData({\r\n        path: `public/${fileType}/${empID}/${file.name}`,\r\n        data: file,\r\n      }).result;\r\n      const fileUrl = result.path;\r\n\r\n      const uploadDate = new Date().toISOString().split(\"T\")[0];\r\n\r\n      if (typeof index === \"number\") {\r\n        setUploadedDocs((prev) => {\r\n          const updatedUploads = { ...prev };\r\n\r\n          // Initialize the array if it doesn't exist\r\n          updatedUploads[fileType] = updatedUploads[fileType] || [];\r\n          updatedUploads[fileType][index] =\r\n            updatedUploads[fileType][index] || [];\r\n\r\n          const existingUpload = updatedUploads[fileType][index].find(\r\n            (item) => item.upload === fileUrl\r\n          );\r\n\r\n          if (!existingUpload) {\r\n            updatedUploads[fileType][index].push({\r\n              upload: fileUrl,\r\n              date: uploadDate,\r\n            });\r\n          }\r\n\r\n          return updatedUploads;\r\n        });\r\n      } else if (\r\n        fileType === \"profilePhoto\" ||\r\n        fileType === \"inducBriefUp\" ||\r\n        fileType === \"uploadJobDetails\"\r\n      ) {\r\n        setUploadedDocs((prevState) => ({\r\n          ...prevState,\r\n          [fileType]: fileUrl,\r\n        }));\r\n      } else {\r\n        setUploadedDocs((prev) => ({\r\n          ...prev,\r\n          [fileType]: [\r\n            ...(prev[fileType] || []),\r\n            { upload: fileUrl, date: uploadDate },\r\n          ],\r\n        }));\r\n      }\r\n    }\r\n  } catch (error) {\r\n    // console.log(Error uploading ${fileType}:, error);\r\n  }\r\n};\r\n\r\n// Delete file from S3 and update state\r\nexport const deleteDocs = async (\r\n  fileUrl,\r\n  fileType,\r\n  setUploadedDocs,\r\n  empID,\r\n  index\r\n) => {\r\n  try {\r\n    // Delete from S3\r\n    await remove(fileUrl);\r\n\r\n    // Update the state to remove the deleted file reference\r\n    setUploadedDocs((prev) => {\r\n      const updatedUploads = { ...prev };\r\n\r\n      if (\r\n        typeof index === \"number\" &&\r\n        Array.isArray(updatedUploads[fileType])\r\n      ) {\r\n        updatedUploads[fileType][index] = updatedUploads[fileType][\r\n          index\r\n        ].filter((item) => item.upload !== fileUrl);\r\n\r\n        // Remove the index array if it becomes empty\r\n        if (updatedUploads[fileType][index].length === 0) {\r\n          delete updatedUploads[fileType][index];\r\n        }\r\n      } else if (updatedUploads[fileType] === fileUrl) {\r\n        // Handle single file types like profilePhoto\r\n        updatedUploads[fileType] = null;\r\n      } else if (Array.isArray(updatedUploads[fileType])) {\r\n        // For general arrays of files\r\n        updatedUploads[fileType] = updatedUploads[fileType].filter(\r\n          (item) => item.upload !== fileUrl\r\n        );\r\n      }\r\n\r\n      return updatedUploads;\r\n    });\r\n  } catch (error) {\r\n    console.error(`Error deleting ${fileType}:, error`);\r\n  }\r\n};","import { remove } from \"aws-amplify/storage\";\r\nimport { updateIDDetails } from \"../../graphql/mutations\";\r\nimport { generateClient } from \"@aws-amplify/api\";\r\nimport { getIDDetails } from \"../../graphql/queries\";\r\n\r\nexport const handleDeleteFile = async (\r\n  fileType,\r\n  fileName,\r\n  empID,\r\n  setUploadedFileNames, \r\n  deleteID,\r\n  setValue,\r\n  watch,\r\n  trigger\r\n) => {\r\n  const client = generateClient();\r\n\r\n  if (!empID) {\r\n    alert(\"Please provide the Employee ID before deleting files.\");\r\n    return;\r\n  }\r\n\r\n  if (!fileName) {\r\n    alert(\"File name is missing. Please select a valid file to delete.\");\r\n    console.error(\"Missing fileName. Received parameters:\", {\r\n      fileType,\r\n      empID,\r\n      fileName,\r\n    });\r\n    return;\r\n  }\r\n\r\n  try {\r\n    // Construct the file key (path) for S3\r\n    const fileKey = `${fileType}/${empID}/${fileName}`;\r\n    // console.log(\"Attempting to delete file with key:\", fileKey);\r\n\r\n    // Delete the file from S3\r\n    await remove({\r\n      path: `public/${fileKey}`, // S3 path to the file\r\n      bucket: \"aweadininstorage20242a2fe-dev\", // Ensure the correct bucket name\r\n    });\r\n    // console.log(`File \"${fileName}\" deleted successfully from ${fileKey}`);\r\n\r\n    // Update local state to remove the deleted file from the uploaded file names\r\n    setUploadedFileNames((prev) => {\r\n      const updatedFiles = { ...prev };\r\n\r\n      if (Array.isArray(updatedFiles[fileType])) {\r\n        updatedFiles[fileType] = updatedFiles[fileType].filter(\r\n          (name) => name !== fileName\r\n        );\r\n        // If no files left for the specific type, delete the key\r\n        if (updatedFiles[fileType]?.length === 0) {\r\n          delete updatedFiles[fileType];\r\n        }\r\n      } else if (updatedFiles[fileType] === fileName) {\r\n        delete updatedFiles[fileType]; // If it's the only file, delete the key\r\n      }\r\n\r\n      return updatedFiles;\r\n    });\r\n\r\n    // Fetch current data from the database to update file references\r\n    const fetchIDDetailsResponse = await client.graphql({\r\n      query: getIDDetails,\r\n      variables: { id: deleteID },\r\n    });\r\n\r\n    const idDetails = fetchIDDetailsResponse.data.getIDDetails;\r\n    const currentUploadData = JSON.parse(idDetails[fileType]);\r\n   \r\n\r\n    const updatedUploadData = currentUploadData.filter((item) => {\r\n      // Keep items that don't match the fileName in 'upload' or the 'upload' key is missing\r\n      return !item.upload || !item.upload.includes(fileName);\r\n    });\r\n    // console.log(\"Updated upload data after deletion:\", updatedUploadData);\r\n\r\n    // Update the database using the GraphQL mutation\r\n    // await client.graphql({\r\n    //   query: updateIDDetails,\r\n    //   variables: {\r\n    //     input: {\r\n    //       id: deleteID,\r\n    //       [fileType]: JSON.stringify(updatedUploadData),\r\n    //     },\r\n    //   },\r\n    // });\r\n\r\n    // console.log(\"API response after updating database\");\r\n\r\n    // // Update the form state to reflect the file deletion\r\n    // const currentFiles = watch(fileType) || [];\r\n    // const updatedFiles = currentFiles.filter((file) => file.name !== fileName);\r\n\r\n    // console.log(\"Updated files array after deletion:\", updatedFiles);\r\n\r\n    // Use setValue to update the form field with the updated list of files\r\n    setValue(fileType, updatedUploadData);\r\n\r\n    // Trigger re-validation to ensure form is correctly updated\r\n    trigger(fileType);\r\n\r\n    // Show success message to the user\r\n    // alert(`File \"${fileName}\" deleted successfully`);\r\n\r\n    return true; // Indicate successful deletion\r\n  } catch (err) {\r\n    // console.error(\"Error deleting file:\", err);\r\n    // alert(\"Error processing the file deletion.\");\r\n  }\r\n};\r\n","import { IoCameraOutline } from \"react-icons/io5\";\r\nimport { IoMdLogOut } from \"react-icons/io\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { signOut } from \"@aws-amplify/auth\";\r\nimport { useState } from \"react\";\r\nimport { PPPopUp } from \"./PPPopUp\";\r\n\r\nexport const Profile = ({\r\n  setIsOpen,\r\n  profilePhoto,\r\n  name,\r\n  email,\r\n  contactNo,\r\n  getPPhotoString,\r\n  setPersonalInfo,\r\n}) => {\r\n  const [popup, setPopUp] = useState(false);\r\n  const handleProfile = () => {\r\n    setPopUp(!popup);\r\n  };\r\n\r\n  const SignOut = async () => {\r\n    try {\r\n      await signOut();\r\n      localStorage.removeItem(\"userID\");\r\n      localStorage.removeItem(\"userType\");\r\n     \r\n      window.location.href = \"/login\";\r\n    } catch (error) {\r\n      // console.log(\"Error signing out\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section>\r\n      <div className=\"center flex-col gap-2 py-2\">\r\n        <div className=\"relative\">\r\n          <div className=\"max-w-10 h-10 w-full rounded-full center relative overflow-hidden shadow-md shadow-[#00000033]\">\r\n            <img\r\n              className=\"w-full object-cover h-full \"\r\n              src={profilePhoto}\r\n              alt=\"avatar not found\"\r\n            />\r\n          </div>\r\n          <p\r\n            className=\"absolute -right-2 bottom-0 h-5 w-5 rounded-full bg-[#D9D9D9] center\"\r\n            onClick={handleProfile}\r\n          >\r\n            <IoCameraOutline className=\"text-xs text-dark_grey cursor-pointer\" />\r\n          </p>\r\n        </div>\r\n        <Link\r\n          to=\"/personalInformation\"\r\n          className=\"text-xs text-dark_grey\"\r\n          onClick={() => {\r\n            setIsOpen(false);\r\n          }}\r\n        >\r\n          Personal Info Edit\r\n        </Link>\r\n        <div className=\"h-1 w-full bg-[#AAAAAA]\"></div>\r\n      </div>\r\n      <div className=\"space-y-2 mb-3 px-4\">\r\n        <div className=\" space-y-1 text-[#4F4F4F] text-xs\">\r\n          <label htmlFor=\"name\" className=\"font-medium \">\r\n            Name\r\n          </label>\r\n          <div className=\"border flex-1 rounded-md border-[#d4cfcf]  px-2 py-1 \">\r\n            <input\r\n              id=\"name\"\r\n              className=\"outline-none w-full\"\r\n              type=\"text\"\r\n              value={name}\r\n              readOnly\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\" space-y-1 text-[#4F4F4F] text-xs\">\r\n          <label htmlFor=\"phoneNo\" className=\"font-medium \">\r\n            Phone Number\r\n          </label>\r\n          <div className=\"border rounded-md border-[#d4cfcf] text-[#4F4F4F] text-xs px-2 py-1 \">\r\n            <input\r\n              id=\"phoneNo\"\r\n              className=\"outline-none w-full\"\r\n              type=\"text\"\r\n              value={contactNo}\r\n              readOnly\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\" space-y-1 text-[#4F4F4F] text-xs\">\r\n          <label htmlFor=\"email\" className=\"font-medium \">\r\n            Email\r\n          </label>\r\n          <div className=\"border rounded-md border-[#d4cfcf] text-[#4F4F4F] text-xs px-2 py-1 \">\r\n            <input\r\n              id=\"email\"\r\n              className=\"outline-none w-full\"\r\n              type=\"text\"\r\n              value={email}\r\n              readOnly\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"flex justify-between text-xs text-dark_grey font-semibold pt-3\">\r\n          <Link\r\n            to=\"/changePassword\"\r\n            className=\"py-1 px-2 border-2 rounded-md border-primary \"\r\n          >\r\n            Change Password\r\n          </Link>\r\n          <Link\r\n            className={`flex items-center gap-1 py-1 px-2 bg-primary  rounded-md `}\r\n            onClick={SignOut}\r\n          >\r\n            Logout\r\n            <span>\r\n              <IoMdLogOut className=\"text-lg text-dark_grey\" />\r\n            </span>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n\r\n      {popup && (\r\n        <PPPopUp\r\n          handleProfile={handleProfile}\r\n          profilePhoto={profilePhoto}\r\n          getPPhotoString={getPPhotoString}\r\n          setPersonalInfo={setPersonalInfo}\r\n        />\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n","import { IoMdNotificationsOutline } from \"react-icons/io\";\r\nimport logo from \"../assets/logo/logo-with-name.svg\";\r\nimport avatar from \"../assets/navabar/avatar.jpeg\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { GoPencil } from \"react-icons/go\";\r\nimport { Profile } from \"../pages/profile/Profile\";\r\nimport { generateClient } from \"@aws-amplify/api\";\r\nimport { listEmpPersonalInfos } from \"../graphql/queries\";\r\nimport { getUrl } from \"@aws-amplify/storage\";\r\nimport { useNotifiCenter } from \"../hooks/useNotifiCenter\";\r\n\r\nconst client = generateClient();\r\nconst Navbar = () => {\r\n  const { unreadCount } = useNotifiCenter();\r\n  useEffect(() => {}, [unreadCount]);\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [currentTimeValue, setCurrentTimeValue] = useState(\"\");\r\n  const [currentDateValue, setCurrentDateValue] = useState(\"\");\r\n  const [getPPhotoString, setGetPPhotoString] = useState(null);\r\n  const [personalInfo, setPersonalInfo] = useState({\r\n    profilePhoto: \"\",\r\n    name: \"\",\r\n    email: \"\",\r\n    contactNo: \"\",\r\n  });\r\n\r\n  const [userID, setUserID] = useState(\"\");\r\n\r\n  const toggleDropdown = () => {\r\n    setIsOpen((prev) => !prev);\r\n  };\r\n  const dropdownRef = useRef(null);\r\n\r\n  const handleClickOutside = (event) => {\r\n    if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\r\n      setIsOpen(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const userType = localStorage.getItem(\"userType\");\r\n    setUserName(userType);\r\n    // Add event listener to detect clicks outside\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n\r\n    return () => {\r\n      // Clean up the event listener\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const updateTime = () => {\r\n      const today = new Date();\r\n      const date = today.getDate();\r\n      const month = today.getMonth() + 1;\r\n      const year = today.getFullYear();\r\n      const currentDate = `${date}/${month}/${year}`;\r\n      setCurrentDateValue(currentDate);\r\n      let hours = today.getHours();\r\n      const minutes = today.getMinutes();\r\n      const seconds = today.getSeconds();\r\n      const ampm = hours >= 12 ? \"PM\" : \"AM\";\r\n\r\n      hours = hours % 12;\r\n      hours = hours ? hours : 12; // The hour '0' should be '12'\r\n\r\n      const paddedMinutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n      const paddedSeconds = seconds < 10 ? \"0\" + seconds : seconds;\r\n\r\n      const formattedTime = `${hours}:${paddedMinutes}:${paddedSeconds} ${ampm}`;\r\n      const formattedDateTime = `${currentDate} ${formattedTime}`;\r\n      setCurrentTimeValue(formattedDateTime);\r\n    };\r\n\r\n    const intervalId = setInterval(updateTime, 1000); // Update every second\r\n\r\n    // Cleanup the interval when the component unmounts\r\n    return () => clearInterval(intervalId);\r\n  }, []); // Empty dependency array, so it runs only once when the component mounts\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setPersonalInfo({ ...personalInfo, [name]: value });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const userID = localStorage.getItem(\"userID\");\r\n    setUserID(userID);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        let allEmployees = [];\r\n        let nextToken = null;\r\n\r\n        do {\r\n          const response = await client.graphql({\r\n            query: listEmpPersonalInfos,\r\n            variables: {\r\n              nextToken: nextToken,\r\n            },\r\n          });\r\n\r\n          allEmployees = [\r\n            ...allEmployees,\r\n            ...response.data.listEmpPersonalInfos.items,\r\n          ];\r\n\r\n          nextToken = response.data.listEmpPersonalInfos.nextToken;\r\n        } while (nextToken);\r\n\r\n        // console.log(allEmployees, \"All Employees Data\");\r\n\r\n        const empPersonalInfos = allEmployees;\r\n\r\n        if (empPersonalInfos.length === 0) {\r\n          // console.log(\"No employee data found.\");\r\n          return;\r\n        }\r\n\r\n        // Find the employee matching the userID, ignoring case\r\n        const userPersonalInfo = empPersonalInfos.find(\r\n          (emp) =>\r\n            emp.empID.toString().toLowerCase() ===\r\n            userID.toString().toLowerCase()\r\n        );\r\n\r\n        if (userPersonalInfo) {\r\n          const profilePhotoString =\r\n            userPersonalInfo?.profilePhoto ||\r\n            \"public/profilePhoto/User-avatar.svg.png\";\r\n          // console.log(userPersonalInfo?.profilePhoto);\r\n          setGetPPhotoString(profilePhotoString);\r\n          const linkToStorageFile = async (pathUrl) => {\r\n            const result = await getUrl({\r\n              path: pathUrl,\r\n            });\r\n            // console.log(pathUrl);\r\n\r\n            return setPersonalInfo({\r\n              name: userPersonalInfo?.name,\r\n              profilePhoto: result?.url?.toString(),\r\n              email: userPersonalInfo?.email,\r\n              contactNo: userPersonalInfo?.contactNo || \"\",\r\n            });\r\n          };\r\n\r\n          linkToStorageFile(profilePhotoString);\r\n        } else {\r\n          console.log(`No matching employee found for userID: ${userID}`);\r\n        }\r\n      } catch (err) {\r\n        console.log(\"Error fetching employee personal infos:\", err);\r\n      }\r\n    };\r\n\r\n    if (userID) {\r\n      fetchData();\r\n    }\r\n  }, [userID, getPPhotoString]);\r\n\r\n  return (\r\n    <nav className=\"center bg-medium_white h-28 fixed top-0 w-full z-50 shadow-sm\">\r\n      <div className=\"screen-size flex justify-between items-center gap-10 py-7 px-3\">\r\n        <section className=\"flex-initial\">\r\n          <div className=\"max-w-[250px] w-full\">\r\n            <img className=\"w-full\" src={logo} alt=\"not found\" />\r\n          </div>\r\n        </section>\r\n        {/* searchbox disable */}\r\n        {/* <section className=\"flex-1 flex-grow-1 center\">\r\n          <div className=\"center w-[90%] gap-3 py-2 px-5 shadow-md shadow-[#00000033] rounded-full bg-white\">\r\n            <span>\r\n              <IoSearchOutline className=\"text-ash text-2xl font-semibold\" />\r\n            </span>\r\n            <input\r\n              className=\"outline-none bg-[transparent] text-lg text-ash w-full\"\r\n              type=\"text\"\r\n              placeholder=\"Search\"\r\n            />\r\n          </div>\r\n        </section> */}\r\n        <section className=\"flex-initial flex item-center gap-5 \">\r\n          <div className=\" my-auto\">\r\n            <p className=\"relative\">\r\n              <Link to=\"/notifications\">\r\n                {\" \"}\r\n                <IoMdNotificationsOutline className=\"text-2xl\" />\r\n              </Link>\r\n\r\n              {unreadCount > 0 && (\r\n                <span className=\"absolute -top-[4px] right-[2px] rounded-full h-2 w-2 text-dark_grey bg-[#d04545] text-xs center\">\r\n                  {\" \"}\r\n                </span>\r\n              )}\r\n\r\n              {/* // )} */}\r\n            </p>\r\n          </div>\r\n          <div className=\"flex items-center gap-5 px-5\">\r\n            <div className=\"space-y-2 \">\r\n              <p className=\"text-dark_grey text_size_5\">\r\n                {\" \"}\r\n                Welcome {personalInfo.name}\r\n              </p>\r\n              <article className=\"flex gap-5 text_size_7 text-dark_grey\">\r\n                {/* <p>{currentDateValue}</p> */}\r\n\r\n                <p>{currentTimeValue}</p>\r\n              </article>\r\n            </div>\r\n            <div className=\"relative\">\r\n              <div className=\"relative\">\r\n                <div\r\n                  className=\"w-12 h-12 rounded-full relative center overflow-hidden shadow-md shadow-[#00000033]\"\r\n                  onClick={() => toggleDropdown()}\r\n                >\r\n                  <img\r\n                    className=\"w-full object-center\"\r\n                    src={personalInfo?.profilePhoto || avatar}\r\n                    alt=\"avatar not found\"\r\n                  />\r\n                </div>\r\n                <p\r\n                  className=\"absolute -right-2 bottom-0 h-5 w-5 rounded-full bg-[#D9D9D9] center\"\r\n                  onClick={() => toggleDropdown()}\r\n                >\r\n                  <GoPencil className=\"text-xs text-dark_grey\" />\r\n                </p>\r\n              </div>\r\n              {isOpen && (\r\n                <div\r\n                  ref={dropdownRef}\r\n                  className=\"absolute top-12 -left-40 bg-white shadow-md  py-2 text-dark_grey text-[15px]  w-[250px]  flex flex-col\"\r\n                >\r\n                  <Profile\r\n                    setIsOpen={setIsOpen}\r\n                    name={personalInfo?.name}\r\n                    email={personalInfo?.email}\r\n                    profilePhoto={personalInfo?.profilePhoto}\r\n                    contactNo={personalInfo?.contactNo}\r\n                    getPPhotoString={getPPhotoString}\r\n                    setPersonalInfo={setPersonalInfo}\r\n                  />\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\nexport default Navbar;\r\n"],"names":["deleteObject","composeServiceApi","s3TransferHandler","deleteObjectSerializer","input","endpoint","url","AmplifyUrl","toString","validateS3RequiredParameter","Key","pathname","serializePathnameObjectKey","validateObjectUrl","bucketName","Bucket","key","objectURL","method","headers","assignStringVariables","ExpectedBucketOwner","async","response","statusCode","error","parseXmlError","buildStorageServiceError","content","map","DeleteMarker","deserializeBoolean","VersionId","RequestCharged","_objectSpread","$metadata","parseMetadata","defaultConfig","responseType","remove","amplify","_input$options","_input$options2","s3Config","keyPrefix","bucket","identityId","resolveS3ConfigAndInput","inputType","objectKey","validateStorageOperationInput","finalKey","validateBucketOwnerID","options","expectedBucketOwner","STORAGE_INPUT_KEY","concat","logger","debug","userAgentValue","getStorageUserAgentValue","StorageAction","Remove","path","remove$1","Amplify","PPPopUp","_ref","handleProfile","profilePhoto","getPPhotoString","setPersonalInfo","client","generateClient","changeProfilePhoto","setChangeProfilePhoto","useState","PPLastUP","setPPLastUP","selectedFile","setSelectedFile","isButtonVisible","setIsButtonVisible","isRemoveButtonVisible","setIsRemoveButtonVisible","watchedEmpID","localStorage","getItem","toUpperCase","handleFileUpload","e","type","file","target","files","includes","name","fileType","setUploadedDocs","empID","index","getCurrentUser","fileUrl","uploadData","data","result","uploadDate","Date","toISOString","split","prev","updatedUploads","find","item","upload","push","date","prevState","UploadProfile","alert","useEffect","_result$url","getUrl","linkToStorageFile","fileName","pop","String","onSubmit","empDetails","queryName","allData","nextToken","filter","and","eq","graphql","query","variables","items","Object","keys","fetchAllData","listEmpPersonalInfos","fileKey","__typename","createdAt","updatedAt","validTimeSheet","_objectWithoutProperties","_excluded2","updateEmpPersonalInfo","window","location","reload","console","updateProfile","val","fetchEmployeeData","_jsx","className","children","_jsxs","onClick","MdOutlineCancel","size","id","accept","onChange","src","avatar","alt","onError","document","getElementById","click","setUploadedFileNames","deleteID","setValue","watch","trigger","updatedFiles","_updatedFiles$fileTyp","Array","isArray","length","idDetails","getIDDetails","updatedUploadData","JSON","parse","err","handleDeleteFile","_ref2","rest","_excluded","Profile","setIsOpen","email","contactNo","popup","setPopUp","IoCameraOutline","Link","to","htmlFor","value","readOnly","signOut","removeItem","href","IoMdLogOut","Navbar","unreadCount","useNotifiCenter","isOpen","userName","setUserName","currentTimeValue","setCurrentTimeValue","currentDateValue","setCurrentDateValue","setGetPPhotoString","personalInfo","userID","setUserID","toggleDropdown","dropdownRef","useRef","handleClickOutside","event","current","contains","userType","addEventListener","removeEventListener","intervalId","setInterval","updateTime","today","getDate","month","getMonth","year","getFullYear","currentDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","ampm","paddedMinutes","paddedSeconds","formattedTime","formattedDateTime","clearInterval","allEmployees","empPersonalInfos","userPersonalInfo","emp","toLowerCase","profilePhotoString","pathUrl","log","fetchData","logo","IoMdNotificationsOutline","GoPencil","ref"],"sourceRoot":""}